[{"categories":["技能矩阵"],"content":"使用 Docker、MySQL 和 Flink 快速实践最小化的实时数据采集与流批一体分析。","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"使用 Docker、MySQL 和 Flink 快速实践最小化的实时数据采集与流批一体分析。 本文演示如何使用 Docker、MySQL 和 Flink 快速实践最小化的实时数据采集与流批一体分析，具有以下特点： 整个过程无需 Java / Scala 代码，仅用 Flink SQL 完成 Flink CDC 捕获 MySQL 数据变更 Flink 流处理写入 Kafka + Paimon (湖仓存储引擎) Flink 批处理统计写入 CSV 配套可视化工具 Adminer (MySQL) 和 Kafdrop (Kafka) 适合运维开发与数据分析人员快速上手体验 Flink 从 数据源 → CDC 捕获 → 流批分析 → 下游结果 的全链路实践。 ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:0:0","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"搭建服务 ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:0","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"目录结构 . ├── flink │ ├── conf │ │ └── sql-client-defaults.yaml │ └── lib │ ├── flink-connector-jdbc-3.2.0-1.19.jar │ ├── flink-shaded-hadoop-2-uber-2.8.3-10.0.jar │ ├── flink-sql-connector-kafka-3.2.0-1.19.jar │ ├── flink-sql-connector-mysql-cdc-3.2.0.jar │ ├── mysql-connector-j-8.4.0.jar │ ├── paimon-flink-1.19-1.2.0.jar │ └── paimon-format-1.2.0.jar ├── output │ └── checkpoints ├── sql │ ├── 01_kafka_cdc.sql │ ├── 02_paimon_cdc.sql │ ├── 03_topn_batch.sql │ └── 04_paimon_read.sql ├── docker-compose.yml └── mysql-init.sql ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:1","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"下载 JAR 包 mkdir flink-amd64 cd flink-amd64 mkdir -p output/checkpoints mkdir -p flink/lib cd flink/lib wget https://repo1.maven.org/maven2/org/apache/flink/flink-connector-jdbc/3.2.0-1.19/flink-connector-jdbc-3.2.0-1.19.jar wget https://repo1.maven.org/maven2/org/apache/flink/flink-sql-connector-kafka/3.2.0-1.19/flink-sql-connector-kafka-3.2.0-1.19.jar wget https://repo1.maven.org/maven2/org/apache/flink/flink-sql-connector-mysql-cdc/3.2.0/flink-sql-connector-mysql-cdc-3.2.0.jar wget https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.4.0/mysql-connector-j-8.4.0.jar wget https://repo1.maven.org/maven2/org/apache/paimon/paimon-flink-1.19/1.2.0/paimon-flink-1.19-1.2.0.jar wget https://repo1.maven.org/maven2/org/apache/paimon/paimon-format/1.2.0/paimon-format-1.2.0.jar wget https://repo1.maven.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.8.3-10.0/flink-shaded-hadoop-2-uber-2.8.3-10.0.jar ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:2","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 docker-compose.yml cd ../../ vim docker-compose.yml services: mysql: image: mysql:8.0 platform: linux/amd64 ports: - \"3306:3306\" environment: - MYSQL_ROOT_PASSWORD=rootpw - MYSQL_DATABASE=sales command: \u003e --server-id=857 --log-bin=binlog --binlog_format=ROW --binlog_row_image=FULL --gtid_mode=ON --enforce-gtid-consistency=ON --binlog_expire_logs_seconds=600 volumes: - ./mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql kafka: image: bitnami/kafka:3.7 platform: linux/amd64 ports: - \"9092:9092\" environment: - KAFKA_ENABLE_KRAFT=yes - KAFKA_CFG_NODE_ID=1 - KAFKA_CFG_PROCESS_ROLES=broker,controller - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true - ALLOW_PLAINTEXT_LISTENER=yes kafdrop: image: obsidiandynamics/kafdrop:4.2.0 platform: linux/amd64 ports: - \"9000:9000\" environment: - KAFKA_BROKERCONNECT=kafka:9092 depends_on: - kafka adminer: image: adminer platform: linux/amd64 ports: - \"8080:8080\" jobmanager: image: flink:1.19.1-scala_2.12-java11 platform: linux/amd64 command: jobmanager environment: - JOB_MANAGER_RPC_ADDRESS=jobmanager ports: - \"8081:8081\" volumes: - ./flink/conf/sql-client-defaults.yaml:/opt/flink/conf/sql-client-defaults.yaml:ro - ./flink/lib/flink-sql-connector-mysql-cdc-3.2.0.jar:/opt/flink/lib/flink-sql-connector-mysql-cdc-3.2.0.jar:ro - ./flink/lib/flink-sql-connector-kafka-3.2.0-1.19.jar:/opt/flink/lib/flink-sql-connector-kafka-3.2.0-1.19.jar:ro - ./flink/lib/flink-connector-jdbc-3.2.0-1.19.jar:/opt/flink/lib/flink-connector-jdbc-3.2.0-1.19.jar:ro - ./flink/lib/mysql-connector-j-8.4.0.jar:/opt/flink/lib/mysql-connector-j-8.4.0.jar:ro - ./flink/lib/paimon-flink-1.19-1.2.0.jar:/opt/flink/lib/paimon-flink-1.19-1.2.0.jar:ro - ./flink/lib/paimon-format-1.2.0.jar:/opt/flink/lib/paimon-format-1.2.0.jar:ro # self-contained and isolated set of Hadoop client libraries - ./flink/lib/flink-shaded-hadoop-2-uber-2.8.3-10.0.jar:/opt/flink/lib/flink-shaded-hadoop-2-uber-2.8.3-10.0.jar:ro - ./sql:/opt/sql:ro - ./output:/opt/flink/output taskmanager: image: flink:1.19.1-scala_2.12-java11 platform: linux/amd64 command: taskmanager environment: - JOB_MANAGER_RPC_ADDRESS=jobmanager depends_on: - jobmanager volumes: - ./flink/conf/sql-client-defaults.yaml:/opt/flink/conf/sql-client-defaults.yaml:ro - ./flink/lib/flink-sql-connector-mysql-cdc-3.2.0.jar:/opt/flink/lib/flink-sql-connector-mysql-cdc-3.2.0.jar:ro - ./flink/lib/flink-sql-connector-kafka-3.2.0-1.19.jar:/opt/flink/lib/flink-sql-connector-kafka-3.2.0-1.19.jar:ro - ./flink/lib/flink-connector-jdbc-3.2.0-1.19.jar:/opt/flink/lib/flink-connector-jdbc-3.2.0-1.19.jar:ro - ./flink/lib/mysql-connector-j-8.4.0.jar:/opt/flink/lib/mysql-connector-j-8.4.0.jar:ro - ./flink/lib/paimon-flink-1.19-1.2.0.jar:/opt/flink/lib/paimon-flink-1.19-1.2.0.jar:ro - ./flink/lib/paimon-format-1.2.0.jar:/opt/flink/lib/paimon-format-1.2.0.jar:ro # self-contained and isolated set of Hadoop client libraries - ./flink/lib/flink-shaded-hadoop-2-uber-2.8.3-10.0.jar:/opt/flink/lib/flink-shaded-hadoop-2-uber-2.8.3-10.0.jar:ro - ./sql:/opt/sql:ro - ./output:/opt/flink/output ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:3","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 mysql-init.sql vim mysql-init.sql CREATE DATABASE IF NOT EXISTS sales; USE sales; CREATE TABLE orders ( order_id INT PRIMARY KEY, customer_id INT, region VARCHAR(10), amount DOUBLE, status VARCHAR(10), order_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); INSERT INTO orders VALUES (1001, 1, 'US', 20.5, 'NEW', NOW()), (1002, 2, 'EU', 35.2, 'NEW', NOW()), (1003, 3, 'CN', 66.6, 'NEW', NOW()), (1004, 4, 'UK', 38.9, 'NEW', NOW()), (1005, 5, 'AU', 25.3, 'NEW', NOW()), (1006, 6, 'JP', 33.8, 'NEW', NOW()); CREATE USER 'flink'@'%' IDENTIFIED BY 'flinkpw'; GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'flink'@'%'; FLUSH PRIVILEGES; ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:4","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 Flink 配置文件 mkdir -p flink/conf vim flink/conf/sql-client-defaults.yaml execution: type: streaming result-mode: table parallelism: 1 configuration: execution.checkpointing.interval: 5 s execution.checkpointing.mode: EXACTLY_ONCE execution.checkpointing.min-pause: 1 s execution.checkpointing.timeout: 5 min state.checkpoints.dir: file:///opt/flink/output/checkpoints restart-strategy: fixed-delay restart-strategy.fixed-delay.attempts: 10 restart-strategy.fixed-delay.delay: 5 s table.exec.sink.not-null-enforcer: drop table.exec.sink.upsert-materialize: none table.exec.source.idle-timeout: 5 s deployment: response-timeout: 10000 ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:5","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 kafka_cdc SQL mkdir -p sql vim sql/01_kafka_cdc.sql -- 01_kafka_cdc.sql CREATE TABLE orders_cdc ( order_id INT, customer_id INT, region STRING, amount DOUBLE, status STRING, order_time TIMESTAMP(3), PRIMARY KEY (order_id) NOT ENFORCED ) WITH ( 'connector' = 'mysql-cdc', 'hostname' = 'mysql', 'port' = '3306', 'username' = 'flink', 'password' = 'flinkpw', 'database-name' = 'sales', 'table-name' = 'orders', 'server-id' = '985', 'scan.startup.mode' = 'initial' ); CREATE TABLE orders_kafka ( order_id INT, customer_id INT, region STRING, amount DOUBLE, status STRING, order_time TIMESTAMP(3), PRIMARY KEY (order_id) NOT ENFORCED ) WITH ( 'connector' = 'upsert-kafka', 'topic' = 'orders_topic', 'properties.bootstrap.servers' = 'kafka:9092', 'key.format' = 'json', 'value.format' = 'json' ); INSERT INTO orders_kafka SELECT * FROM orders_cdc; ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:6","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 paimon_cdc SQL vim sql/02_paimon_cdc.sql -- 02_paimon_cdc.sql SET 'execution.runtime-mode' = 'streaming'; SET 'execution.checkpointing.interval' = '5 s'; SET 'execution.checkpointing.mode' = 'EXACTLY_ONCE'; SET 'execution.checkpointing.min-pause' = '1 s'; SET 'execution.checkpointing.timeout' = '5 min'; CREATE TABLE orders_cdc ( order_id INT, customer_id INT, region STRING, amount DOUBLE, status STRING, order_time TIMESTAMP(3), PRIMARY KEY (order_id) NOT ENFORCED ) WITH ( 'connector' = 'mysql-cdc', 'hostname' = 'mysql', 'port' = '3306', 'username' = 'flink', 'password' = 'flinkpw', 'database-name' = 'sales', 'table-name' = 'orders', 'server-id' = '996', 'scan.startup.mode' = 'initial' ); CREATE CATALOG paimon_catalog WITH ( 'type' = 'paimon', 'warehouse' = 'file:///opt/flink/output/warehouse' ); USE CATALOG paimon_catalog; CREATE DATABASE IF NOT EXISTS dwd; USE dwd; CREATE TABLE IF NOT EXISTS orders_paimon ( order_id INT, customer_id INT, region STRING, amount DOUBLE, status STRING, order_time TIMESTAMP(3), PRIMARY KEY (order_id) NOT ENFORCED ) WITH ( 'connector' = 'paimon', 'changelog-producer' = 'input', 'bucket' = '1' ); USE CATALOG default_catalog; INSERT INTO paimon_catalog.dwd.orders_paimon SELECT * FROM orders_cdc; ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:7","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 topn_batch SQL vim sql/03_topn_batch.sql -- 03_topn_batch.sql SET 'execution.runtime-mode' = 'batch'; SET 'sql-client.execution.result-mode' = 'TABLEAU'; CREATE TABLE orders_jdbc ( order_id INT, customer_id INT, region STRING, amount DOUBLE, status STRING, order_time TIMESTAMP(3), PRIMARY KEY (order_id) NOT ENFORCED ) WITH ( 'connector' = 'jdbc', 'url' = 'jdbc:mysql://mysql:3306/sales', 'table-name' = 'orders', 'username' = 'flink', 'password' = 'flinkpw' ); CREATE TABLE top_customers ( customer_id INT, total_amount DOUBLE ) WITH ( 'connector' = 'filesystem', 'path' = '/opt/flink/output/top_customers', 'format' = 'csv' ); INSERT OVERWRITE top_customers SELECT customer_id, CAST(SUM(amount) AS DOUBLE) AS total_amount FROM orders_jdbc GROUP BY customer_id ORDER BY total_amount DESC LIMIT 5; SELECT * FROM top_customers; ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:8","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"创建 paimon_read SQL vim sql/04_paimon_read.sql -- 04_paimon_read.sql SET 'sql-client.execution.result-mode' = 'TABLEAU'; SET 'execution.runtime-mode' = 'batch'; CREATE CATALOG paimon_catalog WITH ( 'type' = 'paimon', 'warehouse' = 'file:///opt/flink/output/warehouse' ); USE CATALOG paimon_catalog; USE dwd; SELECT COUNT(*) AS cnt FROM orders_paimon; SELECT * FROM orders_paimon; ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:1:9","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"流批一体分析 ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:0","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"运行 docker-compose docker-compose pull docker-compose up -d --scale taskmanager=4 [+] Running 7/7 ✔ Network flink-amd64_default Created ✔ Container flink-amd64-jobmanager-1 Started ✔ Container flink-amd64-kafka-1 Started ✔ Container flink-amd64-adminer-1 Started ✔ Container flink-amd64-mysql-1 Started ✔ Container flink-amd64-kafdrop-1 Started ✔ Container flink-amd64-taskmanager-1 Started ✔ Container flink-amd64-taskmanager-2 Started ✔ Container flink-amd64-taskmanager-3 Started ✔ Container flink-amd64-taskmanager-4 Started docker-compose ps --format \"table {{.Name}}\\t{{.Service}}\\t{{.Status}}\" NAME SERVICE STATUS flink-amd64-adminer-1 adminer Up 3 minutes flink-amd64-jobmanager-1 jobmanager Up 3 minutes flink-amd64-kafdrop-1 kafdrop Up 3 minutes flink-amd64-kafka-1 kafka Up 3 minutes flink-amd64-mysql-1 mysql Up 3 minutes flink-amd64-taskmanager-1 taskmanager Up 3 minutes flink-amd64-taskmanager-2 taskmanager Up 3 minutes flink-amd64-taskmanager-3 taskmanager Up 3 minutes flink-amd64-taskmanager-4 taskmanager Up 3 minutes ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:1","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"运行 kafka_cdc SQL docker-compose exec -T jobmanager /opt/flink/bin/sql-client.sh -f /opt/sql/01_kafka_cdc.sql ... Flink SQL\u003e [INFO] Submitting SQL update statement to the cluster... [INFO] SQL update statement has been successfully submitted to the cluster: Job ID: e75d332470a1b23cfeb73f36ef585c3b Flink SQL\u003e Shutting down the session... done. ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:2","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"运行 paimon_cdc SQL docker-compose exec -T jobmanager /opt/flink/bin/sql-client.sh -f /opt/sql/02_paimon_cdc.sql ... Flink SQL\u003e [INFO] Execute statement succeed. Flink SQL\u003e [INFO] Submitting SQL update statement to the cluster... [INFO] SQL update statement has been successfully submitted to the cluster: Job ID: c3471aacb54e24dbcccc0a461bb5ce98 Flink SQL\u003e Shutting down the session... done. ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:3","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"验证 Streaming CDC 插入新数据 docker-compose exec -T mysql mysql -uroot -prootpw -e \\ \"USE sales; INSERT INTO orders VALUES (3001, 31, 'US', 12.3, 'PAID', NOW());\" 检查 Flink jobs 访问 http://localhost:8081 查看 Flink running jobs 检查 MySQL table 访问 http://localhost:8080 登录: Server: mysql Username: root Password: rootpw Database: sales 检查 table sales.orders 检查 Kafka events 访问 http://localhost:9000 查看 topic orders_topic ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:4","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"验证 Batch Job docker-compose exec -T jobmanager /opt/flink/bin/sql-client.sh -f /opt/sql/03_topn_batch.sql ... Flink SQL\u003e \u003e INSERT OVERWRITE top_customers \u003e SELECT customer_id, \u003e CAST(SUM(amount) AS DOUBLE)[INFO] Submitting SQL update statement to the cluster... [INFO] SQL update statement has been successfully submitted to the cluster: Job ID: 6693a0bee3f0558c43e21b890d797662 Flink SQL\u003e \u003e SELECT customer_id, \u003e CAST(SUM(amount) AS DOUBLE)+-------------+--------------+ | customer_id | total_amount | +-------------+--------------+ | 3 | 66.6 | | 4 | 38.9 | | 2 | 35.2 | | 6 | 33.8 | | 5 | 25.3 | +-------------+--------------+ 5 rows in set (4.50 seconds) Flink SQL\u003e Shutting down the session... done. ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:5","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"验证 Paimon Table docker-compose exec -T mysql mysql -uroot -prootpw -e \" INSERT INTO sales.orders (order_id, customer_id, region, amount, status, order_time) VALUES (6001, 61, 'US', 18.5, 'NEW', NOW()), (6002, 62, 'EU', 27.0, 'PAID', NOW()), (6003, 63, 'APAC',33.3, 'NEW', NOW()); \" docker-compose exec -T mysql mysql -uroot -prootpw -e \" UPDATE sales.orders SET amount = amount + 5, status='PAID' WHERE order_id IN (6001, 6002); \" docker-compose exec -T mysql mysql -uroot -prootpw -e \" DELETE FROM sales.orders WHERE order_id = 6003; \" docker-compose exec -T jobmanager /opt/flink/bin/sql-client.sh -f /opt/sql/04_paimon_read.sql ... Flink SQL\u003e [INFO] Execute statement succeed. Flink SQL\u003e \u003e SELECT COUNT(*)+-----+ | cnt | +-----+ | 9 | +-----+ 1 row in set (7.81 seconds) Flink SQL\u003e +----------+-------------+--------+--------+--------+-------------------------+ | order_id | customer_id | region | amount | status | order_time | +----------+-------------+--------+--------+--------+-------------------------+ | 1001 | 1 | US | 20.5 | NEW | 2025-09-22 10:51:08.000 | | 1002 | 2 | EU | 35.2 | NEW | 2025-09-22 10:51:08.000 | | 1003 | 3 | CN | 66.6 | NEW | 2025-09-22 10:51:08.000 | | 1004 | 4 | UK | 38.9 | NEW | 2025-09-22 10:51:08.000 | | 1005 | 5 | AU | 25.3 | NEW | 2025-09-22 10:51:08.000 | | 1006 | 6 | JP | 33.8 | NEW | 2025-09-22 10:51:08.000 | | 3001 | 31 | US | 12.3 | PAID | 2025-09-22 10:53:59.000 | | 6001 | 61 | US | 23.5 | PAID | 2025-09-22 10:56:48.000 | | 6002 | 62 | EU | 32.0 | PAID | 2025-09-22 10:56:48.000 | +----------+-------------+--------+--------+--------+-------------------------+ 9 rows in set (1.23 seconds) Flink SQL\u003e Shutting down the session... done. 检查 Flink finished jobs ","date":"2025-09-22","objectID":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/:2:6","tags":["Flink","CDC"],"title":"快速实践 Flink SQL 流批一体","uri":"/2025/09/quickstart-flink-sql-unified-batch-and-streaming/"},{"categories":["技能矩阵"],"content":"使用 Docker、KRaft 和 Kafdrop 快速实践最小化的 Debezium MySQL Kafka CDC。","date":"2025-09-18","objectID":"/2025/09/quickstart-debezium-mysql-kafka-cdc/","tags":["CDC"],"title":"快速实践 Debezium MySQL Kafka CDC","uri":"/2025/09/quickstart-debezium-mysql-kafka-cdc/"},{"categories":["技能矩阵"],"content":"使用 Docker、KRaft 和 Kafdrop 快速实践最小化的 Debezium MySQL Kafka CDC (Change Data Capture)。 ","date":"2025-09-18","objectID":"/2025/09/quickstart-debezium-mysql-kafka-cdc/:0:0","tags":["CDC"],"title":"快速实践 Debezium MySQL Kafka CDC","uri":"/2025/09/quickstart-debezium-mysql-kafka-cdc/"},{"categories":["技能矩阵"],"content":"搭建基础服务 创建 docker-compose 文件 mkdir debezium-amd64 cd debezium-amd64 vim docker-compose.yml services: kafka: image: bitnami/kafka:3.7 platform: linux/amd64 ports: - \"9092:9092\" environment: # enable KRaft (no Zookeeper) - KAFKA_ENABLE_KRAFT=yes - KAFKA_CFG_NODE_ID=1 - KAFKA_CFG_PROCESS_ROLES=broker,controller - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true - ALLOW_PLAINTEXT_LISTENER=yes connect: image: quay.io/debezium/connect:3.2 platform: linux/amd64 ports: - \"8083:8083\" environment: - BOOTSTRAP_SERVERS=kafka:9092 - GROUP_ID=1 - CONFIG_STORAGE_TOPIC=connect_configs - OFFSET_STORAGE_TOPIC=connect_offsets - STATUS_STORAGE_TOPIC=connect_statuses - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter - KEY_CONVERTER_SCHEMAS_ENABLE=false - VALUE_CONVERTER_SCHEMAS_ENABLE=false depends_on: - kafka kafdrop: image: obsidiandynamics/kafdrop:4.2.0 platform: linux/amd64 ports: - \"9000:9000\" environment: - KAFKA_BROKERCONNECT=kafka:9092 depends_on: - kafka mysql: image: mysql:8.0 platform: linux/amd64 ports: - \"3306:3306\" environment: - MYSQL_ROOT_PASSWORD=debezium - MYSQL_USER=debezium - MYSQL_PASSWORD=dbz - MYSQL_DATABASE=inventory command: \u003e --server-id=857 --log-bin=binlog --binlog_format=ROW --binlog_row_image=FULL --gtid_mode=ON --enforce-gtid-consistency=ON --binlog_expire_logs_seconds=600 volumes: - ./mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql vim mysql-init.sql -- ensure the database exists and is selected CREATE DATABASE IF NOT EXISTS inventory; USE inventory; -- minimal demo table (keep it simple for CDC) CREATE TABLE IF NOT EXISTS customers ( id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- seed data for snapshot INSERT INTO customers (first_name, last_name, email) VALUES ('Alice', 'Smith', 'alice@example.com'), ('Bob', 'Johnson', 'bob@example.com'); vim register-mysql.json { \"name\": \"mysql-inventory-connector\", \"config\": { \"connector.class\": \"io.debezium.connector.mysql.MySqlConnector\", \"tasks.max\": \"1\", \"database.hostname\": \"mysql\", \"database.port\": \"3306\", \"database.user\": \"debezium\", \"database.password\": \"dbz\", \"database.server.id\": \"857\", \"topic.prefix\": \"mysql_server\", \"database.include.list\": \"inventory\", \"table.include.list\": \"inventory.customers\", \"snapshot.mode\": \"initial\", \"snapshot.locking.mode\": \"none\", \"include.schema.changes\": \"false\", \"tombstones.on.delete\": \"false\", \"schema.history.internal.kafka.bootstrap.servers\": \"kafka:9092\", \"schema.history.internal.kafka.topic\": \"schema-changes.inventory\" } } ls -1 docker-compose.yml mysql-init.sql register-mysql.json 启动服务 docker-compose up -d [+] Running 5/5 ✔ Network debezium-amd64_default Created ✔ Container debezium-amd64-mysql-1 Started ✔ Container debezium-amd64-kafka-1 Started ✔ Container debezium-amd64-kafdrop-1 Started ✔ Container debezium-amd64-connect-1 Started ","date":"2025-09-18","objectID":"/2025/09/quickstart-debezium-mysql-kafka-cdc/:1:0","tags":["CDC"],"title":"快速实践 Debezium MySQL Kafka CDC","uri":"/2025/09/quickstart-debezium-mysql-kafka-cdc/"},{"categories":["技能矩阵"],"content":"配置 Source Connector 授权 Source Connector 访问 MySQL docker-compose exec -T mysql mysql -uroot -pdebezium -e \" GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT, LOCK TABLES ON *.* TO 'debezium'@'%'; FLUSH PRIVILEGES;\" 注册 Source Connector curl -s -X POST http://localhost:8083/connectors \\ -H \"Content-Type: application/json\" \\ -d @register-mysql.json 更新 Source Connector 配置（可选） jq '.config' register-mysql.json | \\ curl -s -X PUT http://localhost:8083/connectors/mysql-inventory-connector/config \\ -H \"Content-Type: application/json\" \\ -d @- | jq . 检查 Source Connector 状态 curl -s localhost:8083/connectors/mysql-inventory-connector/status | jq . { \"name\": \"mysql-inventory-connector\", \"connector\": { \"state\": \"RUNNING\", \"worker_id\": \"192.168.97.5:8083\" }, \"tasks\": [ { \"id\": 0, \"state\": \"RUNNING\", \"worker_id\": \"192.168.97.5:8083\" } ], \"type\": \"source\" } 触发 CDC 事件 插入/更新/删除一些数据行来查看增/改/删事件 docker-compose exec -T mysql mysql -udebezium -pdbz -e \"USE inventory; INSERT INTO customers (first_name,last_name,email) VALUES ('Charlie','Wang','charlie@example.com'); UPDATE customers SET email='alice_new@example.com' WHERE first_name='Alice'; DELETE FROM customers WHERE first_name='Bob';\" 在 Kafdrop 上查看主题 访问 http://localhost:9000 查看主题 mysql_server.inventory.customers 查看新事件 \"op\":\"c\" / \"op\":\"u\" / \"op\":\"d\" ","date":"2025-09-18","objectID":"/2025/09/quickstart-debezium-mysql-kafka-cdc/:2:0","tags":["CDC"],"title":"快速实践 Debezium MySQL Kafka CDC","uri":"/2025/09/quickstart-debezium-mysql-kafka-cdc/"},{"categories":["技能矩阵"],"content":"配置 Sink Connector 授权 Sink Connector 访问 MySQL docker-compose exec -T mysql mysql -uroot -pdebezium -e \" CREATE USER IF NOT EXISTS 'sink'@'%' IDENTIFIED BY 'sinkpw'; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER ON inventory.* TO 'sink'@'%'; FLUSH PRIVILEGES;\" vim register-jdbc-sink.json { \"name\": \"jdbc-sink-mysql\", \"config\": { \"connector.class\": \"io.debezium.connector.jdbc.JdbcSinkConnector\", \"tasks.max\": \"1\", \"topics\": \"mysql_server.inventory.customers\", \"connection.url\": \"jdbc:mysql://mysql:3306/inventory\", \"connection.username\": \"sink\", \"connection.password\": \"sinkpw\", \"insert.mode\": \"upsert\", \"delete.enabled\": \"true\", \"primary.key.mode\": \"record_key\", \"primary.key.fields\": \"id\", \"schema.evolution\": \"basic\", \"collection.name.format\": \"customers_mirror\", \"consumer.override.auto.offset.reset\": \"earliest\" } } 注册 Sink Connector curl -s -X POST http://localhost:8083/connectors \\ -H \"Content-Type: application/json\" \\ -d @register-jdbc-sink.json 更新 Sink Connector（可选） jq '.config' register-jdbc-sink.json | \\ curl -s -X PUT http://localhost:8083/connectors/mysql-inventory-connector/config \\ -H \"Content-Type: application/json\" \\ -d @- | jq . 检查 Sink Connector 状态 curl -s http://localhost:8083/connectors/jdbc-sink-mysql/status | jq . { \"name\": \"jdbc-sink-mysql\", \"connector\": { \"state\": \"RUNNING\", \"worker_id\": \"192.168.97.5:8083\" }, \"tasks\": [ { \"id\": 0, \"state\": \"RUNNING\", \"worker_id\": \"192.168.97.5:8083\" } ], \"type\": \"sink\" } ","date":"2025-09-18","objectID":"/2025/09/quickstart-debezium-mysql-kafka-cdc/:3:0","tags":["CDC"],"title":"快速实践 Debezium MySQL Kafka CDC","uri":"/2025/09/quickstart-debezium-mysql-kafka-cdc/"},{"categories":["技能矩阵"],"content":"验证端到端数据同步 检查源表 docker-compose exec -T mysql mysql -usink -psinkpw -e \"SELECT * FROM inventory.customers;\" id first_name last_name email created_at 1 Alice Smith alice_new@example.com 2025-09-19 01:50:16 3 Charlie Wang charlie@example.com 2025-09-19 01:58:59 检查镜像表 docker-compose exec -T mysql mysql -usink -psinkpw -e \"SELECT * FROM inventory.customers_mirror;\" id first_name last_name email created_at 1 Alice Smith alice_new@example.com 2025-09-19 01:50:16 3 Charlie Wang charlie@example.com 2025-09-19 01:58:59 ","date":"2025-09-18","objectID":"/2025/09/quickstart-debezium-mysql-kafka-cdc/:4:0","tags":["CDC"],"title":"快速实践 Debezium MySQL Kafka CDC","uri":"/2025/09/quickstart-debezium-mysql-kafka-cdc/"},{"categories":["读书笔记"],"content":"个体在群体中会丧失理性与独立性，被情绪、暗示和集体无意识支配，从而表现出盲目、冲动与非理性的行为。","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"个体在群体中会丧失理性与独立性，被情绪、暗示和集体无意识支配，从而表现出盲目、冲动与非理性的行为。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:0:0","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"序 《乌合之众：大众心理研究》是法国社会心理学家古斯塔夫·勒庞Gustave Le Bon创作的社会心理学著作，首次出版于1895年。勒庞生活的年代在法国大革命结束后不久，人们从攻占巴士底狱到发动热月政变，经历了法国大革命法国历史进入了维护大革命成果的时期，群众的声音开始取得优势，民众得有机会进入政治生活。在百年之后的今天，勒庞所描述的时代背景仍然适用且发展更甚。 “乌合之众”一词的解释是：像乌鸦聚集在一起的一群人，形容杂凑在一起，毫无组织纪律、易受操纵、缺乏独立思考的人群。本书的核心观点是：个体在群体中会丧失理性与独立性，被情绪、暗示和集体无意识支配，从而表现出盲目、冲动与非理性的行为。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:1:0","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:2:0","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"第一卷 群体心理 第一章 群体的一般特征 群体里面的所有人的情感和想法都指向了同一个方向，他们那些有意识的个性消失了，一个集体的思维形成了。 人们在智力上有很大差异，但在直觉、情感和感受上却是非常近似的。 在属于情感范畴的每一件事上：宗教、政治、道德、爱心以及同情心等，最出众的人也没比普通人高明多少。 从智力上来看，一个伟大的数学家和给他制造靴子的人之间或许存在着巨大的差异，但是，从性格的角度来看，他们之间的差异就变得不那么明显或是压根就不存在。 在集体思维中，个人的智力被削弱了，从而他们的个性也被削弱了。 特征的多样化陷入了同性质的特征之中，无意识的性格特点占据了制高点。 群体一般只拥有普通的品质，这一事实能够解释为什么它永远也无法实现要求高度智慧的行动。 在群体里，累积起来的不是智慧而是愚蠢。 他或许是一个有教养的个人，但是他在群体里却变成了一个野蛮人，一个靠本能行动的生物。 他具有自发性、生性暴躁、残忍，还拥有原始物种所具有的满腔热情和英雄主义，同原始物种更加相像的是，他愿意让自己被言语和形象所影响。 这样的言语和形象在组成群体的个人孤立存在的情况下，不会产生任何效果。他被诱使去做一些同他最为明显的利益和他最熟知的习惯格格不入的行动。 一个群体里的一个人，不过是众多沙粒当中的一颗，可以被大风吹到任何地方。 第二章 群体的感情和道德观 从他们组成群体的那一刻起，那些有学识的人就跟那些无知的人一样失去了观察的能力。 那个能够产生的共鸣就会成为一种肯定过程的中心，它会入侵人们的理解力，让所有的批判能力瘫痪。 那么，观察者所看到的将不再是目标本身，而是在他的脑海里唤起的形象。 关于那些在人类的历史上扮演重要角色的伟人们的生活，例如赫拉克利特、释迦牟尼或穆罕默德，我们没有任何的真实记录。 但是，从事实的观点来看，他们真正的日常生活对我们来说无关紧要。 我们想要知道，我们的伟人被展现在大众面前时是什么形象。打动群体心灵的是神话传说里的英雄，而非真实英雄。 随着时光的流逝，特别是由于种族的缘故，群体的想象力还在继续改变着它们。 《旧约全书》中无比残暴的耶和华与圣德肋撒的爱的上帝有着很大的区别，在中国受到崇拜的佛祖，与印度人所尊奉的佛祖也并没有什么太多的共同点。 群体情绪的简单和夸张造成的结果是，它完全不知晓质疑和不确定性是何物。 它就像女人一样，往往在一瞬间就会走向极端。怀疑一说出口，马上就会变成不可辩驳的证据。 心生憎恶或是不赞许，若是发生在孤立的个人身上，将不会获得力量，如果对象是一个群体里的个人，则会成为狂怒的仇恨。 群体感情的暴躁，尤其是在异质群体里面，又会因为全部责任感的消失而得到加强。 意识到犯了错误肯定不会受到惩罚，并且具有这样的意识的人越多，就越是肯定，由于人数众多而产生的暂时优势，会让群体表现出单独的个人无法表现出的情感和行为。 在群体里面，愚笨的人、无知的人和心存嫉妒的人，挣脱了自身卑微的感觉，拥有了一种残暴且短暂但却无穷无尽的力量。 然而，这并不意味着群体无法在巧妙的影响下，展现出英雄主义、奉献精神或崇高的道德品质。他们甚至要比独立的个人更有能力展示这些品质。 群体因为夸大自己的感情，所以它只能被过度的情感所打动。 一个演说家想要靠话语打动一个群体，必须大量运用狂暴的主张。 要夸大、肯定、不断重复，绝不用说理的方法证明任何事情，这些都是做公共讲演的演说家众所周知的论说方法。 种族因素占据压倒性优势的影响力。 一部在某个国家掀起热情的歌剧，在另外一个国家却没有获得成功，或者只能取得部分、平常的成功，因为它没有产生对公众发生作用的影响力。 个人一旦成为一个群体的一员，他的智商水平就会立刻大幅度下降。 群体仅仅能把感情提升到极高或极低的境界。 群体对强权唯命是从，却几乎无法被良好的善意所打动，这对于他们来说无非就是一种懦弱的表现形式。 倘若“道德”这个词意味着持久地对某些社会的传统表现尊重，不断抑制私心的冲动，那么很明显，群体太冲动，太容易变化，因此它不能算在道德的范畴之内。 但是，如果我们把某些暂时呈现出来的道德与品质，如舍己为人、自我牺牲、公正无私、奉献精神和对平等的渴求等，加入“道德”内容里面，我们或许会说，群体会时不时地表现出非常崇高的道德品质。 只有集体主义具备伟大的大公无私和奉献的精神。 群体为了自己只有一知半解的信仰、想法和零散的话语，就会大无畏地面对死亡！ 虽然群体经常放纵自己低劣的本能，他们还会树立起崇高道德行为的典范。 如果公正无私、顺从和对一个现实或虚幻的理想表现出绝对的奉献精神是道德品质的话，那么就可以说，群体通常会拥有这种道德品质，并且达到最聪慧的哲学家都很难达到的程度。 他们当然是在无意识的情况下实践这些道德品质，不过这些都无碍大局。 我们不应该太抱怨群体过多被无意识的因素所引导，从而无法做出合理的论证。 在某些情况下，他们倘若能开动脑筋考虑一下当下的利益，那么我们的星球上就不可能培育出任何文明，人类将不会拥有自己的历史。 第三章 群体的观念、推理与想象力 中世纪的基督教观念，上个世纪的民主观念，或是现在的社会主义观念，都称不上十分高明。 从哲学的角度考虑，它们只能算是一些令人扼腕的错误，然而，它们的力量却是无穷无尽的，在未来很长的一段时间里，它们都将会是决定各国行动的最必不可少的因素。 我们万万不能认为，仅仅是因为一个观念的公正性能够被证实，就至少能在有文化修养者的头脑中产生作用。 我们可以看一下最清晰的证据能够对大多数人的影响多么微不足道，就能够很快证明这一事实。 如果证据非常清晰，它或许会被有教养的人接受，但是那些信徒们会很快被他自我的无意识状态带回原来的观点之中。 过了几天再看他，他依旧会用完全相同的观点阐述他之前的论证。 实际上，他仍旧处在以往观念的影响下，它们已经变成了一种情感，只有这种观念影响着我们的行为和言语中最为隐秘的动机。 引发法国大革命的那些哲学观念，经过将近一个世纪才灌输进群众的思维之中。 一旦它们站稳了脚跟，它们那不可抗拒的力量就会人尽皆知。 整个国家对于社会公正性、为了实现抽象的权利和理想主义自由而作的苦苦追求，动摇了所有的王权，深刻地搅乱了整个西方世界。 观念要想建立在群体的思维之中，需要相当长的一段时间，要想去除它们也需要很长时间。 所以，从观念来看，群体总是走在几代有学识的人和哲学家的后面。 演说家只有在和群体进行亲密沟通时，才能激发出对他们有诱惑力的形象。 只要是他能成功做到这一点，他的目标就算达到了。 20卷喋喋不休的高谈阔论，这始终是思考的产物，倒不如讲一些能够对它试图说服的大脑具有感召力的话语。 当一个文明被分析过后，你会发现在现实当中，那些不同寻常的和传奇的事迹给予了文明真正的支持。 从历史上来看，事物的表面现象往往扮演着比现实更加重要的角色，不现实的因素总是要比现实的因素更加重要。 第四章 群体信仰所采取的宗教形式 群体不具备论证的能力，他们要么会完全接受观念，要么彻底拒绝； 对它产生影响的暗示入侵了他们整个理解区域，并且立刻表现出将它们转变成行动的倾向。 我们还证明，对群体施加适当的影响，它就会随时为自己信奉的理想主义赴汤蹈火。 我们还看到，它们只能产生强烈而极端的情绪，同情心很快就会变成崇拜，憎恶一旦在心中生成，也会立刻转变成仇恨。 群体的信念拥有盲目的服从、猛烈的偏执以及对大肆宣传的需要等这些宗教情感所固有的特点，因此可以说，它们所有的信仰都有一个宗教的形式。 受到群体赞扬的英雄就是群体当中名副其实的神。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:2:1","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"第二卷 群体的意见和信念 第一章 群体的意见和信念中的间接因素 种族 种族这一因素必须被放在首位，因为它的重要性要远超过其他因素。 传统 传统代表着观念、需求和感情。它们是种族的综合体作用下的产物，并且对我们施加了巨大的影响。 如果没有传统，无论是一个民族的气质还是文明都不会被创造出来。 没有了传统，文明就不可能存在；如果这些传统不被破坏，也不可能出现人类的进步。 时间 没有哪种统治形式可以在一天之内建立起来。政治和社会组织是需要数百年才能磨炼出来的产物。 封建社会的体系以一种无形的、混乱的状态存在了数个世纪，直到建立起它的典章。 政治和社会制度 制度没有固有的优点，从它们自身来看，它们既不好也不坏。 那些在特定的时刻对一个国家有益的制度，对另一个国家或许会极为有害。 不能从制度里寻找深刻影响群体思想的方法。 当我们看到一些国家，例如美利坚合众国，在民主制度下实现了国家的高度繁荣，而反观另一些国家，例如那些以西班牙人为主的美洲共和国，在极为相似的制度下，却处于一种可悲的无政府状态中，我们应当承认，这种制度同一个民族的伟大和另一个民族的衰落并无任何关联。 群体是由他们的性格所掌控的，那些不是由群体的内在性格塑造而成的制度，都不过是一件借来的衣服，一种短暂的伪装。 教育 教育既不会让一个人变得更加有道德，也不让他变得更快乐； 它既不会改变他的本能，也不会改变他与生俱来的激情，而且有时，这种情况仅仅需要不良因素的诱导就会发生，是有百害而无一利的。 统计学家通过向我们阐述犯罪率会随着教育的普及，至少是某一种教育的普及而增加的事例来证实这些观点，社会上最坏的敌人，无政府主义者，他们的大名或许会出现在学校活动奖励的名单上。 从上小学一直到大学毕业，一个年轻人除了用心牢记课本上的知识以外，什么都不会做，他的判断力或个人的主动性从来都没有实践过。 就他而言，受教育只不过是死记硬背和绝对服从。 拥有评判、经验、主动性和个性是在生活中取得成功的条件，这些品质并不是课本所能给予的。 教科书和字典可以是有用的参考工具，但是，把它长时间放在人们的头脑里却完全没有用处。 第二章 群体意见的直接因素 形象、词语和套话 词语的力量和由它们所激起的形象之间有着密切的联系，又独立于它们真实的含义。 有时候，那些定义最不准确的词语，反倒可以产生最大的影响力。 比如民主、社会主义、平等和自由等，它们的含义太过于模糊，以至于用大量的专著也不足以确认它们的所指。 不过，我们可以确定，这几个简短的词语之中拥有着神奇的力量，就好像在它们的身上包含解决所有问题的方法。 将各种不尽相同的潜意识中的抱负和实现的希望合成到它们的体内。 用新名称替换能够让群众想起不和谐形象的名称，因为其他词语的新颖程度能够防止这种联想。 ​“地租”变成了“土地税”​，​“盐赋”变成了“盐税”​，​“徭役”变成了间接摊派，商号和行会的税款变成了执照费，如此等等。 这门艺术遇到的最大困难之一，就是在同一个社会里，相同的词语对于不同的社会阶层具有不同的含义，他们表面上都在使用同样的词语，实际上，他们说着不同的语言。 幻觉 赋予人们希望和幻觉，不然他们将无法生存下去。这就是存在着众神、英雄和诗人的原因。 科学承担起这一任务已有50年的时间，但是，科学在渴求理想的心灵之中却是有所缺失的，因为它没有胆量做出足够慷慨的承诺，因为它不能说谎。 经验 一般来说，一代人的经验对于下一代人来说是没有利用价值的。这就是一些被当作证据援引的历史事实无法达成目的的原因。 它们唯一的功能就是向人们证明了，经验就算是想要成功动摇根植于群体思想中的错误观念，也需要一代又一代不间断地出现。 理性 那些懂得如何影响它们的演讲者，总是寻求于他们的感情而非他们的理性。逻辑定律并没有在群体身上产生作用。 想要让群体相信什么，首先必须完全理解那些令它们为之兴奋的感情，并且假装自己也具有这种感情，然后借助于初级的联想方式，用一些出众的暗示性理念来改变它们的观念。 文明的主要动力并不是理性，尽管存在理性，但文明的动力是各种感情，包括荣耀、自我牺牲、宗教信仰、爱国主义以及对荣誉的爱。 第三章 群体领袖及其说服的方法 群体的领袖 只要是一定数量的生物聚集在一起，无论他们是动物或是人类，都会本能地让自己处在一个领袖的威严统治之下。 他对这些观念是如此的痴迷，已经到了除了观念之外的所有事情都消失了的程度。在他看来，任何有悖于这些观念的看法都是错误或迷信。 大众总是愿意听命于意志坚定的人，聚集成群的人会失去所有的意志，本能地转向一个拥有他们所缺乏的品质的人。 在人类所能支配的所有力量当中，信仰的力量往往是最强大的，福音书上说，信仰具备移动山峦的力量。 赋予一个人信仰，就等于让他的力量增加了十倍。 当英雄回到日常的生活中时，就像我刚才讲到的情况一样，他们会暴露出最令人震惊的性格弱点。 昨天受群众拥戴的英雄一旦失败，今天就会受到侮辱。当然名望越高，反应就会越强烈。 在这种情况下，群众就会把末路英雄视为自己的同类，为自己曾向一个已不复存在的权威低头哈腰而进行报复。 领袖的动员手段：断言、重复和传染 作出纯粹简洁的断言，不去考虑任何推理和证据，是让一种观念走进群众头脑最行之有效的办法之一。 一个断言越是简洁，证据和证明看上去就会越发贫乏，它的威力就会越大。 我相信拿破仑曾经说过，只有一个修辞法极为重要，那就是重复。 被断言的事情，是通过持续地重复才在头脑中稳定下来，并且这种方式最后能够让人把它看作得到证实的真理接受下来。 名望 通过使用断言、重复和传染进行普及的观念，在环境的作用下获得了巨大的力量，这时它们就会具有一种无与伦比的神奇威力，即所谓的名望。 无论掌控着这个世界的力量是什么，无论是观念还是人类，都会用一种名为“名望”的无法抗拒的力量来加强它的权力。 名望的特点就是能阻止我们看到的事物的本来面目，完全毁掉我们的评判能力。 为所欲为地迫害人，为了一次次的战略入侵，就让数以百万计的无辜的人丢掉性命——只要你拥有足够的名望和付诸实践的天才，人们就会同意你采用这种做法。 拥有名望的人、观念或物品，会在传染的作用下，立刻被人们有意或无意地模仿，迫使整整一代人接受某些感受或是表达想法的模式。 第四章 群体的信念和意见的变化范围 牢固的信念 群体的意见和信念可以分成区别非常明显的两类。一方面我们有重要且长久的信仰，它们可以数百年保持不变，整个文明或许就是以它为基础建立起来的。 没错，提比略、成吉思汗和拿破仑都是可怕的暴君，可是，埋葬在坟墓深处的摩西、佛祖、耶稣和穆罕默德，对人类采取了更深刻的专制统治。 一个政治阴谋或许会推翻一个暴君，但是同牢靠的信念相抗衡又有什么可以利用的价值吗？ 在同罗马天主教的暴力争斗之中，法国大革命最终屈服了，虽然群体把同情心明显倒向了它这一边，虽然它采用了类似宗教法庭极其残忍的具有破坏力的手段。 人类已知的唯一真正的暴君，历来都是他们对死人的缅怀或他们为自己编造出来的幻想。 群众意见的多变 当一种文明被群体掌控时，它基本上就不会再有多少持续下去的机会了。 如果说还有什么事物能够推迟自身的毁灭的话，那就是极不稳定的群体意见和他们对所有普遍信仰的漠不关心。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:2:2","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"第三卷 不同群体的分类及其特点 随着这种古老理想的丧失，种族的秉性也会彻底消失。它仅仅是一群独立的个人，因而回归到自己原始的状态——即一群乌合之众。 第一章 群体的分类 在本书中所阐述的某些影响的作用之下，这两种不同的人群会转换成有机的或是心理学意义上的群体。 我们把这些有机的群体分为下面的两大类： 异质性群体 a. 无名称的群体（如街头群体） b. 有名称的群体（如陪审团、议会等） 同质性群体 a. 派别（政治派别、宗教派别等） b. 身份团体（军人、僧侣、劳工等） c. 阶级（中产阶级、农民阶级等） 第二章 被称为犯罪群体的群体 犯罪群体的普遍特征与我们所遇到的其他所有的群体特征并无不同：易受怂恿，轻信，易变，把无论是好还是坏的感情加以夸大，展现出某种道德，等等。 第三章 刑事案件的陪审团 陪审团就如同所有的群体一样，也深受名望的影响，德·格拉热先生非常正确地指出，陪审团的人员构成虽然十分民主，他们在对待喜好和厌恶的态度上却会表现出贵族性的特征：​“头衔、出身、腰缠万贯、名望或一位著名律师的帮助，总而言之，所有非比寻常或是可以给被告带来光彩的事情，都能够让被告的处境变得有利。​” 我们应该尽最大努力支持陪审团，因为它是唯一不能被任何个人所替代的群体类型。只有它才能够调和法律的严酷性。 这种对所有人都一视同仁的法律条文，从原则上来讲，绝不会在意或是察觉特殊案例。 法官都是毫无怜悯之心的，他们除了遵照法律条文之外，不会留意任何事情，拥有职业严谨性的法官会对以杀人罪受到指控的强盗，同因为贫困以及受到色诱者的抛弃，被逼无奈杀婴的可怜姑娘，实施同样的刑罚。 从另一个方面来讲，陪审团本能地感觉到被色诱的女孩犯下的罪行要远比色诱者轻得多，她理应得到法律的宽恕。 第四章 选民群体 拥有名望还不足以确保一个候选人取得成功。选民们尤其看重他所表现出来的贪婪和虚荣。 他必须用夸张的甜言蜜语说服选民，要毫不犹豫地向选民们做出最异想天开的承诺。 毫无疑问，普选的弱点十分明显，而不容易被忽视。 不可否认，人类的文明是由少数的拥有超高智力的人创造出来的，他们构成了金字塔的顶点。 随着金字塔各个层次逐渐拉宽，智力水平也会随之持续下降，它们代表着一个民族里的群众。 文明的伟大如果通过依靠鼓吹人数优势的低劣选民的投票，那么它就无法让人们安心。 从哲学的角度来看，群体权力至上的教条就如同中世纪的宗教教条一样毫无辩驳的能力，但是如今它却拥有与往昔教条一样强大的绝对力量。 在人人平等的时代，人们彼此之间不信任，因为他们全都一样，然而这种比喻让他们几乎没有限制地相信公众的评判力，其原因就在于，让所有的人都保持头脑清晰是不可能的，真理并不会与人数上的优势携手并进。​ 第五章 议会 议会群体非常容易受到暗示的影响，而且在所有群体的事例当中，那些暗示都是来自拥有名望的领袖。 领袖极少能够走在大众意见的前面，他所做的一切总是为了顺应大众的意见，因此会助长这些意见当中的所有错误。 在议会当中，一个成功的演讲几乎全部依赖于演说者本人所拥有的名望，而不是取决于演说者提出的论证。 通过历史的教训以及各方面都颇具震慑力的先期征兆判断，我们的一些现代文明已经达到了衰退期之前那些历史上早已有之的阶段。 每一个民族都将不可避免地要经历相同的生存阶段，因为看起来历史会不断地重复它的过程。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:2:3","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"总结 勒庞通过对群体行为的观察和思辨，在《乌合之众：大众心理研究》中指出，大众在心理特征上与个体截然不同，个体在群体中会丧失理性与独立性，被情绪、暗示和集体无意识支配，从而表现出盲目、冲动与非理性的行为。 群体心理的基本特征 个体一旦融入群体，就会发生根本性的心理变化。 个体的理性思维被集体无意识所取代，独立判断能力急剧下降，转而表现出群体特有的心理特征：情绪化、易暗示、极端化、简单化。 群体中的个人如同众多沙粒当中的一颗，可以被大风吹到任何地方，失去了独立思考的能力。 群体行为的双重性 群体表现出野蛮、冲动、破坏性的一面，容易被煽动和操纵，做出违背个人利益和理性的行为； 另一方面，群体也能展现出英雄主义、自我牺牲、崇高道德等品质，甚至超越个体的表现。 这种双重性使得群体既可能成为文明进步的推动力，也可能成为社会动荡的破坏因素。 群体意见的形成与传播机制 从间接因素来看，种族、传统、时间、制度和教育等构成了群体意识的深层基础； 从直接因素来看，形象化的词语、幻觉、经验和情感比理性更能打动群体。 群体领袖通过断言、重复、传染三大手段，利用自身的名望影响群体，实现对群体意见的塑造和引导。 群体的分类与现实表现 无论是犯罪群体、陪审团、选民群体还是议会，都体现出群体心理的共同特征，但在具体表现上又各有特点。 时代意义与现实警示 勒庞写作于19世纪末，正值欧洲民主化进程加速的时代。 他对群体权力至上的质疑和对精英治理的推崇，反映了那个时代知识分子对大众民主的复杂态度。 在信息爆炸、社交媒体发达的时代，勒庞的观察和思辨更显现实意义：网络群体的极化现象、信息茧房效应、网络暴力等，都可以在书中找到解释。 理论价值与局限性 本书的价值在于提供理解群体行为的基本框架，从而揭示群体现象背后的心理机制。 同时，其历史局限性亦应予以重视： 勒庞全书几乎只是在叙述自己的观点，缺乏量化的、系统的研究； 相较于有系统分析论证的著作而言，勒庞更近于观点的提出； 勒庞过分强调了群体的消极面，其精英主义立场也带有明显的时代烙印。 现代心理学研究也表明，群体行为比勒庞描述的更加复杂多样。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:3:0","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"思考 阅读一本书，除了获取信息，更重要的是能够把书中的精华融入到自己的思考与生活中。因而我们需要以审慎的心态对待每一部作品。 《乌合之众：大众心理研究》提醒我们在现实生活中要时刻觉察：自己是否正身处某个群体？群体呈现出怎样的特征？身处其中，我们既要善加利用集体的力量，又需警惕随之而来的盲目与偏执。保持一份清醒与理智，学会独立思考，才能在随波逐流的环境里做到“独善其身”，在融入群体的同时依然坚持“和而不同”。 ","date":"2025-09-11","objectID":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/:4:0","tags":["心理学"],"title":"读书笔记之《乌合之众：大众心理研究》","uri":"/2025/09/notes-from-the-crowd-a-study-of-the-popular-mind/"},{"categories":["读书笔记"],"content":"阅读的四个层次：基础阅读、检视阅读、分析阅读和主题阅读。","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读的四个层次：基础阅读、检视阅读、分析阅读和主题阅读。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:0:0","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"序 《如何阅读一本书：智慧阅读的经典指南》由美国哲学家莫提默·J·艾德勒Mortimer J. Adler于1940年出版，主张通过系统的阅读提升个人的思维与学习能力。 本书提出了阅读的四个层次：基础阅读、检视阅读、分析阅读和主题阅读，并给出了针对不同类型书籍的阅读策略。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:1:0","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:0","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"序言 凭着你自己的心智活动努力阅读，从只有粗浅的了解推进到深入的体会，就像是自我的破茧而出。 我们必须要考虑到两种阅读的目的。因为一种是读得懂的东西，另一种是必须要读的东西，二者之间的界限通常是很模糊的。 在我们可以让这两种阅读目的区分开来的范围内，我们可以将“阅读”这个词，区分成两种不同的意义。 第一种意义是我们自己在阅读报纸、杂志，或其他的东西时，凭我们的阅读技巧与聪明才智，一下子便能融会贯通了。 这样的读物能增加我们的资讯，却不能增进我们的理解力，因为在开始阅读之前，我们的理解力就已经与他们完全相当了。 第二种意义是一个人试着读某样他一开始并不怎么了解的东西。 这个东西的水平就是比阅读的人高上一截。这个作者想要表达的东西，能增进阅读者的理解力。 这种双方水准不齐之下的沟通，肯定是会发生的，否则，无论是透过演讲或书本，谁都永远不可能从别人身上学习到东西了。 这里的“学习”指的是理解更多的事情，而不是记住更多的资讯——和你已经知道的资讯在同一水平的资讯。 总有一些书呆子读得太广，却读不通。希腊人给这种集阅读与愚蠢于一身的人一种特别称呼，这也可运用在任何年纪、好读书却读不懂的人身上。 他们就叫“半瓶醋”(Sophomores)。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:1","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读的四个层次 第一层次的阅读，我们称之为基础阅读(Elementary Reading)。 也可以用其他的名称，如初级阅读、基本阅读或初步阅读。 譬如，我们打开一本书想读的时候，书中写的却是我们不太熟悉的外国文字，这样的问题就发生了。这时我们要做的第一步努力就是去弄清楚这些字。 只有当我们完全明白每个字的意思之后，我们才能试着去了解，努力去体会这些字到底要说的是什么。 第二个层次的阅读我们称之为检视阅读(Inspectional Reading)。 特点在强调时间。 就是在一定的时间之内，抓出一本书的重点——通常是很短，而且总是（就定义上说）过短，很难掌握一本书所有重点。 这个层次的阅读仍然可以用其他的称呼，譬如略读或预读。 在这个层次的阅读上，你的目标是从表面去观察这本书，学习到光是书的表象所教给你的一切。这笔交易通常是很划得来的。 如果第一层次的阅读所问的问题是：“这个句子在说什么？”那么在这个层次要问的典型问题就是：“这本书在谈什么？” 这是个表象的问题。还有些类似的问题是：“这本书的架构如何？”或是：“这本书包含哪些部分？” 用检视阅读读完一本书之后，无论你用了多短的时间，你都该回答得出这样的问题：“这是哪一类的书——小说、历史，还是科学论文？” 第三种层次的阅读，我们称之为分析阅读(Analytical Reading)。 比起前面所说的两种阅读，这要更复杂，更系统化。 随内文难读的程度有所不同，读者在使用这种阅读法的时候，多少会相当吃力。 分析阅读就是全盘的阅读、完整的阅读，或是说优质的阅读——你能做到的最好的阅读方式。 如果说检视阅读是在有限的时间内，最好也最完整的阅读，那么分析阅读就是在无限的时间里，最好也最完整的阅读。 分析阅读永远是一种专注的活动。在这个层次的阅读中，读者会紧抓住一本书——这个比喻蛮恰当的——一直要读到这本书成为他自己为止。 弗兰西斯·培根曾经说过：“有些书可以浅尝即止，有些书是要生吞活剥，只有少数的书是要咀嚼与消化的。” 分析阅读就是要咀嚼与消化一本书。如果你的目标只是获得资讯或消遣，就完全没有必要用到分析阅读。分析阅读就是特别在追寻理解的。 第四种，也是最高层次的阅读，我们称之为主题阅读(Syntopical Reading)。 这是所有阅读中最复杂也最系统化的阅读。也可以用另外的名称来形容这样的阅读，如比较阅读(Comparative Reading)。 在做主题阅读时，阅读者会读很多书，而不是一本书，并列举出这些书之间相关之处，提出一个所有的书都谈到的主题。 但只是书本字里行间的比较还不够。主题阅读涉及的远不止此。借助他所阅读的书籍，主题阅读者要能够架构出一个可能在哪一本书里都没提过的主题分析。 因此，很显然的，主题阅读是最主动、也最花力气的一种阅读。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:2","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读的第二个层次：检视阅读 检视阅读一：有系统的略读或粗读 让我们再假设在这情况中还有两个相当常见的因素。 第一，你并不知道自己想不想读这本书。你也不知道这本书是否值得做分析阅读。 但你觉得，或只要你能挖掘出来，书中的资讯及观点就起码会对你有用处。 其次，让我们假设——常会有这样的状况——你想要发掘所有的东西，但时间却很有限。 在这样的情况下，你一定要做的就是“略读”(Skim)整本书，或是有人说成是粗读(Pre-read)一样。 略读或粗读是检视阅读的第一个子层次。 你脑中的目标是要发现这本书值不值得多花时间仔细阅读。 其次，就算你决定了不再多花时间仔细阅读这本书，略读也能告诉你许多跟这本书有关的事。 用这种快速浏览的方式来阅读一本书，就像是一个打谷的过程，能帮助你从糙糠中过滤出真正营养的谷核。 当你浏览过后，你可能会发现这本书仅只是对你目前有用而已。这本书的价值不过如此而已。 但至少你知道作者重要的主张是什么了，或是他到底写的是怎样的一本书。 因此，你花在略读这本书上的时间绝没有浪费。 略读的习惯应该用不着花太多时间。 下面是要如何去做的一些建议： 先看书名页，然后如果有序就先看序。 要很快地看过去。特别注意副标题，或其他的相关说明或宗旨，或是作者写作本书的特殊角度。 在完成这个步骤之前，你对这本书的主题已经有概念了。 研究目录页，对这本书的基本架构做概括性的理解。 这就像是在出发旅行之前，要先看一下地图一样。 如果书中附有索引，也要检阅一下——大多数论说类的书籍都会有索引。 快速评估一下这本书涵盖了哪些议题的范围，以及所提到的书籍种类与作者等等。 如果你发现列举出来的哪一条词汇很重要，至少要看一下引用到这个词目的某几页内文。 你所阅读的段落很可能就是个要点——这本书的关键点——或是关系到作者意图与态度的新方法。 如果那是本包着书衣的新书，不妨读一下出版者的介绍。 许多书的宣传文案都是作者在出版公司企宣部门的协助下亲自写就的。 这些作者尽力将书中的主旨正确地摘要出来，已经不是稀奇的事了。这些努力不应该被忽视。 当然，如果宣传文案什么重点也没写到，只是在瞎吹牛，你也可以很容易看穿。 不过，这也有助于你对这本书多一点了解，或许这本书根本没什么重要的东西可谈——而这也正是他们宣传文案一无可取的原因。 完成这四个步骤，你对一本书已经有足够的资讯，让你判断是想要更仔细地读这本书，还是根本不想读下去了。 从你对一本书的目录很概略，甚至有点模糊的印象当中，开始挑几个看来跟主题息息相关的篇章来看。 如果这些篇章在开头或结尾有摘要说明（很多会有），就要仔细地阅读这些说明。 最后一步，把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多。 就用这样的方法把全书翻过一遍，随时寻找主要论点的讯号，留意主题的基本脉动。 最重要的是，不要忽略最后的两三页。就算最后有后记，一本书最后结尾的两三页也还是不可忽视的。 很少有作者能拒绝这样的诱惑，而不在结尾几页将自己认为既新又重要的观点重新整理一遍的。 虽然有时候作者自己的看法不一定正确，但你不应该错过这个部分。 现在你已经很有系统地略读过一本书了。你已经完成了第一种形态的检视阅读。 现在，在花了几分钟，最多不过一小时的时间里，你对这本书已经了解很多了。 尤其，你应该了解这本书是否包含你还想继续挖掘下去的内容，是否值得你再继续投下时间与注意？ 你也应该比以前更清楚，在脑海中这本书该归类为哪一个种类，以便将来有需要时好作参考。 附带一提的是，这是一种非常主动的阅读。一个人如果不够灵活，不能够集中精神来阅读，就没法进行检视阅读。 有多少次你在看一本好书的时候，翻了好几页，脑海却陷入了白日梦的状态中，等清醒过来，竟完全不明白自己刚看的那几页在说些什么？ 如果你跟随着我们提议的步骤来做，就绝不会发生这样的事——因为你始终有一个可以依循作者思路的系统了。 你可以把自己想成是一个侦探，在找寻一本书的主题或思想的线索。随时保持敏感，就很容易让一切状况清楚。 留意我们所提出的建议，会帮助你保持这样的态度。 你会很惊讶地发现自己节省了更多时间，高兴自己掌握了更多重点，然后轻松地发现原来阅读是比想象中还更要简单的一件事。 检视阅读二：粗浅的阅读 这一节的标题是故意要挑衅的。“粗浅”这两个字通常有负面的联想。但我们可是很认真在用这两个字。 我们每个人都有这样的经验：对一本难读的书抱着高度的期望，以为它能启发我们，结果却只是在徒劳无益地挣扎而已。 很自然的，我们会下个结论：一开始想读这本书就是个错误。但这并不是错误，而只是打从开始就对阅读一本难读的书期望过高。 只要找到对的方向，不论是多难读的书，只要原来就是想写给大众读者看的，那就不该有望之却步的理由。 什么叫对的方向？答案是一个很重要又有帮助的阅读规则，但却经常被忽略。 这个规则很简单：头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索。 只注意你能理解的部分，不要为一些没法立即了解的东西而停顿。继续读下去，略过那些不懂的部分，很快你会读到你看得懂的地方。 集中精神在这个部分。继续这样读下去。将全书读完，不要被一个看不懂的章节、注解、评论或参考资料阻挠或泄气。 如果你让自己被困住了，如果你容许自己被某个顽固的段落绑住了，你就是被打败了。在大多数情况里，你一旦和它纠缠，就很难脱困而出。 在读第二遍的时候，你对那个地方的了解可能会多一些，但是在那之前，你必须至少将这本书先从头到尾读一遍才行。 你从头到尾读了一遍之后的了解——就算只有50%或更少——能帮助你在后来重读第一次略过的部分时，增进理解。 就算你不重读，对一本难度很高的书了解了一半，也比什么都不了解来得要好些——如果你让自己在一碰上困难的地方就停住，最后就可能对这本书真的一无所知了。 我们大多数人所受的教育，都说是要去注意那些我们不懂的地方。 我们被教导说，碰到生字，就去查字典。 我们被教导说，读到一些不明白的隐喻或论说，就去查百科全书或其他相关资料。 我们被教导说，要去查注脚、学者的注释或其他的二手资料以获得帮助。 但是如果时候不到就做这些事，却只会妨碍我们的阅读，而非帮助。 许多书其实是连略读都不值得的，另外一些书只需要快速读过就行了。有少数的书需要用某种速度，通常是相当慢的速度，才能完全理解。 每一本书，不论是多么难读的书，在无关紧要的间隙部分就可以读快一点。而一本好书，总会包含一些比较困难，应该慢慢阅读的内容。 我们的头脑是个惊人的工具，可以在“一瞥”之间掌握住一个句子或段落——只要眼睛能提供足够的资讯。 任何复杂的工具其实都比不上你的一双手来得有用，你可以利用双手训练自己的眼睛，跟着章节段落移动得越来越快。 你可以自己做这样的训练：将大拇指与食指、中指合并在一起，用这个“指针”顺着一行一行的字移动下去，速度要比你眼睛感觉的还要快一点。 强迫自己的眼睛跟着手部的动作移动。一旦你的眼睛能跟着手移动时，你就能读到那些字句了。 继续练习下去，继续增快手的动作，等到你发觉以前，你的速度已经可以比以前快两三倍了。 我们的手（或其他工具）就像是个计时器，不只负责增进你的阅读速度，也能帮助你专注于你所阅读的东西上。 一旦你能跟随自己的手指时，就很难打瞌睡或做白日梦，胡思乱想。 在阅读一本书的时候，慢不该慢到不值得，快不该快到有损于满足与理解。 略读或粗读一本书总是个好主意。尤其当你并不清楚手边的一本书是否值得细心阅读时（经常发生这种情况）​，必须先略读一下。 略读过后，你就会很清楚了。一般来说，就算你想要仔细阅读的书也要先略读一下，从基本架构上先找到一些想法。 在第一次阅读一本难读的书时，不要企图了解每一个字句。这是最最重要的一个规则。这也是检视阅读的基本概念。 不要害怕，或是担忧自己似乎读得很肤浅。就算是最难读的书也快快地读一遍。当你再读第二次时，你就已经准备好要读这本书了。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:3","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"如何做一个自我要求的读者 爬上床，找个舒适的位置，让灯光有点昏暗，刚好能让你的眼睛觉得有点疲劳，然后选一本非常困难或极端无聊的书——可以是任何一个主题，是一本可读可不读的书——这样几分钟之后，你就会昏昏入睡了。 关于一本书，你一定要提出四个主要的问题。 整体来说，这本书到底在谈些什么？ 你一定要想办法找出这本书的主题，作者如何依次发展这个主题，如何逐步从核心主题分解出从属的关键议题来。 作者细部说了什么，怎么说的？ 你一定要想办法找出主要的想法、声明与论点。这些组合成作者想要传达的特殊讯息。 这本书说得有道理吗？是全部有道理，还是部分有道理？除非你能回答前两个问题，否则你没法回答这个问题。 在你判断这本书是否有道理之前，你必须先了解整本书在说些什么才行。 然而，等你了解了一本书，如果你又读得很认真的话，你会觉得有责任为这本书做个自己的判断。光是知道作者的想法是不够的。 这本书跟你有什么关系？如果这本书给了你一些资讯，你一定要问问这些资讯有什么意义。 为什么这位作者会认为知道这件事很重要？你真的有必要去了解吗？ 如果这本书不只提供了资讯，还启发了你，就更有必要找出其他相关的、更深的含意或建议，以获得更多的启示。 做笔记有各式各样，多彩多姿的方法。以下是几个可以采用的方法： 画底线——在主要的重点，或重要又有力量的句子下画线。 在画底线处的栏外再加画一道线——把你已经画线的部分再强调一遍，或是某一段很重要，但要画底线太长了，便在这一整段外加上一个记号。 在空白处做星号或其他符号——要慎用，只用来强调书中十来个最重要的声明或段落即可。 你可能想要将做过这样记号的地方每页折一个角，或是夹一张书签。这样你随时从书架上拿起这本书，打开你做记号的地方，就能唤醒你的记忆。 在空白处编号——作者的某个论点发展出一连串的重要陈述时，可以做顺序编号。 在空白处记下其他的页码——强调作者在书中其他部分也有过同样的论点，或相关的要点，或是与此处观点不同的地方。 这样做能让散布全书的想法统一集中起来。许多读者会用Cf这样的记号，表示比较或参照的意思。 将关键字或句子圈出来——这跟画底线是同样的功能。 在书页的空白处做笔记——在阅读某一章节时，你可能会有些问题（或答案）​，在空白处记下来，这样可以帮你回想起你的问题或答案。 你也可以将复杂的论点简化说明在书页的空白处。或是记下全书所有主要论点的发展顺序。 书中最后一页可以用来作为个人的索引页，将作者的主要观点依序记下来。 你读完一本书，在最后的空白页写下个人的索引后，再翻回前面的空白页，试着将全书的大纲写出来，用不着一页一页或一个重点一个重点地写（你已经在书后的空白页做过这件事了）​，试着将全书的整体架构写出来，列出基本的大纲与前后篇章秩序。 这个大纲是在测量你是否了解了全书，这跟藏书印章不同，却能表现出你在智力上对这本书的所有权。 在你养成习惯的前后，最大的差异就在于阅读能力与速度的不同。经过练习后，同一件事，你会做得比刚开始时要好很多。 这也就是俗话说的熟能生巧。一开始你做不好的事，慢慢就会得心应手，像是自然天生一样。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:4","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读的第三个层次：分析阅读 分析阅读的第一阶段：找出一本书在谈些什么的规则 依照书的种类与主题来分类。 使用最简短的文字说明整本书在谈些什么。 将主要部分按顺序与关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。 确定作者想要解决的问题。 分析阅读的第二阶段：诠释一本书的内容规则 诠释作者的关键字，与他达成共识。 由最重要的句子中，抓住作者的重要主旨。 知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。 确定作者已经解决了哪些问题，还有哪些是没解决的。再判断哪些是作者知道他没解决的问题。 分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则 A. 智慧礼节的一般规则 除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。（在你说出：“我读懂了!”之前，不要说你同意、不同意或暂缓评论。） 不要争强好胜，非辩到底不可。 在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。 B. 批评观点的特别标准 证明作者的知识不足。 证明作者的知识错误。 证明作者不合逻辑。 证明作者的分析与理由是不完整的。 注意：关于最后这四点，前三点是表示不同意见的准则，如果你无法提出相关的佐证，就必须同意作者的说法，或至少一部分说法。你只能因为最后一点理由，对这本书暂缓评论。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:5","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读不同读物的方法 如何阅读想象文学 不要用适用于传递知识的，与真理一致的标准来批评小说。 对一个好故事来说，所谓“真理”就是一种写实，一种内在可能性，或与真实的神似。那一定要像个故事，但用不着像在做研究或实验一样来形容生活的事实或社会的真相。 如何阅读历史书 如果非要分类不可的话，我们应该把历史，也就是过去的故事——归类为小说，而非科学——就算不分类，如果能让历史停格在这两类书之中的话，那么通常我们会承认，历史比较接近小说，而非科学。 这并不是说历史学家在捏造事实，就像诗人或小说家那样。不过，太强调这些作家都是在编造事实，也可能自我麻烦。 我们说过，他们在创造一个世界。这个新世界与我们所居住的世界并非截然不同——事实上，最好不是——而一个诗人也是人，透过人的感官进行自己的学习。 他看事情跟我们没什么两样（虽然角度可能比较美好或有点不同）。他的角色所用的语言也跟我们相同（否则我们没法相信他们）。 只有在梦中，人们才会创造真正不同的全新世界——但是就算在最荒谬的梦境中，这些想象的事件与生物也都是来自每天的生活经验，只是用一种奇异而崭新的方法重新组合起来而已。 如果你想知道一个人的一生，你就该尽可能去阅读你能找到的资料，包括他对自己一生的描述（如果他写过）。 阅读传记就像阅读历史，也像阅读历史的原因。对于任何自传都要有一点怀疑心，同时别忘了，在你还不了解一本书之前，不要妄下论断。 至于“这本书与我何干？”这个问题，我们只能说：传记，就跟历史一样，可能会导引出某个实际的、良心的行动。 传记是有启发性的。那是生命的故事，通常是成功者一生的故事——也可以当作我们生活的指引。 如何阅读科学与数学 为了了解科学中归纳法的论点，你就必须了解科学家引以为理论基础的证据。不幸的是，那是很难做到的事。除了手中那本书之外，你仍然一无所知。 如果这本书不能启发一个人时，读者只有一个解决办法，就是自己亲身体验以获得必要的特殊经验。 他可能要亲眼看到实验的过程，或是去观察与操作书中所提到的相同的实验仪器。他也可能要去博物馆观察标本与模型。 如何阅读社会科学 许多读者担心，如果承认自己与作者意见不合，而且客观地质疑自己阅读的作品，是一种对自己投入不忠的行为。 但是，只要你是用分析阅读来阅读，这样的态度是必要的。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:6","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读的第四个层次：主题阅读 在主题阅读中有两个阶段。一个是准备阶段，另一个是主题阅读本身。 让我们复习一下这些不同的步骤： 一、观察研究范围：主题阅读的准备阶段 针对你要研究的主题，设计一份试验性的书目。你可以参考图书馆目录、专家的建议与书中的书目索引。 浏览这份书目上所有的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念。 二、主题阅读：阅读所有第一阶段收集到的书籍 浏览所有在第一阶段被认定与你主题相关的书，找出最相关的章节。 根据主题创造出一套中立的词汇，带引作者与你达成共识——无论作者是否实际用到这些词汇，所有的作者，或至少绝大部分的作者都可以用这套词汇来诠释。 建立一个中立的主旨，列出一连串的问题——无论作者是否明白谈过这些问题，所有的作者，或者至少大多数的作者都要能解读为针对这些问题提供了他们的回答。 界定主要及次要的议题。然后将作者针对各个问题的不同意见整理陈列在各个议题之旁。 你要记住，各个作者之间或之中，不见得一定存在着某个议题。有时候，你需要针对一些不是作者主要关心范围的事情，把他的观点解读，才能建构出这种议题。 分析这些讨论。 这得把问题和议题按顺序排列，以求突显主题。比较有共通性的议题，要放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来。 注意：理想上，要一直保持对话式的疏离与客观。要做到这一点，每当你要解读某个作家对一个议题的观点时，必须从他自己的文章中引一段话来并列。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:7","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"阅读与心智的成长 如果你的阅读目的是想变成一个更好的阅读者，你就不能摸到任何书或文章都读。 如果你所读的书都在你的能力范围之内，你就没法提升自己的阅读能力。 你必须能操纵超越你能力的书，或像我们所说的，阅读超越你头脑的书。 只有那样的书能帮助你的思想增长。除非你能增长心智，否则你学不到东西。 因此，对你来说最重要的是，你不只要能读得好，还要有能力分辨出哪些书能帮助你增进阅读能力。 一本消遣或娱乐性的书可能会给你带来一时的欢愉，但是除了享乐之外，你也不可能再期待其他的收获了。 我们并不是反对娱乐性的作品，我们要强调的是这类书无法让你增进阅读的技巧。 只是报导一些你不知道的事实，却没法让你增进对这些事实的理解的书，也是同样的道理。 为了讯息而阅读，就跟为了娱乐阅读一样，没法帮助你心智的成长。 也许看起来你会以为是有所成长，但那只是因为你脑袋里多了一些你没读这本书之前所没有的讯息而已。 然而，你的心智基本上跟过去没什么两样，只是阅读数量改变了，技巧却毫无进步。 你怎么知道不用再读那本书了呢？ 因为你在阅读时，你的心智反应已经与书中的经验合而为一了。 这样的书会增长你的心智，增进你的理解力。就在你的心智成长，理解力增加之后，你了解到——这是多少有点神秘的经验——这本书对你以后的心智成长不会再有帮助了。 你知道你已经掌握这本书的精髓了。你将精华完全吸收了。你很感激这本书对你的贡献，但你知道它能付出的仅止于此了。 如果这本书是属于更高层次的书——只占浩瀚书海一小部分的书——你在重读时会发现这本书好像与你一起成长了。 你会在其中看到新的事物——一套套全新的事物——那是你以前没看到的东西。 你以前对这本书的理解并不是没有价值（假设你第一次就读得很仔细了），真理还是真理，只是过去是某一种面貌，现在却呈现出不同的面貌。 一本书怎么会跟你一起成长呢？当然这是不可能的。一本书只要写完出版了，就不会改变了。 只是你到这时才会开始明白，你最初阅读这本书的时候，这本书的层次就远超过你，现在你重读时仍然超过你，未来很可能也一直超过你。 因为这是一本真正的好书——我们可说是伟大的书——所以可以适应不同层次的需要。 你先前读过的时候感到心智上的成长，并不是虚假的。那本书的确提升了你。 但是现在，就算你已经变得更有智慧也更有知识，这样的书还是能提升你，而且直到你生命的尽头。 人类的心智有很奇怪的一点，主要是这一点划分了我们心智与身体的截然不同。我们的身体是有限制的，心智却没有限制。 其中一个迹象是，在力量与技巧上，身体不能无限制地成长。人们到了30岁左右，身体状况就达到了巅峰，随着时间的变化，身体的状况只有越来越恶化，而我们的头脑却能无限地成长与发展下去。 我们的心智不会因为到了某个年纪死就停止成长，只有当大脑失去活力，僵化了，才会失去了增加技巧与理解力的力量。 这是人类最明显的特质，也是万物之灵与其他动物最主要不同之处。 其他的动物似乎发展到某个层次之后，便不再有心智上的发展。但是人类独有的特质，却也潜藏着巨大的危险。 心智就跟肌肉一样，如果不常运用就会萎缩。心智的萎缩就是在惩罚我们不经常动脑。 这是个可怕的惩罚，因为证据显示，心智萎缩也可能要人的命。 除此之外，似乎也没法说明为什么许多工作忙碌的人一旦退休之后就会立刻死亡。 他们活着是因为工作对他们的心智上有所要求，那是一种人为的支撑力量，也就是外界的力量。 一旦外界要求的力量消失之后，他们又没有内在的心智活动，他们便停止了思考，死亡也跟着来了。 电视、收音机及其他天天围绕在我们身边的娱乐或资讯，也都是些人为的支撑物。 它们会让我们觉得自己在动脑，因为我们要对外界的刺激作出反应。 但是这些外界刺激我们的力量毕竟是有限的。 像药品一样，一旦习惯了之后，需要的量就会越来越大。 到最后，这些力量就只剩下一点点，甚或毫无作用了。 这时，如果我们没有内在的生命力量，我们的智力、品德与心灵就会停止成长。 当我们停止成长时，也就迈向了死亡。 好的阅读，也就是主动的阅读，不只是对阅读本身有用，也不只是对我们的工作或事业有帮助，更能帮助我们的心智保持活力与成长。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:2:8","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"总结 本书涵盖的其实是个极大的议题，从基础阅读到主题阅读的跨度，相当于从中学生到研究生的区别，主题阅读其实已经超越了“阅读一本书”的议题，实际上属于研究方法而非阅读方法的范畴，核心已经不在阅读层面。文章表达也比较冗长啰嗦，因此个人认为这本书并不值得花时间细读原文，查阅文摘和总结好的思维导图即可。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:3:0","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"思考 《如何阅读一本书：智慧阅读的经典指南》提出的阅读的四个层次：基础阅读、检视阅读、分析阅读和主题阅读，确实具有指导意义。检视阅读可以快速判断一本书是否值得深入阅读，避免在价值不高的书籍上浪费时间，分析阅读可以更深入地理解和消化重要书籍的核心观点。 我将通过这些方法提升阅读效率，在有限的时间里获取更多有价值的知识，并以此为契机逐渐养成持续阅读的习惯，不断拓展知识边界，丰富自身认知。 ","date":"2025-09-10","objectID":"/2025/09/notes-from-how-to-read-a-book/:4:0","tags":["方法论"],"title":"读书笔记之《如何阅读一本书：智慧阅读的经典指南》","uri":"/2025/09/notes-from-how-to-read-a-book/"},{"categories":["读书笔记"],"content":"精益创业强调快速把构想落地成简化版本，用真实用户进行测试，从结果中学习，并迅速改进，从而减少时间和资源的浪费。","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"精益创业强调快速把构想落地成简化版本，用真实用户进行测试，从结果中学习，并迅速改进，从而减少时间和资源的浪费。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:0:0","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"序 《精益创业：新创企业的成长思维》的作者 埃里克·莱斯Eric Ries 是 IMVU 3D化身虚拟社交平台的联合创始人及首席技术官，曾担任哈佛商学院 驻校企业家Entrepreneur-in-Residence，为多家初创企业、大型公司及风险投资机构提供商业与产品战略方面的咨询服务。 书中将创业过程提炼为一个持续的反馈循环：想法—开发—测量—认知—新的想法。其方法论强调，以最小投入将创意转化为具备核心价值的产品原型，通过极简功能快速进入市场，获取真实用户反馈。在不断的循环中，创业者应根据数据结果迅速调整方向、优化产品、挖掘需求，从而实现迭代式成长。书中指出，新创企业必须在有限资金消耗之前，以最低成本和最短时间找到真正有价值的商业认知，从而提高成功的可能性。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:1:0","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:0","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"推荐语 魔力与天才并非成功创业所必需，运用可学习和可复制的科学的创业程序才是最重要的。 创业管理往往不是特别正式，因此更像是一门艺术，本书帮助创业者将结构性方法和科学运用到创业公司的管理中，以减少产品的失败。 它提供了避免产品认知失败的行之有效的办法，通过经证实的认知严密评估来自市场的早期信息，以此决定坚持下去抑或调整方向，评估增加企业失败风险的各种挑战。 这种方法为公司提高创新的速度和效率提供了新颖有力的工具——最小化可行产品、经证实的认知、创新核算以及可执行指标。 这些工具将帮助各种规模的组织有效地利用时间、激情、技术以及人才保持创新。 商业不能完全依靠运气。 谷歌以及丰田公司都将本书作为创新业务的发展指南，而Fackbook的所有业务都以本书为指导。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:1","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"序 我们身处的商业时代有两大主题：互联网化和全球化。这个时代有几个新的特点： 从市场结构来看，产品供给方的数量和质量远远超过了古典的商业时代，大多数市场是典型的买方市场，竞争激烈，企业唯有更好地满足客户需求才能生存； 从消费趋势来看，用户的需求日趋多元化，满足他们需求的难度正在不断提高； 从技术发展来看，以互联网、移动互联网为代表的信息技术，可以帮助企业深入理解大多数客户和消费者，按需驱动，使产品快速灵活地适应市场，同时去除无谓的损耗，企业效益得以最大化。 埃里克的《精益创业》作了一个优秀的提炼：目标顾客—小范围实验—反馈修改—产品迭代—获得核心认知—高速增长。 显然，过去软件业那种项目严格保密、花多年时间打造、一出来让世界惊讶的创业模式已经过时。 因为市场的变化太快，经验再丰富的产品经理也不可能在立项时就把所有事情都想透彻，不犯错误，甚至不犯大错误是不可能的。 创业的第一阶段是把想法变成产品。 这时开发的产品是精简的原型，投入最少的金钱和精力开发出体现核心价值的产品。 此时创业者们率领精干的成员，用类似特种部队的组织方式，在有限的资源和时间窗口内用很短的时间做出产品，并快速投入市场，通过不断的小规模实验，获得顾客反馈，进而不断迭代，让产品得到市场验证。 创业的第二阶段，新创企业要对正确的产品形态进行重点投入，做好做细，做“最了解用户的人”，做到极致。 这个阶段，必须用最小的成本、在最短时间里找到最有价值的认知。 创业的第三阶段，成功者往往伴随着爆发式的增长，全面的扩张。企业开始与传统的、陈旧的市场势力展开阵地战。 这一过程中，创业企业的力量之源正来自此前积累的对用户的深入理解和对市场的快速反应，即“爱与速度”。 能到达第三个阶段的创业企业，大都把“对用户有爱、对产品有爱”作为一种信仰。他们不能容忍产品有缺点，不能容忍产品的用户体验不好，不能容忍BUG，跟0.1秒的延迟较劲，跟0.1M的大小较真…… ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:2","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"引言 杂志上的故事都是谎言，成功并没有伴随着埋头苦干和坚持不懈接踵而至。 残酷的现实是：大多数创业以失败告终；大多数新产品并不成功；大多数新企业无法支撑到大展身手的那一天。 大多数人都会遭遇到的失败一旦发生，借口也是现成的：我们的产品不够好，我们不够有远见，或是没能得天时地利。 身为一个创业者十年有余，我不再做上述之想。我从自己的成败以及他人的经验中认识到，正是那些乏味的琐事和细节才至关重要。新创企业的成功不在于优良的基因，或生逢其时其地。它可以因为遵循了正确的流程而获得，也就是说，成功是可以习得的，是可以传授的。 在职业生涯的那一刻，我和我的创业搭档们决心要犯“新的错误”。 我们所做的每件事都是“错的”：原本应该花几年时间来完善技术，我们却在早期就开发了一个最小化的可行产品，它糟糕透顶、漏洞百出，并且存在稳定性问题，随时会让电脑系统崩溃。 在远未作好准备之前，我们就把它推向受众。而且，它还是收费的。抓住了最初一批顾客后，我们不断修改产品，每天推出十几个新版本，这已远远高于传统标准。 在早期，我们确实是有一些顾客的。他们是真正有远见的使用者。我们常常和他们交流，听取反馈意见。 但实际上，我们并没有按他们的建议去做，仅把这些提议视为我们的产品和整体愿景的信息来源之一。 事实上更应该说，我们是在顾客那里进行实验，而不是迎合他们的奇思怪想。 传统的商业观念认为这种方式是行不通的，但实际上却是可行的，你也可以不用相信我的话。 你会在本书中看到，在IMVU公司开创的这种方式，已经为全球创业企业家的新动向奠定了基础。 它建立在过去很多管理和产品开发的理念之上，包括精益制造、设计思维、客户开发和敏捷开发。 它代表了一种不断形成创新的新方法，称为“精益创业”（the Lean Startup）。 它的特征表现在循环周期极快、关注顾客需求（而非问他们想要什么），以及作出决定的科学方法。 在我的整个职业生涯中，拼命开发产品却最终在市场中惨败的经历屡屡出现。 一开始，基于我的工作背景，我认为这些技术问题需要应用技术方案加以解决：比如完善的架构，更优的引擎处理程序，更佳的软件工程规范，更专注、更好的产品架构。这些貌似有用的法子却招致更多失利。 我学习了起源于日本丰田生产系统的精益生产理论，这是一个针对实体产品制造的崭新思维方式。我发现，把精益生产的想法加以小小的变化和改动，运用到我自己的创业挑战中，这样整个理论框架就开始有了意义。 这一思考逐渐转化形成了“精益创业”​，即把精益思维运用到创新的过程中去。 精益创业的五项原则组成了本书的三大部分。这五项原则如下： 创业者无处不在。 你不一定非要在车库里折腾才算是创业。在我定义的创业企业中工作的任何人，都算得上是创业者。 所谓的新创企业就是在充满不确定性的情况下，以开发新产品和新服务为目的而设立的个人机构。 这意味着创业者无处不在，而且精益创业的方法可以运用到各行各业，在任何规模的公司，甚至是庞大的企业中。 创业即管理。 新创企业不仅代表了一种产品（的问世），更是一种机构制度，所以它需要某种新的管理方式，特别是要能应对极端不稳定的情况。 事实上，我相信“创业企业家”应该是一个在所有现代企业中使用的头衔，因为企业未来的增长需要依靠创新。 经证实的认知。 新创企业的存在不仅仅是为了制造产品、赚取金钱、服务顾客，它们的存在更是为了学习了解如何建立一种可持续的业务。 创业者们可以通过频繁的实验检测其愿景的各个方面，这种认知是可以得到验证的。 开发—测量—认知。 新创企业的基本活动是把点子转化为产品，衡量顾客的反馈，然后认识到是应该改弦更张还是坚守不移。 所有成功的新创企业的流程步骤都应该以加速这个反馈循环为宗旨。 创新核算。 为了提高创业成果，并让创新者们负起相应责任，我们需要关注那些乏味的细枝末节：如何衡量进度，如何确定阶段性目标，以及如何优先分配工作。 这需要为新创企业设计一套新的核算制度，让每个人都肩负职责。 为什么新创企业以惨败告终的情况比比皆是？ 第一个原因在于好的计划、可靠的战略和深入的市场分析造成的诱惑。 在早期，这些都是衡量成功可能性的指标。把它们也套入创业企业中去的想法令人难以抗拒，但是此路不通。 因为新企业的运营当中包含了太多不确定性。企业还不知道谁是自己的顾客，自身的产品应该是什么。 当情形变得更加难以捉摸之时，未来越发扑朔迷离。老的管理方式无法胜任这项工作。计划和预测只能基于长期的、稳定的运营历史和相对静止的环境，而这些条件是新创企业所不具备的。 第二个原因在于，当目睹运用传统管理方式无法摆脱困境后，一些创业者和投资人干脆就撒手不管，回到“想做就做”跟着感觉走的状态。 人们相信，如果实施管理反而有问题的话，无为之治就是解决之道。不幸的是，我的亲身经历证明了这也行不通。 新创企业的那种颠覆性、创造性和混乱的状况是可以加以管理的，或者确切地说，必须加以管理。 这种说法看似有违直觉。多数人认为流程和管理枯燥无味，而创业则充满活力和激情。 但是真正令人激动的是看到企业获得成功，改变世界。人们为这些新企业付出的热情、精力和抱负都是珍贵的资源，不容随便浪费。我们可以，而且必须做得更好。 本书分成三篇：“愿景”、“驾驭”和“加速”。 “愿景”篇把创新管理作为一门新的学科。 我说明了谁是创业企业家，定义了新创企业，阐述了一种让新创企业评估其进展的新方法，称为“经证实的认知”（Validated Learning）。 为了获得这种认知，我们会看到，不管是从车库起家还是诞生于某个企业内部的新企业，都可以运用科学的实验方法，发现和了解如何建立一项可持续的业务。 “驾驭”篇深入研究了精益创业方法的细节，通过核心的“开发—测量—认知”（Build-Measure-Learn）反馈循环，揭示重要的转折。 你会了解从一个极需严格检测的大胆假设开始，到如何开发最小化可行产品来验证这些假设，如何建立一个新的核算体系，评估是否取得进步，以及决定是要转型（在既定基础上改变路线）还是要继续坚持。 在“加速”篇中，我们会探讨通过“开发—测量—认知”反馈循环，令新创企业尽量加速的技巧，即便企业规模扩大了也同样如此。 我们将探讨适用于新创企业的精益生产概念，比如小批量的好处。我们还将讨论组织架构设计、产品如何成长，以及如何把精益创业原则从众所周知的车库创业帮，拓展延伸到全球最大的企业之中。 我们面临这样的挑战：善用所获得的机遇，干一番大事。精益创业运动旨在确保我们这些渴望一展宏图的人，拥有适用的工具来改变世界。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:3","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第一章 开端 创业者对于在企业成立伊始就采用传统管理实践非常抗拒，他们害怕这会引发官僚主义，或扼杀创造力。 精益创业是研究创新产品开发的一种新方式，强调要同时兼具快速循环运作和对顾客的认知、远大的理想，以及壮志雄心。 我工作过的一家公司，曾经可悲地错误预测使用新产品的客户数会达到百万量级。公司举办了一场热热闹闹的产品发布会，顺利执行了原定计划。 但顾客并没有如期涌来。更糟糕的是，公司已经在大规模的基础设施、人员雇佣，以及处理预期中大量顾客所需的后备支援方面投入了巨资。 顾客没有蜂拥而至，但公司已经全部投入，以致无法及时应变。由于公司成功地、全心全意地、严格地执行了一个最后发现是漏洞百出的计划，最终以“完败”收场。 相反，精益创业的方式是教你如何驾驭一家新创企业。 你需要的不是基于众多假设制订复杂的计划，而是可以通过转动方向盘进行不断调整，我们把这个过程称为“开发—测量—认知”的反馈循环。 通过这样一个驾驭过程，我们可以知道何时以及是否到了急转弯时刻，我把这个时刻称为“转型”时刻。 或者，我们是否应该“坚持”走在当前的道路上。一旦引擎加快转速，精益创业提供了以最大加速度扩充和发展业务的方法。 在这个驾驶过程中，你总是清楚知道目的地所在。如果你要去上班，就不会因为临时改道或转错了方向而放弃。你还是会专心致志地驶向你要到达的地点。 产品在优化的过程中不断改变。我称其为“调整引擎”​（tuning the engine）​。有时候，可能需要改变战略（称为“转型”​）​。但是，总的愿景却很少变化。 很多事件会同时发生： 引擎正在运转，吸纳新顾客并服务已有顾客； 我们正在调整，试着改善产品、市场营销和运营方式； 我们在驾驶过程中，决定是否及何时转型。 创业者的挑战在于平衡所有这些活动。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:4","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第二章 定义 创业者的“必要条件”——合适的团队架构、优秀的员工、对未来强烈的愿景，以及甘冒风险的勇气。 新创企业是一个由人组成的机构，在极端不确定的情况下，开发新产品或新服务。 任何一个在极度不确定情况下开发新产品或新业务的人，都是创业企业家。 成功的新创企业内却充斥着与建立机构相关的各类活动：雇用有创造力的员工、协调他们之间的工作，建立以结果为本的企业文化。 新创企业并不仅仅代表一种产品、一种技术突破或一个天才的设想，新创企业的意义比以上所有的总和还要多，它实质上是一个充满人类活动的企业。 新创企业注定了要在不确定的状态下打拼。 我解释了精益创业的理论，重复了我的定义：一个在极端不确定情况下的开发新产品和新服务的组织。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:5","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第三章 学习 “学习”二字是书本里用以掩饰执行失败的惯用借口。 我们必须了解顾客真正需要的是什么，而不是他们自己说要什么，或者我们认为他们应该要什么。 成功地执行一项无意义的计划是导致失败的致命原因，而经证实的认知则是解决这个问题的首要方法。 我不由得想，鉴于我的工作最终变成一次对时间和精力的浪费，那么在过去的六个月里，我还不如躺在沙滩上啜一口鸡尾酒，也许对公司来说也没什么损失。 真需要我这个人吗？如果我什么都不做岂不更好？ 换言之，我们的努力有多少创造了价值，有多少被浪费了？这个问题是精益生产的核心所在；这是所有精益生产拥护者被教会提出的第一个问题。 在软件圈子里，在精益想法形成之前，敏捷开发方法论是用来杜绝浪费的，它也一直是我所奉行的。 精益的思维方式把价值定义为“向顾客提供利益”，除此之外的任何东西都是浪费。 我逐渐相信，学习是新创企业进步的重要部分。 了解顾客所需之外的任何努力都可以不要。我把这种学习称为“经证实的认知”，在新创企业的核心衡量标准中，它总是显示为积极的改善结果。 正如我们所见，你很容易自以为清楚顾客想要什么，也很容易在折腾了一堆东西后发现它们毫无意义。 因此，经证实的认知必须要以从真实顾客那里收集到的实证数据为基础。 没有精彩的假设、战略、白板上的策划分析花招，只有对顾客真实需要的探求，以及调整产品和战略去迎合这些需要的种种艰苦工作。 讽刺的是，比起有少量营业额的情况，在零收入、零顾客数、零进展的状况下，更容易筹到资金或寻求其他资源。 因为“零”让人有遐想空间，而低收入则令人质疑，不知道高收入能否实现。每个人都知道，或以为自己知道产品一夜成名的故事。 只要产品还没推出，数据尚未收到，那么幻想一下未来的成功也未尝不可。而半死不活的低收入则给希望当头泼上一盆冷水。 这种现象激发了一个非理性的观点：推迟数据收集，直到确认能取得成功。 当然，正如我们看到的，这种延误造成的消极效果是大量工作的浪费，重要反馈信息的减少，企业开发出无人想要的产品的风险剧增。 我们需要科学的方法。在精益创业的模式中，新创企业要做的每件事，包括每种产品、每项功能、每次营销活动都被视为一次实验，用来获取“经证实的认知”。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:6","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第四章 实验 科学方法中的重要一环：如果你无法失败，就学不到东西。 一项真正的实验运用的是科学的方法：在一个清晰的假设前提下，预测将要发生的事件，接着再用实证法进行验证。 正如科学实验是以理论为基础，新创企业的实验则由其愿景为指引，每个实验的目标都是为了要建立一项围绕愿景的可持续业务。 精益创业的模式立刻提供了严格彻底测试这些假设的方法。战略计划要花费几个月时间完成，而这些实验却可以马上执行。 化整为零 第一步要做的是把大的愿景分解成一个个独立的部分。我把创业者最重要的两个假设称为价值假设和增长假设。 “价值假设”（value hypothesis）衡量的是当顾客使用某种产品或服务时，它是不是真的实现了其价值。 “增长假设”（growth hypothesis）是用来测试新顾客如何发现一种产品或服务的。 实验的意义不在于找出普通顾客，而是要找到“早期使用者”：就是那些最迫切需要产品的人。他们对错误更容易谅解，而且渴望提供反馈意见。 如果早期实验中得到的数据看上去没有希望，那么很明显就是基本战略出了问题。 但这并不意味着到了放弃的时候。恰恰相反，它意味着是时候马上获取如何改善项目的定性反馈。这就是此类实验比传统市场研究所具有的优势。 我们不需要作一般意义上的调查，或找新的人员来访谈。我们早已有了能与之交谈，并了解其真实行为的一群人：他们就是初期实验的参与者。 成功不是实现一项产品功能；成功是学会如何解决顾客的问题。​ 他们的挑战就是要跳脱出以往的思路，不要把信心寄托在调查完备的计划上。要知道，计划这种管理工具只在具备长期稳定运营记录的情况下才管用。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:7","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第五章 飞跃 开发—测量—认知反馈循环 第一步要做的，就是用一个最小化的可行产品（minimum viable product，MVP）尽快进入“开发”阶段。 所谓MVP的产品版本可以让我们花最少的力气、最短的开发时间，经历一次完整的“开发—测量—认知”循环。 这个最小化可行产品少了很多日后可能相当重要的功能特性。但是，从某种角度来说，开发MVP需要投入额外的工作：因为我们必须能衡量它的影响力。 比如，开发出的原型产品只用于工程师和设计师的内部品质测评是不够的，我们还必须把它推向潜在顾客，评估他们的反应。 进入“测量”阶段时，我们最大的挑战在于，产品开发上的努力是否带给企业真正的发展。 要记得，如果我们开发出来的东西没人想要，那么它是否按时、按预算完成都无关紧要了。 尽管我们把反馈循环按活动发生顺序写成“开发—测量—认知”，但我们制订计划的工作却是相反的：先确定需要知道什么，再用创新核算方法来确定需要评估什么、是否获得了经证实的认知，最后确定需要开发什么产品来进行实验，并获取那些评估。 每个商业计划都是从一系列假设开始的。在默认这些假设的基础上，提出一项战略，并阐述如何实现企业愿景。 但假设终究是假设，它们未经证实，而且在现实中往往还是错的。因此，新创企业早期努力的目标，应该是尽可能迅速地验证这些假设。 把假设说得像真的一样，是创业者典型的超能力。正是因为整个企业的成功寄托在这一点上，所以它们被称做“信念飞跃”。 如果对了，无数机遇尽在眼前；如果错了，企业将岌岌可危。 以前使用的X技术，因为其Y特性，赢得了Z市场。现在我们新的X2技术，因为同样有Y特性，所以也能让我们赢得Z2市场。 这种类推法的问题在于它遮蔽了“信念飞跃”的真相。这样类比的目的是设法让业务看上去没有那么大的风险。这个方法是用来说服投资人、员工或合伙人签字画押的。 类比和反证把策略构建基于和其他公司及行业的比较，这种做法从本质上并没有错。实际上，这种方式可以帮助我们找到那些并非“信念飞跃”式的假设。 有不少著名创业家看起来是因为生逢其时其地，从而赚得盆满钵满。 可是，在每个生逢其时其地的成功创业家之外，还有很多也身处相同时间地点的人，他们的创业却以失败告终。 在20世纪早期，包括亨利·福特（Henry Ford）在内有近500位创业企业家。 想象一下，作为汽车行业的一个创业者，受过最先进的工程学训练，处在一个史上最可观的市场机遇的起点上，但绝大多数人却一无所获。 成功案例和失败案例之间的差别在于，成功的创业者高瞻远瞩，有能力和工具去发现他们的计划中哪些部分运作顺利，哪些部分误入歧途，然后相应调整策略。 有两个“信念飞跃”非常突出：价值创建假设和增长假设。 从价值的角度来考虑，创业者非常需要了解新创企业增长背后的原因，避免很多价值破坏类的增长。 比如，一项业务的增长是通过不断向投资人募款，以及大量付费广告取得的，却没有开发出创造价值的产品。 我把这样的企业叫做“升平戏院”，它粉饰成功的表象，让自己看上去像那么回事儿。 新创企业最早的策略计划很可能是凭着直觉预感来的，这是一件好事。 而要把这些直觉转化成数据，借用史蒂夫·布兰克的名言，创业者必须“走出办公大楼”​，开始学习。 进行“持续创新”的企业非常了解他们的客户是“谁”、“在哪里”，他们会用“现地现物”的方法去考察顾客想要什么。 无论再多的设计也无法预测将产品投入真实世界有多复杂。 实际上，新锐设计师在精益用户体验（Lean User Experience）的大旗下，正在开发一些新的技巧。他们认识到，顾客典型是一种假设，而非事实。 我们必须通过经证实的认知，证明我们能够用可持续的方式服务此类顾客，否则所谓顾客形象就是暂时的。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:8","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第六章 测试 一个最小化可行产品（MVP）有助创业者尽早开启学习认知的历程。 它并不一定是想象中的最小型产品；它是用最快的方式，以最少精力完成“开发—测量—认知”的反馈循环。 传统的产品开发通常要耗费很长的筹划时间，反复推敲，尽量把产品做到完美。 与之相反，最小化可行产品的目的则是开启学习认知的流程，而不是结束这个流程。 与原型或概念测试不同的是，最小化可行产品并非用于回答产品设计或技术方面的问题，而是以验证基本的商业假设为目标。 一段视频就是最小化可行产品。它证实了休斯顿“信念飞跃”的假设，即顾客确实需要他正在开发的产品。 这一路上，产品开发团队始终着眼于把有用的功能提升扩大，而不是想着发明一些将来才可能用得上的东西。 结果，他们在开发投入中发生的浪费，远比同类企业在传统情况下浪费的少得多。 在小企业中，CEO、创始人、总裁和企业业主亲自服务顾客是极为常见的。 但在贵宾式最小化可行产品的情形中，个人化服务不是产品，而是企业增长模式的一种学习认知活动，用于检测信念飞跃式的假设。 事实上，贵宾式最小化可行产品的常见结果是证明公司原本设定的增长模式无效，由此清楚表明采用其他方式的必要性。 即便最初的最小化可行产品让公司赢利，也不意味着原定模式一定有效。 如果没有真正可行的增长模式，很多公司见了一些蝇头小利就会沾沾自喜、故步自封，却没意识到一次转型（改变方向或战略）也许会带来重大增长。 唯一确认的方式就是在真实顾客那里系统地检测这个增长模式。 这些对质量问题讨论的前提是，企业已经了解哪些产品特质在顾客眼里是有价值的。 而新创企业作这种假设是要冒风险的。通常情况下，我们甚至不确定谁是顾客。 即便是“低质量”的最小化可行产品也能为开发高质量的产品服务。 确实，有时顾客认为该最小化可行产品是低质量的。如果是这样，我们应该视其为一个机遇，去了解顾客在意的是什么品质。 这绝对比凭空想象或纸上谈兵好得多，它为开发未来的产品提供了坚实的实证基础。 但有时候顾客的反应则截然不同。很多著名产品都是以“低质量”的状态推向市场的，而顾客就是爱它们。 最小化可行产品需要我们有勇气验证自己的假设。如果顾客的反应和我们期待的一致，那就确认了我们的假设是对的。 因此，精益创业模式和开发高质量的产品并不矛盾，但它只以赢得顾客为目的。我们必须愿意把传统的专业标准搁置一边，尽快进入“经证实的认知”环节。 当你想要开发最小化可行产品的时候，应当符合一条简单规则：放弃对你需要的认知没有直接用处的一切功能、流程或努力。 开发最小化可行产品具有风险，既有真实的风险，也有想象的风险。 如果事先没有充分了解，它们足以令一家新创企业的努力付诸东流。最常见的减速路障是法律问题、对竞争对手的恐惧、品牌风险，以及对士气的影响。 法律上的风险或许已令人畏缩，但更令人惊讶的是，我多年来最常听到开发最小化可行产品的反对意见，居然是惧怕竞争对手——特别是对大型的成熟企业的恐惧，唯恐他们盗用了新创企业的构想。 但要是盗用一个好点子真那么容易就好了！作为一个新创企业，想要你的构想、公司或产品不为任何人所知，几乎是不可能的，更别提竞争对手了。 真相是，大多数公司的大多数经理人对好的构想早已应接不暇。 他们的挑战是如何把这些构想排出先后顺序，并且落实执行。正因如此，才给了新创企业生存的希望。 如果一旦创意构想为人所知，而竞争对手能比新创企业更好地执行这些创意，那这家新创企业反正也没戏唱了。 之所以要建立一支新团队去实现这个构想，是因为你相信在开发—测量—认知的反馈循环中，你可以比任何人推进得更快。 如果这是真的，那么竞争对手知道什么都无关紧要。 如果不是真的，这家新创企业存在更大的问题的话，那么保密解决不了问题。 一家成功的新创企业迟早要直面快速跟进者的竞争。 先发优势几乎起不了太大的作用。而避开消费者的那种秘密开发状态所争取的时间，也几乎不可能带来起步优势。 唯一的取胜之道是比任何人学得更快。 很多新创企业想要投资建立一个好的品牌，但最小化可行产品似乎带来品牌风险。 在企业内的创业企业家中也有类似情况，他们因为害怕损害母公司的已有品牌形象而束手束脚。 不论是哪种情形，有一个很简单的化解方法，即用不同的品牌名称发布最小化可行产品。 此外，如果公司举行了公关活动，或制造市场热点之类的高调发布活动，就有可能对它的长期声誉造成风险。 因为一旦产品无法兑现当初的许诺，对企业品牌真正的长期损害就会发生。 但是新创企业那不起眼、少得可怜的顾客量，以及有限的曝光，反而是它的优势。 与其为之哀叹，不如利用这种优势，埋头进行实验。 当产品在真正的顾客群中得以验证时，再来办一场对外市场发布吧。 最小化可行产品常常带来坏消息，作好接受这些事实的准备，会对你有所裨益。 最小化可行产品和传统的概念测试或产品原型不同，它并非用于解决设计或技术问题，而是要解答一系列商业问题。 并且，最小化可行产品常常揭示了一部分必要的现实。 事实上，进入“现实扭曲力场”￼总令人感到不自在。梦想家们特别害怕这样的伪真理：即顾客会排斥一个太小或太有限的、有瑕疵的最小化可行产品。 企业发布未经先期测试的成型产品，正体现了这种畏惧态度。这些人就是无法接受在产品尚未四角俱全之时就开始测试。 当然，他们的恐惧是有道理的。因为埋头于传统产品开发方式的团队，习惯有规律地定期做出继续或终止的决策，这正是瀑布模型或门径开发模式的精要所在。假如一项最小化可行产品失败了，团队很容易会一并放弃希望、放弃项目。 解决这种两难境遇的方法是下决心重复实验。 你必须事先就坚定不移地承诺：无论最小化可行产品的测试结果如何，都不放弃希望。 成功的创业者既不会一看到麻烦冒头就退避三舍，也不会一条道走到黑。他们兼有坚持不懈和灵活应变的特质。 最小化可行产品只是学习认知过程中的第一步。在这条道路上经历多次反复后，你可能会认识到产品或战略中有部分瑕疵，然后到了决定改变的时刻（即我所说的转型），用另一种不同的方式实现你的理想。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:9","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第七章 衡量 新创企业在一开始差不多就是一个纸上的模型而已。 商业计划内的财务考量包括了：预测企业期望吸引的顾客数量，要花多少钱，以及将产生多少收入和利润。在新创企业的早期，这只是一个理想，离实际相去甚远。 很多产品——即便是失败的产品——都不会交白卷。大多数产品总会有些顾客、些许增长和一些积极成果。 对新创企业来说，最大的危险之一就是陷入进退两难的境地。员工和创业者从本性上总是抱有乐观倾向，即便看到大事不妙，还是想要抱定宗旨不动摇。 锲而不舍的传说是非常危险的。我们都听过创业英雄的故事，他们在前景看似暗淡无光的情况下力挽狂澜，取得最后胜利。 不幸的是，我们没听到的是更多无名者的故事，他们死守不放，公司最终倒台。 公司的增长率主要取决于三个因素：单一客户获利率、获得新顾客的成本，以及现有顾客的重复购买率。 这些指标表现越好，公司增长得越快，也越赢利。它们是公司增长模式中的驱动因素。 创新核算分三步走： 第一，使用最小化可行产品确定企业目前所处阶段的真实数据。 第二，新创企业必须尝试把增长引擎从基准线逐步调至理想状态，这期间可能要经过多次尝试。 新创企业在这个调整过程中进行了能做的一切微调和产品优化后，就到了一个决策的时刻。 这就是第三步：转型还是坚持？ 如果公司正朝着理想目标稳步前进，那就意味着公司认知得当，并且有效地运用了那些认知。 在这种情况下继续前进是有意义的。若非如此，管理团队最后必须得出结论，承认目前的产品战略是有问题的，需要重大改变。 当企业转型时，整个流程会重新开始，再次确定新的基准线，并从那一点上调整引擎。如果这些引擎调整的活动比先前更具成效，就是成功转型的好迹象。 确定基准线举例来说，新创企业开发了一个完整的原型产品，通过主要营销渠道销售给真实顾客。 这个单一的最小化可行产品可以测试企业的大多数假设，并且同时为每个假设建立基准线的指标。 另一种方式是，新创企业可能会倾向于开发几种不同的最小化可行产品，每次分别针对一个假设获取反馈。 在开发原型产品前，公司可以使用其营销材料先进行一次冒烟实验。这是直接营销中早有的一个技巧，即让顾客有机会预订一个尚未开发出来的产品。 冒烟实验仅测量一件事：顾客是否有兴趣试用产品。实验本身并不足以证实整个增长模式。 但是，在下决心向该产品投入更多资金和其他资源之前，得到这个假设的反馈意见是非常有用的。 这些最小化可行产品提供了“认知阶段性目标”中的第一个案例。 最小化可行产品让新创企业在其增长模式中填入第一串真实的基础数据——转化率、注册和试用率、顾客生命周期价值等。 它提供了顾客情况、顾客对产品的反应等基础信息，即使一开始都是坏消息，但却很有价值。 我当时负责一支小小的产品开发团队。我和我的创业搭档们交流了一下想法，感到问题应该是出在我们团队的工作上。我更加拼命地工作，专心提高各项功能的质量，度过了无数不眠之夜。沮丧的情绪日益滋生起来。 到了黔驴技穷的地步，我终于要祭出最后一招了：和顾客谈一谈。在调整增长引擎上的进展失利之后，我准备好了要提出正确的问题。 这次失败之前，在公司创立之初，我们和潜在顾客的谈话相当轻松，对自己的前进方面也很有把握。 实际上，以前把顾客请来办公室访谈并进行可用性测试的时候，我们很容易否定顾客的负面评价。如果他们不想使用软件，我就认为他们不属于我们的目标市场。 我会对负责招募受试人员的管理者说，​“不要这个顾客，给我找一个我们目标群中的人。​”如果下一个顾客的反应比较积极，我就认为自己对目标群体的看法得到了确认。 如果情况相反，我就把这个顾客打发走，再找下一个。但眼下一旦数据在手，我和顾客的互动方式就改变了。 突然之间，我发现有很多迫切需要解答的问题：为什么顾客对我们产品的“改进”无动于衷？为什么我们努力付出却得不到回报？ 当我们的努力方向和顾客真实所需一致时，我们的实验就更可能把顾客行为往更好的方面调整。 糟糕的量化结果迫使我们宣告失败，并由此产生了更多量化研究的动机、背景和空间。 这些研究产生了新想法——即新的假设——有待验证，并带来转型的可能，接着这个循环再次发生。 每次我们都重复着一个简单的节奏：建立基准线，调整引擎，并决定是转型还是坚持。 公司不论规模大小，就算已经有了一个可行的增长引擎，也可能用错误的衡量指标作为行动指导。 它会诱使经理人依赖那些常用的“成功法宝”​：临时购买广告、充塞渠道、使用花哨的演示样品等等，让总体数据尽量再好看一些。 但与其把精力用在卖弄招数上，还不如设法建立可持续的业务。 我把判读新创企业的传统数据称为“虚荣指标”​，创新核算要求我们避免诱惑，不要使用这些指标。 法布德的“故事”是从顾客的观点描述产品功能特性，而不是用技术术语描述新功能的规格明细。 这样的“故事”能帮助工程师在产品开发过程中关注顾客的认知。 要知道敏捷开发的一大软肋是：工程师愿意根据不断改变的业务要求调适产品，但是对这些商业决策的质量概不负责。 对比测试还有助于团队更细致地理解顾客想要什么，不要什么。 比如，开发团队希望社交沟通工具能提升产品价值，因此不断添加新的方法，让顾客能相互交流。这些工作基于的观点是，顾客希望在学习中有更多交流。 但是，当对比测试显示这类附加功能并未改变顾客行为时，这个观点就有问题了。 “看板”规则只允许一定数量的用户故事存在于任意四个阶段中。 随着故事从一个阶段进入另一个阶段，它被填入下一个阶段的方框中。一旦方框填满就不能再接受其他故事了。 只有当一个用户故事通过了验证，才能从“看板”上移除。 如果验证失败，发现这个故事是个糟糕的想法，那么和它相关的功能就会从产品中删除。​ 举例来说，为什么要开发一个不在对比测试中的新功能？ 在短时期内可能节省时间，但到了验证阶段，却要花费更多时间来测试。同样，工程师不愿开发他们不理解的用户故事也是出于同样的逻辑。 在老系统中，工程师只负责开发，至于为什么要这么做乃是后话。而在新系统中，那种行为无疑阻碍了生产效率：没有清楚的前提假设，用户故事怎么可能被验证？ 最重要的是，在这个系统中工作的团队不是根据新功能的开发量，而是根据经证实的认知来衡量其生产效率的。 三个“可”的衡量指标，即：可执行、可使用和可审查指标。 可执行 一个产品成绩报告要可执行的话，必须清楚地显示因果关系。否则就是虚荣指标。 为了得到想要的信息，很多部门常常自己花力气研究如何使用数据，而不去了解真实的顾客反馈，指导未来的行动。 可使用 对付数据滥用的方法是： 第一，把产品报告做得尽量简单，让每个人都能理解。 第二，指标的使用性也指更多人能方便地获得产品报告。 这些报告就张贴在我们的网站上，每位有员工账号的人都可以看到。 每个员工可以随时登录系统，挑选一项目前或过去的实验，便可以看到一页简明的实验结果概述。这些单页概述逐渐成为公司上下解决产品争议的实际准则。 当人们需要证据支持他们认识到的某项观点时，他们就会带上打印出来的单页去开会，坚信每个看了这份文件的人都会了解其含义。 可审查 大多数时候，当经理人、开发者或相关团队在面对可能否决自己宝贝项目的决议时，争论的失意方就会质疑数据的真实性。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:10","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第八章 转型还是坚持 目前取得的进展是否足以令人相信我们最初的战略假设是正确的，还是需要作出重大改变？ 这种改变称为转型：即有条理的方向性改变，用来测试新的产品、战略和增长引擎的基础假设。 错的坚持决定是对潜在创新的最大威胁。 企业如果不能根据市场反馈转投新的方向，就会陷于进退两难的尴尬境地，既无法增长又不至于垮台，虚耗员工和其他利益相关群体的资源和支持信任，却只能原地踏步。 新创企业的生产效率并不意味着开发更多产品或功能，而是把我们的努力投入创造价值并促进增长的业务和产品中。 换言之，成功的转型让我们走上一条发展可持续业务的康庄大道。 尽管戴维怀有远大的抱负，但他还是尽早发布了产品，并进行重复实验。 因此在企业成立8个月后，他就到了转型还是坚持的阶段。向某个概念投入的金钱、时间和创新精力越多，要转型就越困难。戴维很好地避免了这种陷阱。 所谓的“转型”需要我们立足于目前所知所识，同时在战略上作出重大改变，从而寻求更多经证实的认知。 戴维实现这个成绩不是因为更努力地工作，而是更明智地工作，把原产品的开发资源用到新产品中。 能实现的转型数量决定新创公司的跑道。 创业老手常常会谈论他的企业还剩下多少跑道，其实指的就是新创企业要么起飞、要么失败的剩余时间。 这通常是用银行里的剩余现金除以每个月烧钱的规模，或是以账户余额的净消耗速度来决定的。 比如，一家新创企业在银行里有100万美元，假设每个月花10万美元，预计的跑道时长即为10个月。 当新创企业开始出现现金短缺的时候，他们有两种方式加长跑道：或者削减成本，或者筹措额外资金。 但当创业者不加选择地压缩开支时，他们有可能把公司用于开发—测量—认知反馈循环的成本，连同其他方面的浪费一起砍掉。 如果降低成本导致反馈循环减慢，那么它达到的效果只是让企业慢点儿关门而已。 真正衡量跑道长短的标准是公司剩余的转型次数，即根本改变商业战略的机会还有几次。 从转型的角度而非时间来衡量跑道，提供了加长跑道的另一种方法：即加速每次转型。 也就是说，新创企业必须设法以较小的成本或在较短时间里，完成同等数量的经证实的认知。 目前为止讨论的所有精益创业模式的策略技巧，都以此为总目标。 转型需要勇气。 询问一下众多决定转型的创业者，他们会告诉你，他们希望当初能早点儿那么做。 我认为有三个原因造成这样的情况。 第一，虚荣指数会让创业者形成错误结论，活在自己的个人世界中。 这对作出转型决定是特别有害的，因为它无法让团队认识到转变的必要性。 当人们得不出最好的判断，却被逼改变的话，整个流程就会更困难、更耗时，并且效果不显著。 第二，如果创业者没有一个清晰的前提假设，他几乎不可能经历完整的失败，而未经失败的人通常很难产生冲劲儿，作出根本的转型改变。 我在前面已经提过，​“先做了再看”的败局已经很明显了：你准保会成功——成功地看到发生了什么。 但除了极少数情况外，你看到的大多数结果是模糊的，你不知道应该转型还是坚持，应该改变方向还是抱定宗旨。 第三，很多创业者心存恐惧。承认失败往往引发士气挫败的危机。 大多数创业者最大的担忧并非他们的愿景最后被证明是错的； 他们更担心的是，这些愿景在还没有得到真正机会自我证实之前，就被认定是错误的。 这种恐惧让他们相当抵制最小化可行产品、对比测试和其他验证假设的技巧。 具有讽刺意味的是，如果不能完整呈现愿景，就无法进行测试，这种恐惧之心反而令风险程度升高。 但是，如果等到资金快要用完之时再来转型则为时已晚。 创业者要避免这种命运，就必须正视心中恐惧，接受失败，而且通常是公开场合中的失败。 对我们而言，我们要做的只是明明白白地把产品和愿景推向市场，取得反馈，并不断地重复实验。 虚心测试我们的理论和方法，看看市场是怎么想的。诚实地听取意见。朝着我们认为能为世界创造意义的方向不断创新。 转型”这个词有时候被错误地当做“改变”的同义词。其实，转型是一种特殊的改变，用于测试新的产品、商业模式和增长引擎的基本假设。 放大转型在这种情况中，之前被视为产品中单独的一个功能特性，成为产品的全部。 缩小转型在相反的情况中，有时候单独的一个功能不足以支持整个产品。这类转型就是把原来的整个产品转化为一个更大型产品中的一项单独的功能特性。 客户细分市场转型这类转型中，公司意识到他们开发的产品确实解决了真实顾客的真实需求，但这类顾客并非公司原来打算服务的顾客。 换言之，产品的前提假设得到部分证实，解决了相关问题，但针对的是与原本预期不同的顾客。 客户需求转型随着对顾客了解的深入，有时候我们可以清楚地看到，我们想要解决的问题对顾客而言并不那么重要。 但是，由于这种密切的顾客关系，我们常常发现其他一些重要的相关问题，而且我们的团队也能解决这些问题。 很多情况下，解决这些相关问题可能只需要重新定位现有产品。还有一些情况下，则需要打造一个全新的产品。 这种转型也是基于产品的前提假设得到部分证实的情况；目标客户有一个需要解决的问题，只不过它不是我们事先预计的。 平台转型平台转型指的是从应用产品转为平台产品，或反方向的转化。 通常，新创企业想要开发新平台的话，开始先会销售其平台上的一种应用产品，即所谓的“模范应用产品”​。 到后期该平台才会作为一个载体逐渐显现，让第三方利用这个平台开发他们的相关产品。 商业架构转型这个转型的概念借用了杰弗里·摩尔（Geoffrey Moore）的理论。 他观察到公司一般会在两种主要的商业架构中选其一：高利润低产量（复杂系统）模式，或低利润高产量（规模运营）模式。 前者经常和企业对企业（B2B）或企业销售流程相关，而后者则与消费类产品相关（但也有一些明显的例外情况）​。 价值获取转型 有很多方法来获取公司创造的价值。这些方法通常被称为货币化模式或收入模式。在现实中，获取价值是产品前提假设中的固有部分。 通常，公司获取价值方式的转变，会对业务的其他部分、产品和市场营销战略造成深远的影响。 增长引擎转型 带动新创企业成长的增长引擎主要有三种：病毒式、黏着式和付费式。 在这类转型中，公司为寻求更快速、更高利润的增长而改变其增长战略。增长引擎转型也会要求相应改变价值获取的方式，这种要求虽非必然，却也很常见。 渠道转型 在传统销售术语中，公司把产品交付顾客的途径称为销售渠道，或分销渠道。渠道转型认为，可以通过不同的渠道实现相同的基本解决方案，而且效率更高。 正是因为互联网对销售渠道的破坏式效果，才使它对以前那些需要复杂的销售和分销渠道的行业，比如报纸、杂志和书籍出版业，产生了颠覆性影响。 技术转型 唯一的问题是，新技术是否能比已有技术提供更优越的价格和产品性能。 转型是一个战略假设 转型在任何成长型企业发展过程中都是一个永恒的主题。即使公司取得了最初的成功，它也必须不断转型。 转型并非仅仅是一种改变。 要记住，它是一种有组织有条理的特殊改变，用以测试一个关于产品、商业模式和增长引擎的新的基础假设。 它是精益创业的核心所在，让采用精益创业的企业在错误面前百折不挠：如果我们转错了弯，我们有必要的工具来发现错误，并能迅速找到另一条道路。 在第二篇里，我们研究了创业的概念，从最初的信念飞跃开始，运用最小化可行产品来验证，使用创新核算和可执行衡量指标评估其结果，并且作出转型或坚持的决定。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:11","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第九章 批量 任何精益转变的首要问题是：哪些活动创造价值，哪些造成浪费？一旦你明白了这个区别，就可以开始运用精益技巧，去除浪费，提高价值创造活动的效率。 新创企业的价值不在于开发产品，而是对创建可持续业务的认知。 顾客真正需要的产品是什么？ 为什么我们的业务会增长？ 谁是我们的顾客？ 我们应该倾听哪些顾客？ 哪些顾客意见可以忽略？ 要把新创企业的成功机会最大化，这些都是需要尽快回答的问题。也只有这样，才能为新创企业创造价值。 和通常的想法不同，浑噩平庸和官僚制度并不一定是企业进入成熟阶段的宿命。 我相信，有了适当的基础，采取精益创业的新创企业可以发展壮大，走向成熟，并且依然保持其灵活机动、认知为本和创新文化的精髓。 一次装一个信封的做法在精益生产中被称为“单件流”。它之所以行之有效是因为发挥了小批量的效力。 当我们需要执行阶段性工作的时候，所谓“批量”是指一次有多少工作从一个阶段进入下一个阶段。 比如，我们要封装100个信封，下意识的做法是一次性折叠100封信，那么批量就是100。单件流的叫法就是因为它的批量是1。 为什么一次封装一个信封看似较慢，却能更快地完成工作？ 因为我们的直觉没有把分拣、堆叠和在中途移动一大堆半成品信封的额外时间计算在内。 重复同一个工作看似效率更高，是因为我们一相情愿地认为一项简单的工作重复得越多会做得越好。 不幸的是，在这种以流程为主的工作上，个人表现没有整体系统表现那么重要。 以小批量工作的最大好处是能早早发现质量问题。 精益创业的目的并非高效开发更多产品，而是尽可能迅速地学会如何创建一项可持续的业务。 并非每个企业都要每天推出50个不同版本的产品，而是要减小批量，比竞争对手更快完成开发—测量—认知的反馈循环。 对顾客更快了解的能力是新创企业必须拥有的重要竞争优势。 大批量的死亡螺旋 在制造业中，拉动方式主要用来确保把生产流程调整至顾客需求的水平。没有它的话，工厂最终会生产出比顾客真正所需多得多，或少得多的产品。 但是，采用这种方式开发新产品就不那么直截了当了。有些人把精益创业模式误解为对顾客需求简单地采取拉动方式。 这种假设是基于顾客可以告诉我们要开发什么产品，并且会对产品开发生成一个拉动信号，开始实施。 我们前面已经提过，这并非精益创业的运作方式，因为顾客通常不知道他们到底要什么。我们制造产品的目的是为了进行实验，从而帮助我们学到如何建立一项可持续的业务。 因此精益创业中产品开发的流程是以进行实验的需要来拉动，从而作出响应。这才是正确的理解。 只要我们定下想要测试的假设，产品开发团队就应该尽可能迅速地着手设计并施行这项实验，使用最小的批次数量把任务完成。 要记得，虽然我们根据活动发生先后，把反馈循环写成开发—测量—认知，我们却应该以相反的顺序来安排计划：先找出需要知道什么，再倒回去看为了获得这个认知，要用什么产品进行实验。 因此，不是顾客，而是我们“对顾客的假设”拉动了产品及其他功能特性开发的工作。除此之外的工作都是浪费。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:12","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第十章 成长 增长引擎是新创企业用来实现可持续增长的机制。 我使用了“可持续”这个词，剔除了所有能够造成顾客量剧增，但无长期影响的行动，比如为迅速启动增长而开展一次广告宣传或公关噱头，由此实现的增长却无法长期维持。 可持续增长的特征体现在一条简明规则中：新顾客是由以往顾客的行动带来的。 以往顾客推动可持续增长的方式主要有四种： 口碑相传。 产品使用带来的衍生效应。不管出于赶时髦还是彰显身份地位的考虑，每次使用像奢侈品这类的产品时，都会引发旁人对该产品的认知。 有资金来源的广告。 大多数业务用广告吸引新顾客使用其产品。要让这种方式成为可持续增长的来源，广告费用必须由收入支付，而不是依靠投资资本这种一次性的资金来源。 只要获取一位新顾客的成本（边际成本）比他带来的收入（边际收益）低，超出的部分（边际利润）就可以用来获取更多顾客。边际利润越多，增长越快。 重复购买或使用。有些产品通过付费计划（有线电视公司）或自愿的多次购买（去同一家食品杂货店或购买灯泡），实现重复购买的模式。 这些可持续增长的来源为我所说的“增长引擎”的反馈循环提供了动力。增长引擎就像内燃机一样不停转动，反馈循环发生得越快，公司成长得越快。 每架引擎都有一套内在的衡量指标，决定了当使用这架引擎时，公司能增长得多快。 三种增长引擎 新创企业最大的潜在浪费之一，是在产品上市后花时间争论如何确定下一步工作的优先顺序。 事实上，公司随时都可以把精力用在寻找新客户、更好服务已有顾客、提高整体质量，或压低成本之类的工作上。 在我自己的经历中，这种确定优先顺序的争论会消耗公司相当多的时间。 “新创企业不会饿死，而会饱死。”总有无数让产品变得更好的想法飘荡在半空，但现实是残酷的，大多数想法带来的改变微乎其微，只能算是产品优化而已。 新创企业必须关注能产生经证实的认知的重大实验。增长引擎的框架结构帮助他们把注意力集中在紧要的衡量指标上。 黏着式增长引擎 使用黏着式增长引擎的公司要非常仔细地追踪顾客损耗率，亦称流失率。所谓流失率就是指在任意一段时间内，没有继续使用公司产品的那部分顾客占顾客总数的比率。 控制黏着式增长引擎的规则很简单：如果取得新顾客的比率超过流失率，产品将会增长。增长的速度取决于“复合率”，其实就是自然增长率减去流失率。 就像银行户头赚取复利一样，高复合率将带来极快的增长，不需要依靠广告、病毒式增长或公关噱头。不管用什么方法，他们的焦点都必须放在提高顾客保留率上。 通常，如果某家公司的增长不足，一般会增加销售和市场营销方面的投入，但提高保留率的做法恰恰和这个直觉相反。这种反直觉的结果很难从标准的虚荣衡量指标中推论得出。 病毒式增长引擎 具有病毒式增长特质的产品依靠人和人之间的传递，是正常使用产品的必然结果。顾客并非有意充当布道者，他们不需要到处为产品说好话。 只要顾客使用产品，就自然带动了增长。 付费式增长引擎 每位顾客在其“生命周期”内为产品支付一定的费用，扣除可变成本之后，剩下的部分通常被称为顾客的“生命周期价值”（LTV）。 这项收入可用于购买广告，作为成长的投资。 成功的新创企业往往只关注一种增长引擎，做好所有令此引擎运作的工作。 有的企业试图建立一个包括所有三种引擎的中控系统，这往往会造成很多混乱，因为需要同时达成这些效果的专业运营技能相当复杂。 因此，我强烈建议新创企业每次关注一种增长引擎。 大多数创业者对哪种增长引擎最有效已经有了很强的信念飞跃假设。如果他们还没想好，那么走出办公楼，花时间理解顾客就能让他们很快知道哪种引擎可能最合用。 只有当新创企业彻底运用了这种引擎之后，才来考虑是否需要转型到另一种引擎上。 引擎停滞之时 要建起并发动新创企业的增长引擎已经非常艰难，但真相是每架增长引擎最终都会用尽燃料。 每架引擎都依靠特定的一群顾客及他们的相关习惯、偏好、广告渠道和相互间的关系。到了某一点，这些顾客群会被充分利用。根据企业所处的行业和时机，这个过程可长可短。 我们强调了开发最小化可行产品的重要性，它只提供早期使用者需要的功能特性，而无其他。成功实施了这一战略后就可启动增长引擎，覆盖目标受众。 任何规模的公司都会受到这个长期问题的困扰。他们需要管理好一系列活动的组合，在调整增长引擎的同时，挖掘新的增长来源，以备应对增长引擎在将来的某天放缓停滞。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:13","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第十一章 适应 建立自适应组织 我们在IMVU最终还是制订了一套相当棒的培训计划，让新员工在入职第一天就能开始有效工作。 仅仅几周后，他们就能深度参与工作。把我们的工作流程标准化，并准备新员工必须学习的概念课程要费很多力气。 每个新晋工程师都会被指定一位导师，帮他全面了解IMVU的系统、概念和技术，完成一整套课程，早日上手工作。 导师和学徒的绩效表现是相连的，因此导师会认真地指导教育。 新创企业学习如何在弹尽粮绝之前建立起一项可持续的业务，是生死攸关的头等大事。 但是，只盯着速度也是有害的。为了能做到恰如其分，新创企业需要有内置的速度调控器，协助团队找到最佳工作节奏。 一旦发现无法纠正的质量问题冒头，马上停止工作，强制展开问题调查。 这是精益生产中最重要的发现之一：不能为了时间牺牲质量。 如果你现在引起（或忽视）了质量问题，导致的缺陷将会在之后减慢你的速度。 缺陷造成大量返工、士气低迷和顾客投诉，这些都会减缓工作流程，蚕食宝贵资源。 当我向工程开发背景的创业者介绍精益创业方法的时候，这部分概念是最难掌握的。 一方面，经证实的认识和最小化可行产品的逻辑是，我们必须尽早把产品送至顾客手中，除了需要从顾客那里学习的认知外，其他任何工作都是浪费。 另一方面，开发—测量—认知的反馈循环是一个持续过程。我们不会在一个最小化可行产品之后就停下脚步，而要使用已经学到的信息，马上投入到下一个迭代周期的工作。 因此，今天在产品质量、设计或基础设施方面抄捷径，明天就可能最终影响并拖慢公司的脚步。你可以在IMVU的实例中看到这种困境。 当我们向更多主流顾客提供产品时，他们不像早期使用者那样包容。 与之相似的情况是，我们增加的产品功能特性越多，就越难再添加新的功能，因为存在新的功能干扰现有功能的风险。 “五个为什么”的智慧 让我们回到是否应该给新员工提供培训的问题上。 如果没有培训计划，新员工在学习过程中会犯错误，需要其他团队成员的帮助和干预，这会降低每个人的速度。 如果问题再次出现，提出“五个为什么”自然将要求我们继续深入调查。如果问题没有再发生，一个小时的投入也不算浪费。 自动速度调节器 “五个为什么”的方法可以用做天然的速度调节器。你的问题越多，对解决方案的投入也越多。 对新创企业而言，团队运行得太快是一种危险，为了争取时间而牺牲产品质量，会造成疏失错漏。 “五个为什么”可以防止这种情况，让团队找准他们的最佳步速。 当“五个为什么”的使用方式背离正轨时，我把它称做“五大罪状”。 沮丧的团队成员没有不断去问为什么，了解问题出在哪里，而是开始相互指责，把错误归咎他人。 如果不能用“五个为什么”来发现并解决问题的话，经理人和员工会掉进“五大罪状”的陷阱中，用以排解愤懑沮丧，指责同事造成了系统性的失败。 尽管面对错误时，人会本能地认为问题出在他人的部门、认知或个性中，“五个为什么”的目标就是要帮我们看到事情的客观真相，认识到一些固有问题不是因人们无能，而是由糟糕的流程引起的，从而做出相应的补救措施。 我推荐几种避免落入“五大罪状”的方法。 第一种方法是在分析根本原因的时候，让每个受问题影响的人齐聚一堂。 这个会议应该包括所有发现或诊断出问题的人员，如果可能的话，要让接到电话的客服代表也出席。 还要召集所有尝试修复问题的人员，以及与子系统或产品功能相关的人员。 如果问题已经上升到公司的高级管理层，那么涉及此事件的决策者也应该到场。 要有效运作“五个为什么”，必须遵守一些规则。比如，“五个为什么”需要一个双方彼此信任和权力下放的环境。 我让团队采用这样两条简单的原则： 对第一次错误要容忍。 不允许同样的错误发生两次。 第一条原则鼓励人们要对错误怀有同情心，特别是他人的错误。要记得，大多数错误是由系统缺陷造成的，而不是人们没有能力。 第二条原则要让团队成员开始在防范措施上按比例投入。 你得准备好“五个为什么”会揭开企业组织中一些令人不快的真相，特别是在刚开始的时候。它会要求你投入防范措施，花费你本来打算用在新产品、新功能开发上的时间和金钱。 压力之下，团队成员可能觉得他们不能把时间浪费在分析问题的根本原因上，尽管长期来说，这将给他们换来更多时间。 这个流程有时候还会转变成“五大罪状”。 在这些十字路口，有一位足够高层的人员在场是非常重要的，他必须坚持遵守流程，执行相关建议，当反对意见激化时扮演仲裁人的角色。 也就是说，建立一个自适应组织需要管理领导者的发起和支持。 很多新创企业中一些独当一面的人来参加我的工作室活动，他们非常希望在实践中运用“五个为什么”。 我会提醒他们，如果没有他们的经理或团队领导的支持，要慎用此法。如果你处于这种情况，就要小心从事。 你可能得不到全体团队成员的支持，一起使用真正“五个为什么”的探究方式，但你总是可以在自己的工作范围内，使用简化的双原则方法。 每当错误出现，问一下自己：我该如何防止再次陷入如此境地？ 软件开发团队多年来使用的标准“瀑布模型”开发方法。它是一种线性的、大批量系统，它的成功仰赖恰如其分的预测和计划。 换言之，它完全不适应现今快速改变的商业环境。 格里格打算用以下四条原则来改变QuickBooks的开发流程： 较小的团队。 把角色相同的成员组成的大团队，改编成角色不同的员工组成的较小团队，从而确保每个成员全身心地投入。 实现较短的开发周期。 更及时的顾客反馈，以测试产品软件是否危及他们的电脑，以及新功能的表现和客户体验如何。 激励团队作出迅速、大胆的决定。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:14","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第十二章 创新 传统观念认为当公司变得更大时，丧失创新、创意和增长的能力在所难免。我认为这种想法是错的。 新创企业成长之际，创业者可以建立一个组织，学习如何在满足现有顾客要求与寻找新顾客之间求得平衡，管理现有产品线，开发新的业务模式——并且同时执行所有这些任务。 我还相信，即使是大型成熟企业，只要他们愿意调整管理哲学，他们也可以转换到我所说的“管理组合”的思考方式。 如何培养颠覆式创新 成功的创新团队必须有正确的架构以取得佳绩。由创业资本支持或靠自己创业的公司作为独立的小型公司，天生具备这些组织结构上的特性。 而企业内部团队则需要高级管理层的支持来创建这些架构。 在我的经验中，不管是新创企业还是企业内部的新创团队，都要具备三种架构特征：稀少但稳定的资源，开发业务的独立权，以及与绩效挂钩的个人利益。 这些组织架构的要求和成熟企业部门中的架构要求不同。要记住，组织架构只是先决条件，它不能保证成功。但是，错误的架构却几乎一定会导致失败。 稀少但稳定的资源 通常情况下，预算总是留有富余空间，应付这种可能发生的情况。 新创企业则不同：预算太多和预算太少一样有害，无数互联网公司的失败都能证明这一点。 而且新创企业对中途的预算改变非常敏感。对独立的创企业来说，突然之间手头没了10%现金的情况非常罕见。 要知道独立的新创企业几乎没有犯错的权利，这种变化在大多数情况下会成为一个致命打击。 这样看来，运作新创企业比运作传统部门更容易，但也更困难：他们需要的资本总量小得多，但这些资本必须绝对安全，要避免受其他因素的影响。 独立的开发权 新创企业需要完全的自主权，在他们有限的工作范围内开发并推销新产品。他们计划和执行相关实验不需要过多的批准流程。 我强烈建议新创企业的团队实行彻底的跨部门运作，也就是说，公司中每个职能部门全职参与早期产品的开发和发布。他们必须能开发并推出真正实用的产品和服务，而不仅仅只是产品原型。 传统开发过程中部门间的层层传递和审批延长了开发—测量—认知的反馈循环，妨碍了团队学习和个人责任制的落实。而新创企业则需要随时保持绝对“最小化”的状态。 与绩效挂钩的个人利益 创业者应该把企业的绩效成果与个人的利益挂钩。 在独立的新创企业中，一般会采用优先认股或其他形式的股本所有权作为奖励。 而在必须使用奖金体系的情况下，那么最高奖金就应该和长期表现最好的创新项目相连。 个人利益不一定要表现在财务上。 这对有些组织机构尤其重要，特别是非营利机构和政府部门，它们的创新与财务目的并不相连。 在这种情况下，团队获得个人利益还是有可能的。上级组织必须明确谁是创新者，并确保创新者成功完成新产品后就能得到认可。 举一个相反的例子。 我知道有一家利润极高的科技企业，一向以创新文化著称，但是它开发新产品的过往记录却令人大失所望。公司设有一个内部激励机制，对做出非凡成绩的团队提供大幅度的升职加薪奖励。 但这些奖励是由高级管理层颁发的，没有人知道它的根据是什么。没有客观标准让团队用来自我衡量，预测中这个六合彩的可能。 大家对是否能长期拥有自己的创新项目缺乏信心。因此开发团队很少有动力真正去冒险，而是把精力集中在有可能获得高级管理层批准的项目上。 事实上，大型企业内部的创新者应该把创业工作看做一条可行的职业之路。 能够使用精益创业方法领导团队的经理人，就该有一个简单明确的“创业企业家”角色，作为他们名片上的头衔，不一定非要离开公司去施展才能，也不一定非要假装适应成熟的职能部门中死板的层级制度。 总之，这些创业企业家应该通过创新核算体系承担起责任，并得到相应的升职和奖励。 当企业创业者在创新沙盒中培育了一个产品之后，必须重新整合到上级组织机构中。新的产品终究需要一支更大的团队将其拓展、商品化并扩大规模。 这个团队在一开始将需要由沙盒中工作的产品创新者继续领导。 而这正是这个流程中的积极部分，它让创新者有机会用他们在原来沙盒中掌握的新工作风格，训练新的团队成员。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:15","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"第十三章 尾声 在进行精益创业咨询和巡回讲演的时候，我不断听到来自大大小小公司的员工的相同信息。 在每个行业中，我们都看到无数失败的产品发布、构思糟糕的项目，以及大批量的死亡螺旋。 我认为这样滥用人们的时间是一种罪过，白白浪费了人类的创造力和潜力。 所有这些浪费中有多少比例是可以避免的？ 我想，会比我们目前认识到的还多得多。 我遇到的大多数人相信，至少在他们的行业中，项目的失败完全是咎由自取：项目本身就大有风险，市场状况无法预计，“大公司的人”天生缺乏创造力。 有些人认为只要我们把每件事都放慢，使用更加谨慎的流程，执行数量较少但质量更高的项目，就可以降低失败率。 也有人相信，某些人生来就知道该做哪些正确的事。如果我们能拥有足够多的远见之士和大师，我们的问题就能解决了。 19世纪，在人们知道什么是现代管理之前，这些“解决之道”也曾一度被视为是最先进的方式。 要在一个节奏越发快速的世界中采用这样古老的方式是不可行的，因此对项目和业务失败的指责常常被推到高级管理层身上，而他们总被要求做些不可能的事情。 另一种情况是，把这种责备指向财务投资人或公开市场，批评他们过于强调快速解决问题的方法和短期结果。 我们总有太多责怪的话要说，但能指引领导者和投资者的理论却太少。 作为一项运动，精益创业必须避免教条主义和僵化的思想体系。 我们必须避免把科学描摹成公式的样子，或意味着在工作中缺乏人性。 事实上，科学是人类最有创造力的追求之一。我相信把它推广到创业活动中，将开启人类潜能中的无尽宝藏。 如果企业中所有员工都具备了精益创业的组织超能力，那么整个企业机构看上去会怎样？ 至少每个人都会坚持必须把所有假设清楚表达出来，并且对其严格测试，这既不是拖延之计也不是没事找事，而是出于真心想要找出每个项目愿景的基本真理所在。 我们不会把时间浪费在要做质量保证者还是冒失牛仔的无休止争论上； 我们认为在追求顾客长期利益的过程中，质量和速度应该齐头并进。 我们会加速测试愿景，而不会抛弃它。我们会设法消除浪费，不在半空中搭建美丽城堡，而是以敏捷的技巧开发高质量产品，实现突破性的商业成果。 对于失败和挫折，我们会以诚实和学习的态度应对，而不是反诉和指责。 不仅如此，减速的冲动、增加批次数量，以及沉溺于预防的魔咒都是我们要极力避免的，我们会绕过那些不产生学习认知的多余工作，从而加快速度。 我们致力于创建新的机构，肩负长期使命，创造可持续的价值，并且把世界变得更美好。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:2:16","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"总结 精益创业颠覆了传统创业模式，提出了一套科学的方法论来应对新创企业面临的极端不确定性。 其核心理念基于五项原则：创业者无处不在、创业即管理、经证实的认知、“开发-测量-认知”循环，以及创新核算。 这种方法强调通过科学实验而非直觉预测来验证商业假设，将创业从艺术转化为可学习、可复制的科学过程。 在实践层面，精益创业建立了“开发-测量-认知”的核心反馈循环，通过 MVP 最小化可行产品Minimum Viable Product 快速进入市场获取真实用户反馈，运用创新核算评估进展，并基于数据做出转型或坚持的关键决策。 这个过程配合三种增长引擎「黏着式、病毒式、付费式」和小批量工作方式，让新创企业能够以最小成本、最短时间获得最大化的经证实认知，避免传统创业中常见的时间和资源浪费。 精益创业不仅是一种产品开发方法，更是构建自适应组织的管理哲学。它通过“五个为什么”等工具建立持续学习机制，强调质量与速度并重，培养创新文化。无论是初创公司还是大型企业，都可以运用这套方法论来提高创新成功率，减少项目失败，最终创造可持续的商业价值。 在现代产品开发实践中，精益创业还能够与设计思维、敏捷开发等先进方法论形成有机结合： 设计思维用于深入理解用户、明确需求并激发创意； 精益创业用于将创意转化为可行的商业模式； 敏捷开发则通过快速迭代和持续交付，将想法高效落地为产品。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:3:0","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"思考 读完《精益创业》，我对创业有了全新的认知。正如书中所说，“经证实的认知”才是新创企业最宝贵的资产，而不是那些基于假设的精美计划和复杂功能。这让我深刻理解到，创业本质上是一个在极端不确定性中不断学习和试验的过程。 我将继续充实自己的商业认知，同时保持开放的心态去拥抱失败与变化。希望在未来的某个时刻，我可以将这些学到的知识用于自己的创业冒险。 ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:4:0","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["读书笔记"],"content":"参考 https://slidemodel.com/lean-startup-methodology/ ","date":"2025-09-08","objectID":"/2025/09/notes-from-the-lean-startup/:5:0","tags":["商业","创业"],"title":"读书笔记之《精益创业：新创企业的成长思维》","uri":"/2025/09/notes-from-the-lean-startup/"},{"categories":["技能矩阵"],"content":"以更契合工程师习惯的 YAML 文档格式，展示约定式提交、分支管理模型、语义化版本与基于源代码的版本等最佳实践。","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"以更契合工程师习惯的 YAML 文档格式，展示约定式提交、分支管理模型、语义化版本与基于源代码的版本等最佳实践。 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:0:0","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"约定式提交 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:1:0","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"规范 网站: - https://www.conventionalcommits.org - https://github.com/commitizen/conventional-commit-types/blob/master/index.json conventional_commits: feat: new feature fix: bug fix docs: documentation only changes style: changes that do not affect the meaning of the code, e.g., white-space, formatting, missing semi-colons refactor: code change that neither fixes a bug nor adds a feature perf: code change that improves performance test: adding missing tests or correcting existing tests build: changes that affect the build system or external dependencies, e.g., gulp, broccoli, npm ci: changes to our CI configuration files and scripts, e.g., Travis, Circle, BrowserStack, SauceLabs chore: other changes that do not modify src or test files revert: reverts a previous commit 约定式提交: feat: 新功能(feature) fix: 修复bug docs: 文档(documents) style: 格式, 不影响代码运行 refactor: 重构 perf: 优化(performance), 提升性能或体验 test: 测试 build: 构建或依赖项更新 ci: 持续集成(continuous integration) chore: 其它杂务 revert: 撤销之前的提交 structure: \u003ctype\u003e(scope): \u003csubject\u003e 动词别名: fix: - resolve - handle - correct - prevent - update ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:1:1","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"示例 With description and breaking change footer feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files With ! to draw attention to breaking change feat!: send an email to the customer when a product is shipped With scope and ! to draw attention to breaking change feat(api)!: send an email to the customer when a product is shipped With both ! and BREAKING CHANGE footer chore!: drop support for Node 6 BREAKING CHANGE: use JavaScript features not available in Node 6. With no body docs: correct spelling of CHANGELOG With scope feat(lang): add Polish language With multi-paragraph body and multiple footers fix: prevent racing of requests Introduce a request id and a reference to latest request. Dismiss incoming responses other than from latest request. Remove timeouts which were used to mitigate the racing issue but are obsolete now. Reviewed-by: Z Refs: #123 With a footer that references the commit SHA that is being reverted revert: feat(lang): add Polish language This reverts commit 667ecc1654a317a13331b17617d973392f415f02. ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:1:2","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"分支管理模型 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:2:0","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"Gitflow Gitflow: 网站: - https://nvie.com/posts/a-successful-git-branching-model/ - https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow 描述: 传统工作流, 适合有明确发布周期和多人协作的项目 分支: feature/*: 功能开发分支, 例如 feature/login, feature/JIRA-985-login bugfix/*: 修复已知的非紧急缺陷, 例如 bugfix/sso-auth, bugfix/JIRA-211-sso-auth develop: 开发集成分支, 合并多个 feature 和 bugfix release/*: 候选发布分支, 例如 release/1.6.2 hotfix/*: 生产环境热修复, 例如 hotfix/1.6.3 main: 生产环境稳定分支 流程: # 开发流程: feature/bugfix 从 develop 拉取, 完成后合并回 develop, 再通过 release 合并到 main, 并在 main 上打 tag 标记版本 develop → feature/bugfix → develop → release → main → tag(vX.Y.Z)[推荐] # 紧急修复: hotfix 从 main 拉取, 完成后合并回 develop 和 main, 并在 main 上打 tag 标记版本 main → hotfix ↘ develop ↘ main → tag(vX.Y.Z)[推荐] 优点: - 明确的分支角色, 适合版本化管理 - 方便管理发布和修复流程 缺点: - 分支较多, CI/CD 流程复杂 - 不适合高频率持续交付 扩展(可选): 分支: user/\u003cname\u003e/*: 个人分支, 例如 user/john/login, user/alice/sso-auth env/*: 环境分支, 例如 env/uat, env/prod 说明: - user/\u003cname\u003e/* 仅用于个人实验或独立开发, 不保证会合并, 避免污染正式功能分支 - env/* 仅用于跟踪各环境当前部署版本, 不直接开发代码, 更新通过合并提交 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:2:1","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"GitHub Flow GitHubFlow: 网站: https://docs.github.com/en/get-started/using-github/github-flow 描述: 简化流程, 适合持续交付和小团队 分支: main: 唯一的长期分支, 始终保持可发布状态, 是否发布由团队策略决定 feature/*: 从 main 派生的功能分支 流程: # 功能开发: feature 从 main 拉取, 完成后通过 Pull/Merge Request 合并回 main # 发布版本: 在 main 上打 tag 标记可发布版本 main → feature → main → tag(vX.Y.Z)[推荐] 优点: - 流程简单, 适合快速迭代 - 结合 Pull/Merge Request 审核 缺点: - 缺少稳定的开发集成分支 - 版本控制需要依赖 tag ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:2:2","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"Trunk Based Development TrunkBasedDevelopment: 网站: https://cn.trunkbaseddevelopment.com 描述: 主干开发, 极简工作流, 适合持续集成/每日构建 分支: main: 唯一的主干分支 (Trunk) feature/*: 非常短期的功能分支, 快速合并回 main 流程: # 功能开发: feature 从 main 拉取, 短周期开发后快速合并回 main # 持续发布: 每次 main 合并都可触发构建和发布 main → feature → main → tag(vX.Y.Z)[可选] 说明: - 由于合并频繁, 通常使用 `datetime + commit_hash` 作为版本号, 例如 2025.07.30.1906.3f9a7c1d - 语义化版本 (vX.Y.Z) 仅用于重要的里程碑 tag 优点: - 支持高频率发布, 自动化 CI/CD 友好 - 避免长期分支造成代码漂移(长期未合并导致代码差异累积) 缺点: - 需要强大的测试和自动化保障 - 对团队协作要求高 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:2:3","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"GitLab Flow GitLabFlow: 网站: https://about.gitlab.com/blog/gitlab-flow-duo/ 描述: GitLab 官方推荐的工作流, 结合主干开发与环境分支, 适合多环境 CI/CD 部署 分支: feature/*: 功能开发分支, 从 main 派生, 完成后通过 Merge Request 合并回 main main: 主分支, 用于集成和测试, 始终保持可合并状态 staging: 预发布环境分支, 用于上线前验证 production: 生产环境分支, 跟踪当前线上部署版本 流程: # 功能开发: feature 从 main 拉取, 完成后合并回 main # 部署流程: main 合并到 staging 触发预发布, main 合并到 production 触发生产部署 # 可选发布: 在 production 上打 tag 标记生产版本 main → feature → main ↘ staging ↘ production → tag(vX.Y.Z)[推荐] 说明: - staging/production 分支用于跟踪各环境当前部署版本 - 更新环境分支通过合并提交完成, 不直接在这些分支上开发代码 - main 合并到 production 时推荐打 tag 标记正式发布版本 优点: - 支持多环境部署, CI/CD 友好 - 通过环境分支管理发布, 直观跟踪当前部署状态 - 保持 main 分支简洁, 功能通过 Merge Request 控制 缺点: - 需要严格的合并策略和 CI/CD 约定 - 对小型项目可能过于复杂 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:2:4","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"版本管理 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:3:0","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"标签命名 version_label: snapshot: 开发快照 alpha: 内部测试 beta: 公开测试 rc: 候选发布 # Release Candidate release: 正式发布 hotfix: 紧急修复 ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:3:1","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"语义化版本 语义化版本: 英文: Semantic Versioning 网站: https://semver.org 格式: MAJOR.MINOR.PATCH 初始化开发版本: 0.1.0 说明: MAJOR: 描述: 主版本号 场景: 不兼容的修改 示例: 0.12.8 → 1.0.0 规则: 主版本号 +1, 次版本号和修订号归零 MINOR: 描述: 次版本号 场景: 向下兼容的功能性新增 示例: 1.5.1 → 1.6.0 规则: 次版本号 +1, 修订号归零 PATCH: 描述: 修订号 场景: 向下兼容的问题修正 示例: 1.6.1 → 1.6.2 规则: 修订号 +1 预发布版本: 格式: MAJOR.MINOR.PATCH-\u003clabel\u003e[.\u003cidentifier\u003e] 标签: alpha: 内部测试版 beta: 公开测试版 rc: 候选发布版 # Release Candidate 示例: - 1.12.6-alpha - 1.12.6-beta - 1.12.6-rc.1 - 1.12.6-rc.2 元数据: 格式: MAJOR.MINOR.PATCH[-\u003clabel\u003e]+\u003cmetadata\u003e 示例: - 1.12.6-alpha+3f9a7c1d - 1.12.7+20250730 版本演进路线示例: | 0.1.0 → 0.1.1 → ... ↓ ... ↓ 0.12.8 ↓ 1.0.0 ↓ ... ↓ 1.5.1 ↓ 1.6.0 → 1.6.1 → 1.6.2 ↓ ... ↓ 1.12.6-alpha(1.12.6-alpha+3f9a7c1d) → 1.12.6-beta → 1.12.6-rc.1 → 1.12.6-rc.2 ↓ 1.12.7(1.12.7+20250730) ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:3:2","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"基于源代码的版本 基于源代码的版本: 英文: Source-based Versioning 格式: \u003cbranch\u003e-YYYYMMDDHHmm-\u003ccommit_hash\u003e 说明: branch: 分支 YYYYMMDDHHmm: 构建日期时间 commit_hash: 短哈希值(前8位字符) 示例: - feature-login-202507281802-c4d8b21e - develop-202507291752-b17e5a9f - main-202507301906-3f9a7c1d 优点: - 直接显示构建来源分支 - 每个版本唯一且可追溯到具体提交 - 适合自动化持续集成 扩展规则: 带发布标签: 格式: \u003cbranch\u003e-YYYYMMDDHHmm-\u003ccommit_hash\u003e-\u003clabel\u003e 标签: alpha: 内部测试版 beta: 公开测试版 rc: 候选发布版 # Release Candidate 示例: - main-202507301906-3f9a7c1d-alpha ","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:3:3","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["技能矩阵"],"content":"GitLab CI 版本号生成 # .gitlab-ci.magic-version.yml variables: TAG_PREFIX: \"v\" # 定义 tag 前缀, 用于去掉类似 v1.2.3 的 v # 基于 tag 的版本 version_tag: stage: magic_version rules: - if: $CI_COMMIT_TAG =~ /^.+/ # 仅在有 tag 的情况下运行, /^.+/ 即只要有一个非空字符就返回 true script: # 取当前 tag, 去掉 TAG_PREFIX 前缀, 例如 v1.2.3 -\u003e 1.2.3 - export MAGIC_VERSION=${CI_COMMIT_TAG#*\"$TAG_PREFIX\"} # 把版本号写入 build.env, 供后续 Job 使用 - echo \"MAGIC_VERSION=$MAGIC_VERSION\" \u003e\u003e build.env artifacts: reports: dotenv: build.env # 把 build.env 导出为 dotenv, 供后续 Job 使用 $MAGIC_VERSION 变量 # 基于 分支 的版本 version_branch: stage: magic_version rules: - if: $CI_COMMIT_BRANCH # 当基于 分支 构建时运行 script: # 生成日期时间, 格式为 YYYYMMDDHHmm, 例如 202507301906 - VERSION_DATETIME=$(date +'%Y%m%d%H%M') # 拼接版本号：\u003cbranch\u003e-YYYYMMDDHHmm-\u003ccommit_hash\u003e # 例如：main-202507301906-3f9a7c1d # 变量说明： # $CI_COMMIT_REF_SLUG -\u003e 分支名 slug, 例如 feature-login / main # $CI_COMMIT_SHORT_SHA -\u003e 当前提交的短哈希值(前8位字符) - export MAGIC_VERSION=${CI_COMMIT_REF_SLUG}-${VERSION_DATETIME}-${CI_COMMIT_SHORT_SHA} # 把版本号写入 build.env, 供后续 Job 使用 - echo \"MAGIC_VERSION=$MAGIC_VERSION\" \u003e\u003e build.env artifacts: reports: dotenv: build.env # 把 build.env 导出为 dotenv, 供后续 Job 使用 $MAGIC_VERSION 变量","date":"2025-07-30","objectID":"/2025/07/commit-branching-versioning-best-practices/:3:4","tags":["Git","DevOps","CICD"],"title":"代码提交+分支管理+版本管理最佳实践","uri":"/2025/07/commit-branching-versioning-best-practices/"},{"categories":["读书笔记"],"content":"参考: https://glossary.cncf.io/zh-cn/","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"参考: https://glossary.cncf.io/zh-cn/ ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:0:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🧱 架构与应用 单体应用 Monolithic Apps: 单体应用在一个简单可部署的程序中包含所有的功能 将一个应用程序转变成微服务会增加其运营开销 —— 有更多的东西需要测试、部署和保持运行 在产品生命周期的早期，推迟这种复杂性并建立一个单体应用，直到产品被确定为成功，可能是有利的 精心设计的单体可以坚持精益原则，因为它是启动和运行应用程序的最简单方式 当单体应用的商业价值被证明是成功的，它可以被分解成微服务 在证明有价值之前，制作一个基于微服务的应用程序可能是过早地花费了工程努力 如果应用程序没有产生任何价值，这些努力就会被浪费掉 微服务 Microservices: 将功能分离成不同的微服务，使它们更容易独立部署、更新和扩展 分布式应用 Distributed Apps: 功能被分解成多个较小的独立部分，能够在多个地方同时运行，可以容忍更多的故障，并具备单个应用程序实例所不具备的伸缩功能 分布式系统 Distributed Systems: 通过网络连接的自主计算元素的集合，在用户看来是一个单一的连贯系统 客户端-服务器架构 Client Server Architecture: 在远程服务器中实现应用程序逻辑，可以在不需要修改客户端的逻辑的情况下进行应用程序更新 松耦合架构 Loosely Coupled Architecture: 应用程序的各个组件彼此独立构建，每个组件都是为了执行特定功能而构建的，以便被任意数量的其他服务使用 紧耦合架构 Tightly Coupled Architecture: 许多应用程序组件相互依赖，一个组件的更改可能会影响其他组件，可以加快最初的开发周期 事件驱动架构 Event Driven Architecture: 事件是对应用程序状态的任何更改，定义事件生产者（源）和消费者（接收者），中心事件枢纽（如Kafka）保证事件的流动 无状态应用 Stateless Apps: 状态是指应用需要存储以便其按设计运行的任何数据，不保存任何客户端会话状态数据，每个会话都像第一次一样执行，响应不依赖于前一个会话的数据（如搜索引擎） 有状态应用 Stateful Apps: 客户端会话状态临时保存在内存中，或持久存储在本地磁盘或数据库系统中 垂直伸缩 Vertical Scaling: 通过在工作负载增加时向单个节点添加CPU和内存来增加系统容量的技术 水平伸缩 Horizontal Scaling: 通过添加更多节点来增加系统容量的技术，而不是向单个节点添加更多计算资源 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:1:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🚢 容器与编排 容器 Container: 提供了一种隔离的运行环境，使不同应用程序能够在独立的文件系统、网络和进程空间等独立运行环境中运行 容器镜像 Container Image: 不可改变的静态文件，包含应用程序与它运行时的依赖 容器化 Containerization: 将应用程序与它运行时的依赖捆绑到容器镜像中的过程 容器编排 Container Orchestration: 容器编排工具像乐队指挥一样指挥众多容器（乐手），确保每个容器各行其是 Kubernetes: 通常缩写为K8S，流行的开源容器编排工具 Pod: 在Kubernetes环境中最基本的可部署单元，可以容纳一个或多个容器 集群 Cluster: 一组计算机或应用程序，通过网络连接，为一个共同的目标一起工作，消除了单点故障 节点 Nodes: 一台能与其他计算机（或节点）协同工作以完成一个共同任务的计算机 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:2:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🧩 服务治理 应用程序接口 API Application Programming Interface: 计算机程序之间明确的、可理解的交互和共享信息的一种方式 API网关 API Gateway: 通过聚合多个应用程序的API，实现一站式管理的工具 负载均衡器 Load Balancer.: 充当流量代理，在多个服务器之间分配网络流量，提高流量高峰时应用的可靠性 服务 Service: 具体定义依场景而异，微服务架构中通常指可独立部署的功能模块 服务代理 Service Proxy: 作为\"中间人\"拦截和转发服务流量，收集流量信息并应用规则，实现流量管理和安全控制 服务发现 Service Discovery: 持续跟踪网络中的应用程序，提供一个公共的地方来查找和识别不同服务，以便应用程序可以找到彼此 服务网格 Service Mesh: 统一管理微服务间通信，增加可靠性、可观测性和安全功能，不需要改变代码 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:3:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"☁️ 服务模型 云计算 Cloud Computing: 通过互联网按需提供计算资源（如CPU、网络和磁盘功能），分为私有云和公有云，具体取决于云基础设施是专门用于某个组织还是开放共享的公共服务 基础设施即服务 IaaS Infrastructure-as-a-Service: 云提供商提供物理或虚拟的计算、存储和网络资源，使用按需按量的计费模式 平台即服务 PaaS Platform-as-a-Service: 以完全自动化的方式为应用程序开发人员提供通用基础设施，使开发人员可以将更多的时间和精力用于编写应用程序代码 容器即服务 CaaS Container-as-a-Service: 无需管理容器运行的底层基础设施，使容器部署和管理自动化 数据库即服务 DBaaS Database-as-a-Service: 云服务商管理数据库的配置、备份、补丁、升级、监控等，开发人员仅使用数据库 软件即服务 SaaS Software-as-a-Service: 软件由供应商安装、维护、升级和确保安全，并处理扩缩、可用性和容量问题，用户通过互联网使用软件，采用按需付费的模式 Serverless: 云原生开发模式，开发人员构建和运行应用程序时无需管理服务器，云提供商处理配置、维护和伸缩服务器基础架构的日常工作 托管服务 Managed Services: 由第三方负责运维和管理的软件服务，用户仅专注核心业务，降低运维负担 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:4:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🛠 DevOps 开发运维 DevOps: 融合开发与运维，强调协作、自动化和持续交付、持续部署，让团队拥有应用程序的整个生命周期，可以最大限度地减少交接，提高代码质量，降低部署到生产中的风险 持续集成 CI Continuous Integration: 定期集成代码变更，自动化测试，提升协作效率和代码质量 持续交付 CD Continuous Delivery: 将代码的变化被自动部署到验收环境中，确保软件在部署到生产环境之前得到充分测试 持续部署 CD Continuous Deployment: 自动部署测试环境的代码更改到生产环境，比持续交付更进了一步 金丝雀部署 Canary Deployment: 逐步将流量从旧版本切换到新版本，先小范围试用，发现问题可快速回滚，降低上线风险，源于矿工使用金丝雀对有害气体敏感的特性安全预警 蓝绿部署 Blue-Green Deployment: 同时维护两套环境，“蓝\"为当前生产环境，“绿\"为新生产环境，通过快速切换生产流量实现零停机部署，适用于更新时缺乏向后兼容而必须整体同步改变的场景 自动伸缩 Auto Scaling: 系统根据需求自动增加或减少资源，提升弹性和效率 自愈 Self Healing: 无需任何人为干预就能从故障中恢复 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:5:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🔐 可靠性与安全 网站可靠性工程 SRE Site Reliability Engineering: 结合运营和软件工程的学科，DevOps专注于将代码投入生产环境，SRE确保在生产环境中运行的代码正常工作 混沌工程 CE Chaos Engineering: 在生产环境主动注入故障，验证系统弹性和自愈能力，建立对系统承受动荡和意外情况时能力的信心 安全混沌工程 Security Chaos Engineering: 在分布式系统上执行主动安全实验，建立对系统抵御动荡和恶意条件能力的信心 云原生安全 Cloud Native Security: 将安全性融入云原生应用全生命周期，适应云原生环境的特殊性，即快速的代码更改和高度短暂的基础设施 零信任架构 Zero Trust Architecture: 永不信任，永远验证，一种完全消除信任的IT系统设计和实施方法 防火墙 Firewall: 基于特定规则过滤网络流量的系统，防火墙可以是硬件、软件，或者是两者的组合 传输层安全性协议 TLS Transport Layer Security: 旨在为网络通信提供更高安全性的协议，避免数据监听和篡改 双向传输层安全协议 mTLS mutual Transport Layer Security: 确保客户端和服务器之间的双向流量都是安全和可信的，没有未经授权的一方监听或冒充合法请求 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:6:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🔄 基础设施 基础设施即代码 IaC Infrastructure-as-Code: 用代码定义和管理基础设施，实现自动化，可复现和版本控制，减少人为配置错误 策略即代码 PaC Policy-as-Code: 用机器可读文件定义和自动执行策略，提升合规性和自动化，减少人为错误 不可变基础设施 Immutable Infrastructure: 一旦部署就无法变更的计算机基础设施（例如虚拟机、容器、网络设备），可以更轻松地识别和减轻安全风险 裸机 Bare Metal Machine: 物理服务器直接运行操作系统和应用，无虚拟化层，资源独享，性能最优 数据中心 Data Center: 专为容纳服务器设计的建筑或设施，保障计算资源安全，稳定和高效运行 边缘计算 Ddge Computing: 将计算和存储资源从中心转移到数据源附近，提升实时性和效率，减少延迟 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:7:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🧠 系统特性 可伸缩性 Scalability: 系统可通过增加节点或资源轻松扩展容量，满足不断增长的业务需求 可移植性 Portability: 软件可在不同操作系统或云环境间运行，减少对特定平台的依赖，便于迁移和复用 可观测性 Observability: 通过收集和分析系统信息，洞察系统的状态并采取修正措施 可靠性 Reliability: 系统对故障的响应能力，能在组件出错时继续运行 幂等性 Idempotence: 无论执行多少次，都会得到相同的结果，如果参数相同，一个幂等操作就不会影响它调用的应用程序 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:8:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"📁 开发与协作 版本控制 Version Control: 持续记录单个文件或一组文件变化的系统，可帮助开发人员快速行动并保持效率，同时存储更改记录并提供解决冲突的工具 敏捷软件开发 Agile Software Development: 强调迭代开发和团队自组织，持续交付价值，快速响应变化，适应复杂需求 调试 Debugging: 故障是导致不正确或不符合预期结果的缺陷或问题，软件开发是一项复杂的活动，在不引入故障的情况下编写代码几乎是不可能的，调试是查找并解决故障以获得预期结果的过程或活动 左移 Shift Left: 在软件开发生命周期的早期阶段（将软件开发的生命周期视为一个从左到右执行的阶段线）实施测试、安全或其他开发实践，提前发现和解决问题，降低后期修复成本 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:9:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["读书笔记"],"content":"🧬 云原生理念 云原生应用程序 Cloud Native Apps: 专门设计用于利用云计算创新能力的应用程序，可轻松地与云架构集成，充分利用云的资源和可伸缩性功能 云原生技术 Cloud Native Tech: 也称为云原生技术栈，使组织能够在公共云、私有云和混合云等现代动态环境中构建和运行可伸缩的应用程序，充分利用云计算的优势 多租户模式 Multitenancy: 共享同一个软件，为每个租户提供一个隔离（工作数据、设置、凭证列表等）的环境，同时为多个租户提供服务 ","date":"2025-07-28","objectID":"/2025/07/cloud-native-glossary-lite/:10:0","tags":["云原生"],"title":"云原生词汇表之精简版","uri":"/2025/07/cloud-native-glossary-lite/"},{"categories":["技能矩阵"],"content":"设计一个具有关键检查和独立外部监控的健康检查端点。","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"设计一个具有关键检查和独立外部监控的健康检查端点。 技巧 “Talk is cheap. Show me the code.” - Linus Torvalds 代码分享: https://github.com/mcsrainbow/mock-healthz-metrics ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:0:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"✨ 特性 /healthz: 返回码: 健康 200, 异常 500 输出: 纯文本, JSON /metrics: Prometheus 指标 两级健康检查: 🔴 关键检查 影响整体健康状态: 🔌 数据库连接: 核心依赖，必须健康 ⚙️ 配置服务: 核心依赖，必须健康 🔁 内部 API billing, usage: 依赖上游服务DB + Config，上游失败时跳过 🟡 外部检查 独立: 🌍 外部 API alipay, sms: 独立运行，不影响整体健康状态 依赖项具有内置错误概率和超时模拟 完全兼容 Kubernetes 探针和 Prometheus 抓取 依赖链: 数据库 + 配置服务 → 内部 API → 整体健康状态 外部 API → 仅独立监控 ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:1:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"🚀 开始使用 ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:2:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"1. 安装依赖 pip install bottle ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:2:1","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"2. 运行脚本 python mock-healthz-metrics.py Service endpoints available: Healthcheck (Text): http://0.0.0.0:8080/healthz Healthcheck (JSON): http://0.0.0.0:8080/healthz?format=json Prometheus metrics: http://0.0.0.0:8080/metrics ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:2:2","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"✅ 健康检查 ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:3:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"纯文本 http://127.0.0.1:8080/healthz http://127.0.0.1:8080/healthz?format=text 健康状态 HEALTH CHECK SNAPSHOT [2025-07-18 11:03:15] ------------------------------------------- CHECK STATUS MESSAGE ----- CRITICAL ----- db_connection ✔ Database is connected config_service ✔ Config service is reachable internal_api/billing ✔ internal_api/billing OK (392ms) internal_api/usage ✔ internal_api/usage OK (348ms) ----- EXTERNAL ----- external_api/alipay ✔ external_api/alipay OK (308ms) external_api/sms ✖ external_api/sms timed out 异常状态 HEALTH CHECK SNAPSHOT [2025-07-18 11:05:27] ------------------------------------------- CHECK STATUS MESSAGE ----- CRITICAL ----- db_connection ✔ Database is connected config_service ✔ Config service is reachable internal_api/billing ✔ internal_api/billing OK (253ms) internal_api/usage ✖ internal_api/usage returned error ----- EXTERNAL ----- external_api/alipay ✔ external_api/alipay OK (101ms) external_api/sms ✔ external_api/sms OK (183ms) ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:3:1","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"JSON 格式 http://127.0.0.1:8080/healthz?format=json 健康状态 { \"status\": \"ok\", \"data\": { \"message\": \"All critical checks passed\", \"snapshot_time\": \"2025-07-18 11:03:15\", \"checks\": { \"critical\": [ { \"name\": \"db_connection\", \"status\": \"ok\", \"message\": \"Database is connected\" }, { \"name\": \"config_service\", \"status\": \"ok\", \"message\": \"Config service is reachable\" }, { \"name\": \"internal_api/billing\", \"status\": \"ok\", \"message\": \"internal_api/billing OK (392ms)\" }, { \"name\": \"internal_api/usage\", \"status\": \"ok\", \"message\": \"internal_api/usage OK (348ms)\" } ], \"external\": [ { \"name\": \"external_api/alipay\", \"status\": \"ok\", \"message\": \"external_api/alipay OK (308ms)\" }, { \"name\": \"external_api/sms\", \"status\": \"error\", \"message\": \"external_api/sms timed out\" } ] } } } 异常状态 { \"status\": \"error\", \"data\": { \"message\": \"Some critical checks failed\", \"snapshot_time\": \"2025-07-18 11:05:27\", \"checks\": { \"critical\": [ { \"name\": \"db_connection\", \"status\": \"ok\", \"message\": \"Database is connected\" }, { \"name\": \"config_service\", \"status\": \"ok\", \"message\": \"Config service is reachable\" }, { \"name\": \"internal_api/billing\", \"status\": \"ok\", \"message\": \"internal_api/billing OK (253ms)\" }, { \"name\": \"internal_api/usage\", \"status\": \"error\", \"message\": \"internal_api/usage returned error\" } ], \"external\": [ { \"name\": \"external_api/alipay\", \"status\": \"ok\", \"message\": \"external_api/alipay OK (101ms)\" }, { \"name\": \"external_api/sms\", \"status\": \"ok\", \"message\": \"external_api/sms OK (183ms)\" } ] } } } ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:3:2","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"📈 Prometheus http://127.0.0.1:8080/metrics ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:4:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"配置 scrape_configs: - job_name: 'mock-healthz-metrics' static_configs: - targets: ['127.0.0.1:8080'] 默认抓取 http://127.0.0.1:8080/metrics 链接。 ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:4:1","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"指标 健康状态 # HELP healthcheck_status Health check status (1=ok,0=error) # TYPE healthcheck_status gauge healthcheck_status{check=\"db_connection\",type=\"critical\"} 1 healthcheck_status{check=\"config_service\",type=\"critical\"} 1 healthcheck_status{check=\"internal_api/billing\",type=\"critical\"} 1 healthcheck_status{check=\"internal_api/usage\",type=\"critical\"} 1 healthcheck_status{check=\"external_api/alipay\",type=\"external\"} 1 healthcheck_status{check=\"external_api/sms\",type=\"external\"} 0 异常状态 # HELP healthcheck_status Health check status (1=ok,0=error) # TYPE healthcheck_status gauge healthcheck_status{check=\"db_connection\",type=\"critical\"} 1 healthcheck_status{check=\"config_service\",type=\"critical\"} 1 healthcheck_status{check=\"internal_api/billing\",type=\"critical\"} 1 healthcheck_status{check=\"internal_api/usage\",type=\"critical\"} 0 healthcheck_status{check=\"external_api/alipay\",type=\"external\"} 1 healthcheck_status{check=\"external_api/sms\",type=\"external\"} 1 ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:4:2","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"🐳 Kubernetes 对于 Kubernetes livenessProbe 和 readinessProbe: ❯ curl -I http://127.0.0.1:8080/healthz HTTP/1.0 200 OK Date: Fri, 18 Jul 2025 03:03:31 GMT Server: WSGIServer/0.2 CPython/3.11.11 Content-Type: text/plain Content-Length: 444 ❯ curl -I http://127.0.0.1:8080/healthz HTTP/1.0 500 Internal Server Error Date: Fri, 18 Jul 2025 03:05:36 GMT Server: WSGIServer/0.2 CPython/3.11.11 Content-Type: text/plain Content-Length: 438 livenessProbe: httpGet: path: /healthz port: 8080 initialDelaySeconds: 10 periodSeconds: 30 failureThreshold: 5 timeoutSeconds: 5 readinessProbe: httpGet: path: /healthz port: 8080 initialDelaySeconds: 5 periodSeconds: 20 failureThreshold: 3 successThreshold: 2 timeoutSeconds: 2 关于更详细的探针设计，请参考文章: Kubernetes 容器健康检查和优雅终止。 ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:5:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["技能矩阵"],"content":"📌 注意事项 此脚本使用随机化逻辑来模拟服务不稳定性 对于生产环境使用，请用真实的健康检查实现替换模拟逻辑（例如，数据库 ping、HTTP 客户端调用等） ","date":"2025-07-18","objectID":"/2025/07/health-check-endpoint-healthz-design-practice/:6:0","tags":["Kubernetes"],"title":"健康检查端点 /healthz 设计实践","uri":"/2025/07/health-check-endpoint-healthz-design-practice/"},{"categories":["生活感悟"],"content":"良好的工作思维倾向有助于养成专业化的行为。","date":"2025-01-21","objectID":"/2025/01/work-mindsets/","tags":["成长","自我管理"],"title":"工作思维倾向","uri":"/2025/01/work-mindsets/"},{"categories":["生活感悟"],"content":"良好的工作思维倾向有助于养成专业化的行为。 关注原理 关注事物背后的“为什么”，不仅仅是“如何做”。 有助于提升解决问题的能力，使决策更具前瞻性和适应性。 韧性兜底 所有数据都有备份，所有变更都有回滚方案。 可以减少意外故障带来的风险，避免造成不可挽回的损失。 工单跟踪 所有任务都通过工单跟踪，不仅仅依赖邮件或聊天工具沟通。 可以保持工作有序、透明，便于后续跟进。 自动化提效 用工具和脚本自动化重复性任务，不依赖手动操作。 可以节省时间、提高效率、减少错误。 测试先行 每次变更都必须先经过测试。 经验不可靠，信任不可靠，自信心也不可靠。 简明表达 在记录和展示内容时，优先使用数据指标、截图、流程图、架构图、思维导图和电子表格。 清晰的视觉表达比冗长的文字描述更高效、更易理解。 知识沉淀 将积累的经验、学到的知识、经历的教训都整理成文档。 可以避免重复踩坑，使工作更加高效、透明，提升团队整体能力。 团队协作 通过合理的团队分工与协作，避免过度依赖个体，高效完成看似不可能的任务。 一个人也许走得更快, 但一群人可以走得更远。 ","date":"2025-01-21","objectID":"/2025/01/work-mindsets/:0:0","tags":["成长","自我管理"],"title":"工作思维倾向","uri":"/2025/01/work-mindsets/"},{"categories":["技能矩阵"],"content":"通过 YAML(Manifests)、Kustomize 和 Helm 各自实现一套相同配置的 Kubernetes 多环境多应用编排，可以快速的上手 Kustomize 和 Helm，并了解到它们之间的差异。","date":"2024-09-10","objectID":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/","tags":["Kubernetes","Kustomize","Helm"],"title":"Kubernetes 多环境多应用编排实践","uri":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/"},{"categories":["技能矩阵"],"content":"通过 YAML(Manifests)、Kustomize 和 Helm 各自实现一套相同配置的 Kubernetes 多环境多应用编排，可以快速的上手 Kustomize 和 Helm，并了解到它们之间的差异。 技巧 “Talk is cheap. Show me the code.” - Linus Torvalds 代码分享: https://github.com/mcsrainbow/k8s-apps ","date":"2024-09-10","objectID":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/:0:0","tags":["Kubernetes","Kustomize","Helm"],"title":"Kubernetes 多环境多应用编排实践","uri":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/"},{"categories":["技能矩阵"],"content":"Manifests 原生 YAML(Manifests) 是最直观和最简单的 Kubernetes 资源配置方式，对于多环境多应用的编排方式也简单粗暴，直接创建不同环境名称的目录，将资源按照公共和应用维度分别写入不同的 YAML 文件即可。 manifests/apps-overlays ├── development │ ├── bu-project-all.yaml │ ├── bu-project-apiproxy.yaml │ └── bu-project-webfront.yaml ├── production │ ├── bu-project-all.yaml │ ├── bu-project-apiproxy.yaml │ └── bu-project-webfront.yaml └── staging ├── bu-project-all.yaml ├── bu-project-apiproxy.yaml └── bu-project-webfront.yaml 优点: 最直观，不同环境和应用之间配置无耦合，配置失误时影响范围小； 缺点: 重复的配置代码较多，修改配置参数时不方便，需要通过文本方式查找和替换。 ","date":"2024-09-10","objectID":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/:1:0","tags":["Kubernetes","Kustomize","Helm"],"title":"Kubernetes 多环境多应用编排实践","uri":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/"},{"categories":["技能矩阵"],"content":"Kustomize Kustomize 是介于 YAML 和 Helm 之间的资源配置方式，在兼容 YAML 的基础上通过内置的插件实现配置代码的复用和参数的修改。 Kustomize 默认读取 kustomization.yaml 文件中的配置，可通过引用不同目录下的 kustomization.yaml 文件实现分层设计。 kustomize/apps-overlays ├── base │ ├── apps │ │ ├── apiproxy │ │ │ ├── deployment.yaml │ │ │ ├── ingress.yaml │ │ │ ├── kustomization.yaml │ │ │ └── service.yaml │ │ └── webfront │ │ ├── deployment.yaml │ │ ├── ingress.yaml │ │ ├── kustomization.yaml │ │ └── service.yaml │ ├── files │ │ └── dockerconfigjson.encrypted │ ├── kustomization.yaml │ └── patches │ └── imagePullSecrets.yaml └── overlays ├── development │ ├── files │ │ └── nginx.conf │ └── kustomization.yaml ├── production │ ├── files │ │ └── nginx.conf │ └── kustomization.yaml └── staging ├── files │ └── nginx.conf └── kustomization.yaml 通过 kustomize build 命令可以预览渲染出的原生 YAML。 cd kustomize/apps-overlays kustomize build overlays/development kustomize build overlays/staging kustomize build overlays/production 优点: 兼容原生 YAML，可复用配置代码，可通过内置的插件读取文件生成 Secret 和 ConfigMap，以及修改参数（例如: 增加标签、增加资源名称前缀、修改 CPU 和内存等）； 缺点: 复用配置代码后也导致了耦合，配置失误时影响范围增大，内置的插件功能有限，无法高度自由地复用配置代码和修改参数。 Kustomize 内置插件: https://kubectl.docs.kubernetes.io/zh/guides/plugins/builtins/ ","date":"2024-09-10","objectID":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/:2:0","tags":["Kubernetes","Kustomize","Helm"],"title":"Kubernetes 多环境多应用编排实践","uri":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/"},{"categories":["技能矩阵"],"content":"Helm Helm 是 Kubernetes 包管理器和部署工具，类似 Linux 上的 配置管理工具 Ansible + 包管理器 Yum。 Helm 默认读取 values.yaml 文件中定义的变量，和 templates 目录下的模板文件、函数和代码块，可以高度自由地复用代码、修改参数和读取文件生成配置。 Helm 可以创建不同环境的 values 文件，将默认参数和公共参数放到 values.yaml 文件中，通过不同环境的 values 文件中的参数补充和覆盖，实现多环境多应用编排。 helm/apps-overlays ├── Chart.yaml ├── files │ ├── dockerconfigjson.encrypted │ └── nginx.conf ├── templates │ ├── apiproxy │ │ ├── _helpers.tpl │ │ ├── configmap.yaml │ │ ├── deployment.yaml │ │ ├── ingress.yaml │ │ └── service.yaml │ ├── secret.yaml │ └── webfront │ ├── _helpers.tpl │ ├── deployment.yaml │ ├── ingress.yaml │ └── service.yaml ├── values │ ├── development.yaml │ ├── production.yaml │ └── staging.yaml └── values.yaml 通过 helm template 命令可以预览渲染出的原生 YAML。 cd helm/apps-overlays helm template . -f values/development.yaml helm template . -f values/staging.yaml helm template . -f values/production.yaml 优点: 模板功能强大，可以高度自由地复用代码、修改参数和读取文件生成配置，可将配置按应用打包发布到 Helm Repo 中进行包管理； 缺点: 高度自由的定制能力也导致了高耦合，模板化的配置代码不够直观，配置失误时影响范围增大且调试难度增加。 Helm 模板函数和流水线: https://helm.sh/zh/docs/chart_template_guide/functions_and_pipelines/ ","date":"2024-09-10","objectID":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/:3:0","tags":["Kubernetes","Kustomize","Helm"],"title":"Kubernetes 多环境多应用编排实践","uri":"/2024/09/kubernetes-multi-environment-and-multi-application-orchestration-practice/"},{"categories":["技能矩阵"],"content":"在 Kubernetes 中启用容器健康检查和优雅终止，并结合应用自身特点进行配置，可以提升生产环境的应用稳定性，减少上线事故和误报。","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["技能矩阵"],"content":"在 Kubernetes 中启用容器健康检查和优雅终止，并结合应用自身特点进行配置，可以提升生产环境的应用稳定性，减少上线事故和误报。 ","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/:0:0","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["技能矩阵"],"content":"配置项 相关配置项解释如下: terminationGracePeriodSeconds: 全局配置项，Pod 终止的宽限期，必须大于 lifecycle.preStop，如果 Pod 中的容器在达到宽限期时仍未停止，Pod 将被强制终止 lifecycle.preStop: 在容器停止之前执行命令的钩子，可用于推迟容器停止时间，确保容器有更多的剩余时间处理用户尚未完成的请求 startupProbe: 检查容器的启动状态，可用于为容器内的应用启动提供更多的准备时间，如果检查失败，kubelet 会杀死容器，然后再次启动容器 livenessProbe: 检查容器是否存活，如果检查失败，kubelet 会杀死容器，然后再次启动容器 readinessProbe: 检查容器是否已经准备好接受流量，只有通过检查，kubelet 才会将 Pod 加入到 Service 的负载均衡池 ","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/:1:0","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["技能矩阵"],"content":"实践 启用 容器健康检查 和 优雅终止 的 Kubernetes Deployment 实践配置示例: --- apiVersion: apps/v1 kind: Deployment metadata: namespace: default name: myapp spec: replicas: 1 selector: matchLabels: app: myapp template: metadata: labels: app: myapp spec: # 默认值: 30 terminationGracePeriodSeconds: 120 imagePullSecrets: - name: mysecret containers: - name: myapp image: registry.example.com/myapp:1.0 imagePullPolicy: IfNotPresent ports: - containerPort: 8080 startupProbe: tcpSocket: port: 8080 # 默认值: 0 initialDelaySeconds: 10 # 默认值: 10 # 固定间隔, 不会等待上一次探测完成 periodSeconds: 10 # 默认值: 3 failureThreshold: 30 # 默认值: 1 # 不能更改, 工作原理决定了只能设置为 1 successThreshold: 1 # 默认值: 1 timeoutSeconds: 2 livenessProbe: tcpSocket: port: 8080 # 默认值: 0 initialDelaySeconds: 10 # 默认值: 10 # 固定间隔, 不会等待上一次探测完成 periodSeconds: 30 # 默认值: 3 failureThreshold: 5 # 默认值: 1 # 不能更改, 工作原理决定了只能设置为 1 successThreshold: 1 # 默认值: 1 timeoutSeconds: 5 readinessProbe: tcpSocket: port: 8080 # 默认值: 0 initialDelaySeconds: 5 # 默认值: 10 # 固定间隔, 不会等待上一次探测完成 periodSeconds: 20 # 默认值: 3 failureThreshold: 3 # 默认值: 1 # 设置为 2, 避免不稳定的新容器替换正常的旧容器 successThreshold: 2 # 默认值: 1 timeoutSeconds: 2 lifecycle: # 容器停止时间推迟 60 秒 preStop: exec: command: [\"/bin/sh\", \"-c\", \"sleep 60\"] env: - name: TZ value: Asia/Shanghai resources: requests: cpu: 500m memory: 1Gi limits: cpu: 500m memory: 1Gi Kubernetes 默认配置: 启动: 无 上线: 最短: 0 秒 异常判定: 21 秒 ( failureThreshold(3) - 1 ) * periodSeconds(10) + timeoutSeconds(1) 就绪: 最短: 0 秒 异常判定: 21 秒 ( failureThreshold(3) - 1 ) * periodSeconds(10) + timeoutSeconds(1) 恢复判定: 10 秒 periodSeconds(10) 终止: 最短: 0 秒 最长: 30 秒 terminationGracePeriodSeconds(30) 实践配置: 启动: 最短: 10 秒 initialDelaySeconds(10) 异常判定: 302 秒 initialDelaySeconds(10) + ( failureThreshold(30) - 1 ) * periodSeconds(10) + timeoutSeconds(2) 注意: 工作原理决定了 startupProbe.successThreshold 只能设置为 1 上线: 最短: 20 秒 启动(10) + initialDelaySeconds(10) 异常判定(首次): 135 秒 initialDelaySeconds(10) + ( failureThreshold(5) - 1 ) * periodSeconds(30) + timeoutSeconds(5) 异常判定(持续): 125 秒 ( failureThreshold(5) - 1 ) * periodSeconds(30) + timeoutSeconds(5) 注意: 工作原理决定了 livenessProbe.successThreshold 只能设置为 1 就绪: 最短: 35 秒 启动(10) + initialDelaySeconds(5) + ( readinessProbe.successThreshold(2) - 1 ) * periodSeconds(20) 异常判定(首次): 47 秒 initialDelaySeconds(5) + ( failureThreshold(3) - 1 ) * periodSeconds(20) + timeoutSeconds(2) 异常判定(持续): 42 秒 ( failureThreshold(3) - 1 ) * periodSeconds(20) + timeoutSeconds(2) 恢复判定: 40 秒 successThreshold(2) * periodSeconds(20) 终止: 最短 60 秒 sleep 60 最长 120 秒 terminationGracePeriodSeconds(120) 与 Kubernetes 默认配置相比，以上实践配置进行了如下优化: 启动: 推迟 10 秒，异常判定需要 302 秒，检查失败会重启容器 上线: 推迟 20 秒，异常判定需要 125 秒，检查失败会重启容器 就绪: 推迟 35 秒，健康检查 2 次，避免不稳定的新容器替换正常的旧容器，异常判定需要 42 秒，检查失败会阻止入站请求，恢复判定需要 40 秒，检查成功会允许入站请求 终止: 立即阻止旧容器的入站请求，推迟 60 秒终止旧容器，确保旧容器有更多的剩余时间处理用户尚未完成的请求，避免用户尚未完成的请求被异常中断 ","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/:2:0","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["技能矩阵"],"content":"优化 方案如下： 对于 Web 类应用，通过应用代码判断自身业务状态，生成 /healthz 健康检查页面 将基于 tcpSocket 的健康检查升级为基于 httpGet，通过获取健康检查页面的返回结果进行精准判断 详细的健康检查端点 /healthz 设计请参考: 健康检查端点 /healthz 设计实践。 启用 /healthz 健康检查页面的 Kubernetes Deployment 实践配置示例: --- apiVersion: apps/v1 kind: Deployment metadata: name: myapp namespace: default spec: replicas: 1 selector: matchLabels: app: myapp template: metadata: labels: app: myapp spec: # 默认值: 30 terminationGracePeriodSeconds: 120 imagePullSecrets: - name: mysecret containers: - name: myapp image: registry.example.com/myapp:1.0 imagePullPolicy: IfNotPresent ports: - containerPort: 8080 startupProbe: tcpSocket: port: 8080 # 默认值: 0 initialDelaySeconds: 10 # 默认值: 10 # 固定间隔, 不会等待上一次探测完成 periodSeconds: 10 # 默认值: 3 failureThreshold: 30 # 默认值: 1 # 不能更改, 工作原理决定了只能设置为 1 successThreshold: 1 # 默认值: 1 timeoutSeconds: 2 livenessProbe: httpGet: path: /healthz port: 8080 # 默认值: 0 initialDelaySeconds: 10 # 默认值: 10 # 固定间隔, 不会等待上一次探测完成 periodSeconds: 30 # 默认值: 3 failureThreshold: 5 # 默认值: 1 # 不能更改, 工作原理决定了只能设置为 1 successThreshold: 1 # 默认值: 1 timeoutSeconds: 5 readinessProbe: httpGet: path: /healthz port: 8080 # 默认值: 0 initialDelaySeconds: 5 # 默认值: 10 # 固定间隔, 不会等待上一次探测完成 periodSeconds: 20 # 默认值: 3 failureThreshold: 3 # 默认值: 1 # 设置为 2, 避免不稳定的新容器替换正常的旧容器 successThreshold: 2 # 默认值: 1 timeoutSeconds: 2 lifecycle: # 容器停止时间推迟 60 秒 preStop: exec: command: [\"/bin/sh\", \"-c\", \"sleep 60\"] env: - name: TZ value: Asia/Shanghai resources: requests: cpu: 500m memory: 1Gi limits: cpu: 500m memory: 1Gi ","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/:3:0","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["技能矩阵"],"content":"优雅中断 容器健康检查可以确保 Pod 处于健康的运行状态，容器优雅终止可以让 Pod 延迟下线。 通常，用户的请求需要先经过 Ingress 转发，但 Ingress 可能默认不会等待 Pod 的 Terminating 状态完成，就提前将 Pod 从后端移除了，例如阿里云 Kubernetes 容器服务。 这种情况下，为了避免用户尚未完成的请求被 Ingress 异常中断，还需要在 Ingress 上配置与 lifecycle.preStop 匹配的优雅中断超时时间。 这样，在优雅中断时间结束前，Ingress 才不会主动关闭与 Pod 的连接。 阿里云 Kubernetes 优雅中断配置示例： --- apiVersion: v1 kind: Service metadata: namespace: default name: myapp-svc spec: selector: app: myapp clusterIP: None ports: - port: 8080 targetPort: 8080 protocol: TCP --- apiVersion: networking.k8s.io/v1 kind: Ingress metadata: namespace: default name: myapp-ingress annotations: # 开启优雅中断 alb.ingress.kubernetes.io/connection-drain-enabled: \"true\" # 优雅中断超时时间，与 lifecycle.preStop 匹配 alb.ingress.kubernetes.io/connection-drain-timeout: \"60\" spec: ingressClassName: alb rules: - host: example.com http: paths: - path: /myapp pathType: Prefix backend: service: name: myapp-svc port: number: 8080 ","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/:4:0","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["技能矩阵"],"content":"参考 https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/ https://help.aliyun.com/zh/ack/serverless-kubernetes/user-guide/advanced-alb-ingress-settings#c5bf22507239t ","date":"2024-07-03","objectID":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/:5:0","tags":["Kubernetes"],"title":"Kubernetes 容器健康检查和优雅终止","uri":"/2024/07/kubernetes-container-healthcheck-and-graceful-termination/"},{"categories":["读书笔记"],"content":"B=MAP，即「行为=动机+能力+提示」。把目标切分成多个细小的习惯，让看似不可能实现的目标变得容易。","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"B=MAP，即「行为=动机+能力+提示」。把目标切分成多个细小的习惯，让看似不可能实现的目标变得容易。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:0:0","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"序 B.J.福格博士是斯坦福大学行为设计实验室创始人，行为设计学创始人，深入研究人类行为超过20年。 在这本书中，福格博士亲自拆解了他提出的福格行为模型，揭示了驱动人类所有行为的3个关键要素，即行为=动机+能力+提示，解析了每一个要素在驱动人类行为中的重要作用，提供了激发每一个要素以更好地推动行为改变的有效方法。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:1:0","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:0","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"0. 前言 人为什么会抱怨，或者自我指责？因为没有达到自身期望，又无力改变现状。 B=MAP，即「行为=动机+能力+提示」。 我非常欣赏的提议是“珍珠习惯”。 我们了解，珍珠的形成是因为蚌受到异物（砂粒、寄生虫）侵入的刺激，然后分泌珍珠质，一层一层地把刺激物包裹起来，即成珍珠。 如果诗意地来说，每一颗美丽的珍珠，其实都是蚌包裹好的痛苦与刺激。人生在世，大大小小的烦恼和刺激，没人能躲开，关键就在于你会如何对待它们。 福格教授的“珍珠习惯”提议非常智慧。以他自己的一个小实践为例，福格教授睡眠不好，经常被半夜启动的空调吵醒。 与其每次被吵醒后都烦躁地抱怨，不如设计出一个习惯——每次被吵醒后，就冥想放松。 于是，他收获了一个明确的冥想放松时间段。最后，他甚至觉得被吵醒然后冥想、放松，还挺幸福。 对于那些确定会发生的刺激，建立一个习惯来“包裹”它，久而久之，也许你会得到一串生活的珍珠。 天下难事必作于易，天下大事必作于细。 简要概括一下福格博士的习惯养成方法，我们或许可以发现5大要点： 第一、要自信，不要自责。 那具体需要怎么做呢？一是停止自我批评；二是把你的愿望拆解成微行为；三是将每一次错误当成是一种新发现，并利用它们不断改进。 第二、从小改变着手，​“简单”才能促进改变。 第三、通过行为设计来养成好习惯。 第四、在行为设计中要把握行为改变的三要素，即动机、能力和提示，而行为发生于三要素同时出现的时候。 动机是做出行为的欲望，能力是去做某个行为的执行能力，而提示则是提醒你做出行为的信号。 动机越强，就越有可能做出行为；行为越容易做到，就越有可能成为习惯；没有提示，任何行为都不会发生。 因此，在改变行为的时候，需要检查确认三要素是否齐备。 第五、及时庆祝是感受成功并将这种感受融入新习惯的最佳技巧，也是提升某种行为再次发生的概率的一种积极体验。 而庆祝的原理就是，​“成功的动能”会让成功带来成功。 我明白了“再大的困难也要从小事做起”这个道理，这就像是要读完一本很厚的书，翻开书只读一页，就已经朝着成功迈进了一步，值得庆祝。 如果急躁地要求自己在某个时间段内读完，那也许没几个人能坚持下来。 一路走来，我逐渐掌握了化繁为简的工作方法，十年如一日的坚持，最终迭代为促使我不断前进的能力，而且我在事业和家庭中都能运用自如。 无论我们处于多么困难的处境中，都能通过构建一些小行为来让自己变得更好。 并没有研究结果显示重复能够创造习惯，这两者不是因果关系，而是相关关系。 微习惯的精髓——让你通过感觉良好而不是感觉糟糕来实现改变。 行为设计的价值小即是大。即使是小事，也有可能带来巨大的改变。 如果你曾尝试过做出某种改变却未见成效，你可能就会认为是改变太困难，或是你自己缺乏动机而无法成功。 这两种想法都不对。问题在于你所采用的方法本身，而不在于你。 要想设计出成功的习惯并改变自身行为，你需要做到3件事： 停止自我批评； 把你的愿望拆解成微行为； 将每一次错误当成是一种新发现，并利用它们不断改进。 这个过程不依赖意志力，也不需要你用奖励来激励自己，更不会要求你必须在多少天内做到哪些事。 那些老方法都不符合习惯的运作方式，所以它们都不是促成改变的有效方法，而且它们往往会让我们感觉很糟糕。 即使我本来就是一名行为科学家，我也必须去学习如何养成某种生活习惯。这并不是自然而然就能学会的，而是一个需要刻意练习的过程。 通过练习，我将弱点变成了优势。 我发现能带来持久改变的只有3件事：经历顿悟、改变环境、从细微之处着手改变自身习惯。 创建积极习惯是起点，而创建微小的积极习惯则是培养更大习惯的途径。 从小改变着手的5个原因： 原因1：可以利用碎片时间 压力导致了一种匮乏心态——时间永远都不够用，没有多余的时间让我们用来培养新的积极习惯，于是我们拒绝改变。 每天运动30分钟？每晚做一顿健康营养的晚餐？每天写心情日记？别想了。谁……有……这个……时间！ 原因2：可以立刻开始改变 从小改变着手对你和你的生活来说都是最务实的。而且，这样能让你立刻开始。 无论你是正身处人生中的绝望旋涡，还是除了压力过大之外，其他方面都算幸运，这个方法都能够适合你。 我用微习惯策略开启美好一天的简单配方： 在我「醒来后双脚踩到地板上时」，我会「说出“今天又是没好的一天这句话”」。为了让大脑牢记这个习惯，我要立即：「微笑」。 如果你在进行毛伊习惯的训练时，觉得“今天不会是美好的一天”，我建议你仍然要把“今天又是美好的一天”这句话说出来。 我发现这对提振心情非常有帮助，即使在我心情最糟糕的时候也是如此。 请把毛伊习惯想象成每天早上3秒钟即可完成的简单练习。它能让你了解到开始改变是非常容易的，而且能帮助你学会行为改变最重要的技能——感受成功。 原因3：不需要担心会失败 原因4：一样能吃掉“大鲸鱼” 吃掉“大鲸鱼”的最佳方法就是： 一次咬一小口。抛开“要么做到最好，要么干脆不做”的想法，开始从小事做起。 一个小举动或一次一小口，一开始可能显得微不足道，但却可以让你获得充足的动力去迎接更大的挑战，加速取得进展。没多久，你就已经“吃掉了整条鲸鱼”。 原因5：不需要依赖动机或意志力也能做到 如你所知，人们普遍认为行动需要依靠动机和意志力，总是在寻找可以增强并维持它们的方法。但问题是，动机和意志力天生善变，一点儿都不可靠。 播下微习惯的种子： 在使用微习惯策略时，无论多么小的成功，都可以庆祝一番。这样做能让我们充分利用大脑的神经化学反应，将有意识的动作快速转化为无意识的习惯。 感受成功有助于固化新习惯，还能激励我们做更多事情。我每星期都会在微习惯研究数据中观察到这些成果。 不仅如此，使用微习惯策略，你还可以学会如何在生活中获得更好的感觉。鼓励自己而非打击自己，拥有这种能力才能让改变的种子深深地扎根。 她知道微习惯能改变一切，所以每天早上醒来，双脚踩在地板上后，她会立刻说出这句话：“今天又是美好的一天！” Anchor 锚点，Behavior 行为，Celebration 庆祝 打开行为奥秘的钥匙，A B C 三步骤： A. 锚点时刻提醒你去执行新的微行为的关键时点。例如，某个日常习惯（刷牙）或某件必然发生的事情（电话铃声响起）。 B. 新的微行为锚点出现后立刻去执行的微行为。这是新习惯的简化版，比如用牙线清洁一颗牙齿或做两个俯卧撑。 C. 即时庆祝完成新的微行为后要立刻庆祝。任何能带来积极情绪的事情都可以，比如说出“我很棒”之类的话。 只要知道了如何调整人类行为的组成要素，就可以着手开始应对生活中的任何挑战。 这意味着，你不会再有停滞不前的感觉，意味着你可以成为你想要成为的那种人。 学习微习惯策略的最佳方式就是立刻开始行动。 全身心投入，边做边学。在做练习的过程中，不要过于紧张或焦虑，要会变通，并学会乐在其中！ 提醒自己，成效最佳的改变源自感觉良好。 如果让我从本书中挑选一个我希望你欣然接受的观念，那一定是：人们在感觉良好而不是感觉难过的状态下进行改变，效果最佳。 为此，我为你设计了这个练习。 ❶ 将这句话写在一张小纸片上：“我在感觉良好的状态下进行改变，效果最佳。” ❷ 将纸片贴在浴室的镜子上，或其他你经常能看见的地方。 ❸ 经常念这句话。 ❹ 留意这句话对你和你身边人的生活产生的影响。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:1","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"1. 福格行为模型，影响行为的要素只有3个 当动机（motivation）、能力（ability）和提示（prompt）同时出现的时候，行为就会发生。 动机是做出行为的欲望，能力是去做某个行为的执行能力，而提示则是提醒你做出行为的信号。 凯蒂是一个很有才干的高管，管理着数十名员工和1000万美元的预算，她的工作效率和她的好习惯息息相关。 凯蒂每天下班前都会整理办公桌，这是她的固定习惯。结束当天工作并关闭电脑后，她会把文件摆放整齐，并把便利贴规整为“待办”、“已完成”和“处理中”3类。 整理好办公桌，把椅子也推进去之后，凯蒂才会离开办公室。次日上班看到办公桌时，凯蒂都会有种精力充沛的感觉。 这一切都在提醒她自己已经做好准备开启新的一天。我问她这个习惯是不是她有意培养的，她说不是，她只是在某一天突然就开始这样做了。 清理办公桌和狂刷手机，我们把凯蒂的这两个习惯结合起来分析一下。 两种行为，让凯蒂产生了两种截然不同的感受。 一种行为让凯蒂感觉良好，也让她如愿以偿，变得更加高效。整理这个行为已经变成一种自动自发的习惯，她根本无须多想就能做到。 相比之下，刷手机的习惯虽然令她当时很尽兴，但事后却会让她感到自责。在床上刷手机让她很抓狂，但她还是控制不住自己。 在动机很强时，人们无须依靠提示就能采取行动，还能做出更困难的行为。 行为越容易，就越有可能成为习惯。 既有动机又有能力，才能让行为落到行动线上方，而这两大要素可以像队友那样密切配合。 没有提示，任何行为都不会发生。 如果没有得到提示，那么无论你的动机和能力有多么强烈都没用。要么得到行动的提示，要么得到不行动的提示。 凯蒂刷手机的动机实在太过强烈，因此她也是在尝试过多种不同方式之后，才最终找到了一个双管齐下的办法： 到了晚上就把手机放到厨房，在卧室里放一个老式闹钟。在她和手机之间增加的这段空间距离使得刷手机的行为更难实施，而放置老式闹钟则一并消除了手机的提示。 有没有一种冷静又有趣的方式可以让这个小男孩少踢我的座椅呢？ 我决定使用互惠法则。别人送礼物给你时，你自然而然会想到要以某种方式予以回报。 这种动力有助于人与人之间友好相处。这是我们可以优雅地影响他人动机的一种方式。我决定试一试。 我的电脑包里有一个黄色的笑脸按钮。我从包里掏出了按钮，拿给这名小乘客和他的父母看。 “嗨，”我说，“我想把这个笑脸按钮送给你。我希望它能帮助你记住在今天的飞行过程中不要踢我的座椅。” 小孩说道：“好的！”他的父母则对我报以真诚的微笑。 这次飞行很顺利，没有人再踢我的座椅，我还结交了几位朋友。各自领完行李后，我们挥手道别。 我们真的不必自责。 万事开头难，建立一整套积极习惯的第一步，是要先决定具体想培养哪些习惯。 不过，在此之前，你得先分析清楚多年来一直困扰你的原因是什么。 既然你正在看这本书，那就说明你很有可能有想改变却未能改变的事情。那么，是什么阻碍了你做出改变呢？ 是动机猴子（Motivation Monkey）。动机猴子诓骗我们设下不合理的目标。 有时候它确实也能帮助我们发挥出高水平，但在我们最需要它的时候，却往往不起作用。 动机通常都不可靠。 在涉及自我提升类事务，比如节食、健身、创意项目、报税、创业、找工作、策划会议时，也是一样。动机猴子的陷阱到处都是，还都很隐蔽。 动机的确是行为的驱动要素之一，但问题在于，动机往往是易变的。 动机就像是一位酒肉朋友，你可以和它一起玩乐，却不能指望它会去机场接你。 你必须了解动机的角色和限制，然后挑选出那些不太依赖这位善变的“朋友”的行为。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:2","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"2. 要素1，动机，找到实现愿望的黄金行为 明明拥有动机却还是无法改变的5个原因： 动机很复杂 动机是完成某个特定行为的欲望。 在我的研究中，我专注于3个动机来源： 你自己（你想要的）； 你希望通过采取行动可以得到的利益或受到的惩罚（胡萝卜加大棒）； 以及你的周遭环境（例如，所有朋友都在做这件事）。 事实证明，人物（Person）、行动（Action）和情境（Context）是理解人类行为的基础。 动机很复杂，有时候它们看起来就像是在进行一场心理拔河比赛。 动机冲上顶峰后会迅速回落 强烈的动机非常适合去做一次就能完成的真正困难的事情。 然而，高水平动机是很难维持的。 在行为设计领域，我们将动机短期激增的现象称为动机波浪。 你以前一定有过这样的经历：你的动机冲到顶峰，随后急转直下。 或许你会责备自己没能坚持下来，但这不怪你，这就是动机在生活中的运作方式。 每年都有上亿人参加在线课程，但绝大多数人会半途而废。 很多研究表明，最终结业人数只有不到10%。学生们一开始大都兴致勃勃、专心致志，但之后他们的动机就会慢慢减弱。 即使学费不能退还，也不能让他们产生足够的动机来完成课程。这样的事情到处都有。 你陷入了人类思维的常见误区，你高估了未来的动机。即便是自控力极强的人也同样如此。 你并不是愚蠢、轻浮或容易上当受骗，你只是一个普通人。 动机波动十分频繁 将动机用于追逐抽象概念无法产生结果 想要实现愿望的欲望是持久的，它至少不会很快发生变化。 愿望是改变人生的绝佳起点。 拥有梦想和愿望都是好事，宣传健康意识也是好事。但把时间和精力用在激励自己或他人追逐不明确的概念上，则是错误的举动。 仅凭动机无法实现长期改变 在福格行为模型的3个要素中，动机是最不可预测和最不可靠的。 如果你以前只关注动机，那么现在，我希望你能够理解，想获得持久的改变，仅靠动机是不够的，因为你多半无法维持它，也可能无法对它进行可靠的操作或设计。 你要明白，这不是一种性格缺陷，而是人的本性。不要掉进动机猴子的陷阱，你必须想方设法绕开它们。 明确愿望与列出行为集群。 你应该有抱负、有梦想，或者有一个愿望清单。描述你想做的事情，越具体越好。只有知道自己想去哪里，才有可能真正地到达。 人类天生就是梦想家，我们总是怀揣着几个宏伟计划，但也仅此而已，部分原因是善变的动机阻碍了行动的脚步。 愿望是抽象的欲望，比如“想让孩子在学校取得成功”；而成果更容易衡量，比如“第二学期取得‘优’的成绩”。 愿望和成果都可以作为行动的起点，但它们都不是行为。 有个简单的办法可以将行为与愿望和成果区分开来，行为是你现在或在某个特定时刻可以去做的事情。 比如，关掉手机、吃一根胡萝卜、打开一本书读几页。这些是你随时都可以采取的行动。 相比之下，你无法随时实现一个愿望或取得一个成果。比如，你无法突然改善睡眠质量，无法在今天的晚餐后就减掉几斤脂肪。 只有坚持执行正确的具体行为，久而久之，你才能够实现愿望、取得成果。 行为设计的第1步，就是明确愿望（或成果）。 你想做什么？你的梦想是什么？你想取得什么成果？把愿望或成果写下来，无论你写了什么，都有可能会需要修改。 明确愿望有助于对真正想做的事进行有效的行为设计。 也许你以为自己的愿望是“更加专注”，但如果你仔细思考，就会发现你真正的愿望是减轻生活压力，而这比“更加专注”容易得多。 你可以每天散步、玩10分钟乐器，或是少看电视新闻。 在这一步中，你要做的是修改你的愿望或想取得的成果，直到触及你真正想做的事情。 不论是愿望还是预期成果，都可以作为行动的起点，不过我喜欢把愿望作为起点，因为它更灵活，而且没有具体的预期成果那么令人望而生畏。 行为设计的第2步，是探索行为选项。 在这一步中，我们来具体探讨一些细节问题。 选择一个愿望，然后列出一组有助于实现愿望的具体行为。不用做出任何决定或承诺，只探索你有哪些选择，列出的行为越多越好。 第2步的关键是探索，而且要非常乐观。 为了找到尽可能多的行为选项，在挥舞魔法棒时，可以参考下面几种行为类型： 你想做哪些一次就能完成的行为？ 你想养成哪些新习惯？ 你想终止哪些习惯？ 每想出一个行为，都要提醒自己“很好，还有呢”，然后再继续探索。最后，你会得到一个行为集群，包含各种奇怪的、正常的、惊人的行为。这就对了。 如果你还没开始行动，那现在是时候了。在云朵上写下你选出的愿望。然后，想象你有一根魔法棒，它可以帮助你做出任何行为。 把行为愿望改得非常具体（或者说是“简单明了”）之后，就可以进入下一步。 行为设计的第3步，为自己匹配具体行为，并且要务实。 行为匹配的3个误区： 误区1：全凭猜测，毫无章法 误区2：从网上找灵感 误区3：照搬朋友的成功经验 在行为设计领域，我们将那些与你最匹配的行为称为黄金行为(Golden Behavior)。 黄金行为有3个标准：这个行为能让你实现愿望（影响）；你想做出这个行为（动机）；你可以做到这个行为（能力）。 黄金行为可以是单次动作，比如取消电视订阅服务，也许就能让你少看电视； 黄金行为也可以是需要不断重复的习惯，比如在厨房而不是在床边给手机充电。 你很难强迫自己去做不想做的事情，即使能强迫自己一两次，也不大可能养成习惯。 如果我们为自己匹配的行为是我们本来就想做的，而不是我们认为自己应该做的，后面可能就没有必要过分强调动机方法或技巧了。 我们把动机猴子踢出局了。 行为设计强调了这样一个事实：持久改变的关键，在于为自己匹配真心想做的行为。 福格原则1：帮助人们做他们已经想做的事。 通过行为设计匹配的新习惯，是我们在最忙碌、最没动力且状态最不好时，也能做到的行为。 如果你觉得自己在最累的时候也能做到这个行为，那它可能和你非常匹配，甚至是一个黄金行为。 这样做是正确的：只要新习惯没有达到预期效果，你可以随时修改。 愿望可以是抽象的，但实现愿望的行为不行。 行为必须实际、具体，它们是让你攀岩而上的支点和立足点。通往顶峰的路径是独属于你自己的，你要根据峭壁的实际情况来选择合适的行为。 为自己匹配合适的行为是行为设计过程中最关键的步骤，也是探索问题时要重新检视的要点所在。 首先，明确你的愿望或成果； 其次，找到尽可能多的行为选项，并找出与自己相匹配的具体的黄金行为。 这就是行为设计的具体过程，也是用微习惯策略找到最适合的习惯的方式。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:3","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"3. 要素2，能力，让行为简单到随时顺便都能做 行为设计的第4步，尽可能地简化事务。简化的程度很可能会让你觉得不可思议。 人类的天性决定了我们无法长期坚持做令自己痛苦的事情，但如果从容易做的事情开始，就可以做到你想做的几乎任何事。 很多人在改变时仍然抱有不做大事就干脆放弃的心态，因此，他们往往想不到如何从小事着手。 萨里卡从这些小事中获得了改变的能力和信心，固定进行小行为，不断由小及大。 萨里卡终于过上了梦寐以求的规律生活，健康状况也因此大有改善。 现在，她每天自己做饭、打扫厨房、坚持运动、冥想和浇花。萨里卡告诉我，她感受到一种前所未有的活力。 萨里卡说，她最重要的收获不只是建立了健康的生活习惯，以及管理自己的病症的能力，还有这一切带来的自信心。 现在她知道，只要从小事做起，一切改变皆有可能。 萨里卡不仅有了更高的行动力，而且感觉渐入佳境。 动机高涨时，她爬上那习惯的小山丘，发现自己还想去追寻和尝试其他能让生活更加美好的事。 她可以更轻松、更容易地完成一些事情。每当想培养新习惯时，萨里卡都会很兴奋并充满期待，那种不知所措的感觉很少再出现。 这种心态的转变影响了萨里卡的一生。 萨里卡和Instagram创始人之所以能克服改变的阻力、取得成功，是因为他们使用了一种相当可靠的方式：调整能力值，让事情变简单。 这些新技能将帮助你达成长期的大目标。行为设计的力量，让你拥有了极大的改变潜力。无论你追求的是大改变还是小改变，从小事做起都是一个绝佳选择。 “容易做”分析，在能力范围内找到行为。 为了让你完成某个行为，动机和能力必须同时发挥作用并且充足，才能让你的行为位于福格行为模型行动线上方。 我们已经证实，动机是不可靠的，但能力很可靠。 简单改变行为。 你从一开始就应该先问自己这个问题：是什么让这个行为难以做到？ 根据我多年的研究和经验，答案可能涉及以下5个方面，我称之为能力因素： 你是否有足够的时间？你是否有足够的资金？你是否有足够的体力？这个行为是否需要许多创意或脑力？这个行为符合你现在的日程吗？还是需要做出调整？ 这5个因素组成了一条能力链，能力链的强度等于其中最薄弱一环。 从一个很难培养的大习惯开始，是不稳定的，就像一颗根浅枝大的植物，在生活风暴来袭时，很容易就会中断。 然而，一个容易养成的小习惯却像韧性十足的幼苗一样，能够经受住狂风暴雨，因为它的根会扎得更深更牢。 实现“容易做”的3种方式： 提升技能 人们对于自己擅长的事情，总是能很容易做到。提升技能，就能增强能力。 获取工具和资源 如果一种行为会让你感到沮丧，那它就很难成为习惯。 更重要的是，每当她缺乏动机去做自己想做的事情时，她就会问自己：“我该怎样才能让这件事变得更容易？” 让行为变得微小 让行为变得微小是微习惯策略的基石。 这是因为，它是一种相当简单易行的方法，无论动机水平如何，微小的行为都是一个很好的开始。 入门步骤，顾名思义，即朝理想行为迈出的最开始的一个小举动。 你可以这样告诉自己：我不必真的去健步走，我只需要确保每天穿上运动鞋就好了。 穿上运动鞋后，你可能就会改变想法——健步走这件事好像突然变得没那么难了。 大多数时候，穿上运动鞋后，人们都会出门到附近走一走。这是入门步骤让小举动变成更大习惯的一种方式。 不过，我要强调微习惯心态的一个关键点：不要过早地提高标准。不要急着做出更大的行为。 如果你今天不想去健步走，那只穿一穿运动鞋也是可以的。把标准定低一些，有助于坚持下去。 因为无论动机如何波动，你都可以确保自己始终有能力完成它。 “容易做”分析培养习惯“自己做早餐”。 发现问题：是什么让这个行为难以做到？ 问题在于：脑力是萨里卡能力链中的薄弱环节。她对要做什么早餐毫无头绪，柜台上堆满了盘子，所以她没地方再做其他事，这一切对她来说过于复杂，让她不知所措。 解决问题：怎样才能让这个行为变得更容易做到？ 解决方案：通过入门步骤方法，将烦琐的流程拆解成多个具体步骤，萨里卡让做早饭变得更容易了。打开燃气灶很容易做到，这个简单的行为带给她一种成功的感觉，促进了习惯的成长。 现在我们来看看让行为变得微小的第二种方式：缩小规模。 也就是说，你要将理想行为缩小到极小的规模，再开始行动。这可以说是理想行为的缩小版。 让行为变得容易做到不仅有助于它生根发芽、茁壮成长，而且能够帮助你攻坚克难、坚守习惯。 很多微小的植物，只要每天浇几滴水就能存活。对习惯来说，也是如此。 只要足够简单，就能实现改变。 我们常有明知不能拖延却一直推迟的事情。 关于拖延，请牢记一点：对困难的感知和实际的困难程度一样重要。 一件事只要一天没有完成，就会让你多惦记一天，而且会让你感觉它越来越难。 降低行动的门槛，可以让大脑活跃起来。 这个练习分为两部分：练习1侧重于分析，练习2侧重于设计。 练习1：对困难习惯进行分析 ❶ 写下一个你过去尝试养成却没能坚持下来的困难习惯。如果你没有任何想法，那可以分析这个习惯：每天多吃蔬菜。 ❷ 问自己探索型问题：“是什么让这个行为难以做到？”围绕你能力链的薄弱环节进行思考，是因为养成习惯对时间要求太高，还是对资金要求太高了？是对体力或脑力要求太高，还是因为它扰乱了你的日程？ 练习2：通过设计，让习惯容易培养 ❸ 针对能力链上的薄弱环节，问自己突破型问题：“怎样才能让它变得更容易执行？”例如，或许可以考虑减少时间。但注意要确保针对每个薄弱环节都提出多个不同想法。 ❹ 从步骤3的想法中挑选出3个最可行的。 ❺ 想象自己按照这3个想法采取行动，试图让习惯变得更容易执行。注意探索具体操作方式的细节。 加分项：把解决方案付诸实践，看看实际效果如何。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:4","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"4. 要素3，提示，善用锚点时刻让行为立刻发生 没有提示，行为就不会发生，提示就是在对你说：“现在就行动。” 提示是生活中的隐形驱动力。我们每天都会经历数百个提示，却极少留意到它们，而是直接采取行动。 行为设计的第5步：为你想做的行为设计出“对”的提示。这一点很重要。不要把提示交给运气。 在为自己设计提示时要注意，在已经贴满便利贴的电脑屏幕上再贴一张便利贴是没有用的。 生活中常见的3类提示： 人物提示 靠记忆来确保自己每天完成新行为，是不大可能带来持续的改变的。 同样，想以这种方式帮助他人养成习惯也不靠谱。 比如，你希望女儿每天晚上都能好好做作业，而不是玩一小时手机。要她自己记得这件事显然不是最佳策略，因为人物提示并不那么可靠。 情境提示 继续前往情境提示！周围环境中的任何事物都可以作为采取行动的提示：便利贴、App通知、电话铃声、提醒你参加会议的同事。 如果当时我为聚会设置了一个日历提醒，丹尼和我应该就能带着新鲜沙拉准时出现在邻居家。 如果设置的情境提示太多，可能还会产生反效果——令人变得迟钝，无法注意到提示，比如听不到提示铃，或对便利贴视而不见。 这就像是住在火车轨道附近，一开始觉得火车发出的声响难以忍受，后来……哪里有火车？ 我的书房里有一个大白板，上面罗列着许多待办项目，不同项目有不同的颜色标记。 为了管理它带来的视觉和心理上的压力，我用一块布遮住了那些当前不用做的事情，只露出需要当天完成的事情的提示。 我发现遮住其他事情的提示能让我更冷静、更专注。 如果你设置的情境提示没有效果，可能并不是因为你做错了什么，或者缺少动机或意志力。 请不要责怪自己。你只需重新设计提示，找出对你有用的提示。 行动提示 相比于人物提示和情境提示，行动提示的效果是最好的，我还给它取了另一个名字：锚点。 打开内衣抽屉时，我发觉自己每天要做的事情有很多。如果能把新行为与既有习惯结合起来，就能毫不费力地将它们融入生活。 只要一直将新习惯锚定在既有习惯上，就能毫不费力地不断插入新习惯。 这种方法避开了人物提示和情境提示的缺点，因为你不用再依赖自己或他人来提醒你，也不会有过多提示干扰你。 生活中的每一个行为都是提示。这再简单不过了。 利用锚点来设计提示是一种很棒的方式，因为任何人都可以做到，不需要手表或时髦的App就能提示你去完成新习惯。 你自己就能有效地进行，你会发现简单设计技巧能带来多大的转变。“之后”的力量不是魔法，更像是化学反应。 为对的行为安排对的顺序，于是转眼间，一个新习惯水到渠成。 设计“对”的提示的3个步骤： 步骤1，确定你的锚点 锚点必须是生活中一定会发生的事情。 有些人的生活非常规律，充满了可靠的日程；有些人的生活比较随性，不过，无论多么随性，都会存在许多持续的日程，而这足以当作锚点。 早在创建微习惯策略之前那几年，我就在一项研究中发现，人们往往都是早晨时段的日程安排最多。因此，早晨是培养新习惯的最佳时间。 匹配物理位置： 首先，要考虑新习惯发生的地点，找出已经存在于那个地点的锚点行为。 如果你想培养的新习惯是擦拭厨房桌面，那就到厨房里寻找可以当作锚点的既有日程。要注意避免锚点和新习惯在不同地点发生的情况。 我的研究表明，地点不同，极难奏效。在匹配锚点和新习惯时，地点是最需要考虑的因素。 匹配频率： 其次，检视既有日程时，要考虑多久进行一次新习惯。 如果你想每天进行一次，就把它安排在一天一次的锚点行为之后；如果你想每天进行4次，那就把它安排在一天4次的锚点行为之后。 匹配主题/目的： 最后，你可以选择与新习惯拥有相同主题或目的的锚点行为。 如果你喝咖啡是为了提升工作效率，那它很适合用来作为你打开待办事项App的锚点行为。 设计新习惯配方时，不要追求完美。因为如果你不喜欢这个配方，那你随时可以调整它。 步骤2，用试验将锚点与黄金行为联系起来 步骤3，利用“最后动作”优化锚点 “在我吃过早饭之后”就是一个模糊的锚点，它的最后动作是“在我打开洗碗机之后”，把关注点放在这里，效果会更好。 “在我下班回家之后”也是一个模糊的锚点，你可以把它改成“在我把包放下之后”，这样的描述更加具体。 千万别低估了“顺便习惯”的威力。持续的微行为能创造出巨大的改变。 “珍珠习惯”，管理压力与焦虑： 一旦学会设计和重新设计生活中的提示，就能以一种全新的方式来管理人生中的压力与焦虑。 我将这些习惯称为“珍珠习惯”（Pearl Habit），因为它们的本质是将原本惹人厌烦的事情，转化成美好的提示。 埃米巧妙地利用提示做到了这一点。用他人的行为来提示自己做出正向而非自我挫败的行为，在感到无助时不失为一个好主意。 而且，埃米从中得到的积极影响远超她的初衷。 微习惯如此美妙是因为它能引发连锁反应，而其中的奥秘就是：成效最佳的改变，源自感觉良好，而非感觉糟糕。 埃米精心地用提示来设计改变，使自己立于不败之地。那些改变之所以奏效，是因为它们帮助埃米做到了她已经想做的事情。 那成功之后呢？感觉如此美妙，让她想一直追寻。而且，她越来越有自信，只要自己精心设计，就能拥有更多美好。 埃米越来越能让行为变得容易做，而且越来越喜欢设计提示，这让开始一个新习惯变得轻而易举。 轻松的过程进而增强了改变的动机，这也让她更愿意去尝试新的看似更困难的事情了。 埃米能如此成功还有另一个原因，那就是她迈出了能引起涟漪的最后一步：庆祝。她会用微习惯策略的技巧，立即创造积极情绪。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:5","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"5. 创造积极情绪，将行为固化为习惯 庆祝是习惯养成的“肥料”。每一次庆祝都会让相应的习惯牢牢地扎根，而坚持庆祝的累积效果会滋养整座“习惯花园”。 我在研究中发现，成年人有很多种跟自己说“我做得不好”的方式，却很少掌握对自己说“我做得不错”的方式。 我们极少认可自己的成功，也很少对自己取得的成就感觉良好。 感觉良好是微习惯策略的重要组成部分。你可以通过我称之为“庆祝”的技巧来创造这种良好感受。 采取微习惯策略来进行庆祝，你就可以根据需要创造出一种内在的积极感受。 我对着镜子里的自己笑了笑，说出一个词：胜利！然后我就发现，我的感受发生了一些变化，我内心曾经漆黑一片的地方仿佛照进了一道光。 我感觉自己没那么焦虑了，而且有点激动。 不管发生了什么，我都能在每一天创造让自己感受良好的片刻时光，而这实在太珍贵了。 令她惊喜的是，她最终发掘了自己的潜力，她因此而感到自信。开始实践微习惯策略后，她逐渐意识到自己过去一直在妄自菲薄。 在日常生活中，我也观察到，包括世界级运动员在内的一些人，都会很自然地庆祝自己取得的成绩。 当我们有效地进行庆祝时，大脑里的奖励通路会被激活。通过在恰当的时刻为自己创造良好的感觉，你能促使大脑识别并铭记刚才所执行的一系列行为。 换句话说，你可以依靠庆祝和自我强化来“搞定”大脑，从而养成习惯。 行为设计，本质就是情绪设计。 当一个宝宝学会走路时，父母会为他们鼓掌庆祝，这是全世界父母都会做出的自然反应，这种行为只有一个目的：在正确的时机进行庆祝能够帮助孩子们更高效地学习。 一系列的积极体验可以强化新行为，让人形成习惯性的反应。 良好感受刺激大脑产生名为多巴胺的神经递质，即“大脑中的化学信使”，它控制着大脑的“奖励系统”，帮助我们记住那些可以产生良好感受的行为，这样我们就会继续去执行那些行为。 在多巴胺的帮助下，大脑会对因果关系编码，进而产生对未来的期望。 习惯来自让你感觉美好的情绪。 一个人做出某种行为时的感受和他未来再重复该行为的概率，两者之间存在直接关联。 长期以来，人们一直相信“重复创造习惯”的古老智慧，执着于养成习惯所需要的行为重复天数。 当今一些博主仍然将重复的程度或频率视为养成习惯的关键所在。他们这样只是在重复旧思想，尚未做出开创性的研究。 我研究发现，只要人们能对一种行为产生强烈的积极情绪，通常用不了几天就能形成习惯。 事实上，有些习惯几乎是立即形成的，有些行为只需完成一次，你就不会再考虑其他选择，养成即刻习惯。 不管是为自己还是为别人设计培养习惯的形式，其本质就是在设计情绪。 融入习惯的正向强化方法有很多种，但我在研究和教学过程中发现，创造成功感觉是最有效的方法之一。 用庆祝滋养你的“习惯花园”。 庆祝是创造积极感受并将其融入新习惯的最佳技巧，不用花钱，效果却立竿见影，并且适用于所有人。 行为科学对奖励的定义是提升某种行为再次发生的概率的一种体验。奖励的时机非常关键。 几十年前科学家们就已经了解到，奖励的时机要么是在行为过程中，要么是在行为结束之后的那一刻。 获得奖励时，大脑会非常迅速地释放和处理多巴胺。这意味着你必须抓紧时间衔接这种好的行为和感受，以推动习惯的养成。 庆祝的原则，“及时又简单”。 福格原则1：帮助人们做他们已经想做的事。 福格原则2：帮助人们感受成功。 如果某款产品让你感觉自己很笨，很有挫败感，那你很难喜欢上它。但如果某款产品让你有了成就感，那你就会喜欢它，想要多多使用它，甚至离不开它。 这是一套“组合拳”：你得在行为之后立刻庆祝（即时性），同时需要真切感受到庆祝带来的积极情绪（强度）。 你不必一定要用伴随大幅度肢体动作的方式来庆祝。简单地微笑或是在心中默默地肯定自己，也有效果。 大脑可不想感到尴尬，它想要的是真正良好的感觉。庆祝是很私人的行为。 能让我感觉良好又不觉得傻的庆祝方式，跟能让你感觉良好又不觉得傻的庆祝方式，很可能是不同的。 然而，如果你的个性是喜欢自我批判或是有些悲观导向，庆祝可能就没那么自然了。 成功的感受：发光(Shine)。 你早已体会过这种感觉： 如果考试得了高分，你会感到自己在发光； 如果你的演讲非常棒，在结束时人们纷纷鼓掌致意，你会感到自己在发光； 如果你第一次做的菜肴闻起来非常美味，你会感到自己在发光。 我相信庆祝这项技巧对培养习惯来说会有突破性的作用。 原因就在于，通过巧妙地庆祝，我们可以创造出一种自己在发光的感觉，进而促使大脑对新习惯进行编码。 以下是一些庆祝方式，包括当你身处人群之中时可以采取的庆祝方式和适合在家中独自完成的庆祝方式： 说“太棒了”或“耶”。 挥舞拳头。 大笑。 想象孩子们在为你鼓掌。 哼一首你喜欢的乐观向上的歌曲。 跳跳舞。 拍拍手。 点点头。 给自己点赞。 想象一群人在欢呼庆祝。 在心里对自己说：干得不错！ 深呼吸。 打响指。 想象看见烟花在绽放。 向上看，做出“V”的手势。 得意地笑，告诉自己：“我得偿所愿了！” 有一天，做完深蹲后，吉尔决定要跟女儿击个掌。那种感觉真好，她后面几天都这么做了。 一个有女儿陪伴的特别的庆祝动作就这样诞生了。 你固然可以抗拒学习庆祝这项技巧，但要知道那样你就放弃了养成习惯的最佳方法。 对大多数人来说，相比于养成习惯要付出的代价，学会为自己庆祝要付出的努力压根就不值一提。 我跟所有学生都说过，能够完全按照计划去执行新习惯是个不小的成就。 我认为，无论改变的程度或速度如何，能做出改变本身就是一件相当了不起的事情。难道这不值得庆祝吗？ 如果你觉得为芝麻大小的事庆祝很难，那多半是一种“要么做到最好，要么干脆不做”的思维在作怪。 别听它的，那是个陷阱。无论你取得了多么微小的成功，为这个成功而庆祝都能很快带来更多成功。 回想一下那些你本可以改变却没有改变的事吧。做两个深蹲，你正在改变，这就足够了。 庆祝小事，迅速感受到成功。 在这个追求功成名就、强调说到做到的时代，我反而希望你降低对成功的期望。 这不是因为我不希望你取得卓越成就，而是因为你需要从小处着手，方能成就大事。 固定习惯需要反复演练。 为了快速固定习惯或帮助自己记住要执行习惯，你需要反复演练行为序列（锚点结合新习惯），然后立刻庆祝，之后重复7～10次。 演练微习惯，既是在训练肌肉记忆，也是在给大脑重新连线让它记住。只要找到一个有效的庆祝方式，你就能迅速地钻研和固化习惯。 庆祝让习惯保持活力。 在生活中的任何时刻都可以庆祝。 不需要计划，也不需要写下微习惯配方。留意你做出的良好行为，然后为它庆祝就行了。 如果你能够感觉到发光，那你就可以让这种好的行为变成自主自发的习惯。 更重要的是，想方设法地去感受积极的情绪，让积极的情绪成为你改善生活的动力。 记住，改变的最好方法是感受积极的情绪，而不是感受消极的情绪。 终有一天，庆祝会与正念和感恩一样，成为提升幸福感的日常行为。 如果你只能从这本书里学到一样东西的话，我希望是：为你的微小成功而庆祝。 即使你觉得自己一时之间还无法摆脱困境，生活中的小小改变也能够产生巨大的影响力。 庆祝可以成为你的救生绳。 感受成功不仅仅是我们用来固化习惯的一种技巧而已，它也是那种“要么做到最好，要么干脆不做”思维的解药，让我们转换视角，用全新的视角来看待自己。 “庆祝闪电战”是一根救生绳，需要的时候她可以扔给自己以便把自己拖出水面。 这就是庆祝的力量，可以改变人生、改变世界的力量。它会非常微妙且有效地改变你的人生。 现在的你，不管想要成为什么样的人，都能成功。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:6","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"6. 高频率小成功，让小改变自然生长 从你想要改变的地方开始，逐渐让自己感受到成功。接着你只需要相信这个过程，期待改变发生。 他发起“大肚腩之战”不是为了好看，更多的是为了健康。 不幸的是，苏库马尔陷入了我们熟知的一种循环，速效减肥的饮食计划与雄心勃勃的锻炼计划反复交替。 习惯需要多久才能够长大到完全形成？这个问题没有统一的答案。 任何你听到的关于习惯需要21天或60天才能完全成形的说法，都是不完全准确的。并没有这么一个关于时间的魔法数字。 从想改变的地方开始，逐渐感受成功。 成功会带来成功，你一定早就听过这种说法了，而我的研究再次证实这是真的。 但我还有一些发现可能会让你感到惊讶，那就是成功的大小似乎并不那么重要。 当你因为某事而感受到成功时，即便是非常微小的成功，你的自信心也会迅速增强，再次执行习惯、做出相关行为的动机也随之增强。我称之为“成功的动能”。 更令人惊讶的是，造就这种动能的是你获得成功的频率，而不是成功的大小。 因此，借助微习惯，你可以迅速地取得一连串的微成功，而非那种耗时长久的大成功。 希望和恐惧是相互排斥的两个动机向量，两者之和就是你的整体动机水平。如果你能够移除恐惧向量，那么希望将占据主导地位，而你的整体动机水平就会更高，这或许就能带动你超越行动线，做出行为。 保持灵活性。如果你想创建一个理想的习惯清单，记住不要太拘泥于这个清单。你的喜好和需求是会变化的。 或许今天你把每天练习倒立纳入了清单，但6星期后你或许又不关注这件事了。在前进的过程中要保持灵活性，并为学习新事物留出空间。 以下是可用于预测新习惯对你是否有意义的一些指南： 新习惯能够助力你成为你想成为的人。 新习惯可以帮助你实现某个重要的愿望。 新习惯虽然微小却能产生极大影响。萨里卡每天打开燃气灶的习惯很小，但却触发了一系列变化。 关键在于要找到你可以做出的最小、最容易但意义却最大的改变。 她意识到这个小小的动作却关联着她更大的愿望，即创造更和谐的家庭生活和更亲密的夫妻关系。 一旦建立了这种重要关联，她就能产生足以为习惯供给能量的意义感了。她利用这项技巧找到了对她有意义的习惯。 一旦找到了跟吃蔬菜相关的深层愿望，你就能够更顺利地养成吃蔬菜的习惯。 你可能找到很多隐藏的意义： 或许你已经到了一定年纪，想要保持身体健康，能够看着子辈孙辈长大成人； 或许你只是想在出席公司年度会议时穿着得体、充满自信。 这些愿景中的任何一个都足以激励你下定决心多吃蔬菜。 在持续执行一个新习惯的过程中，你自然而然就会追求更多或难度更高的新习惯。 那时候，你会找到舒适区的边界，并体会到略微打破边界的感觉。 清楚自己的舒适区边界在哪里可以帮助你养成更复杂或难度更大的习惯，而不会因为感到力不从心的痛苦或沮丧而削弱习惯。 行为设计的步骤： ❶ 明确愿望 ❷ 探索行为选项 ❸ 为自己匹配具体行为 ❹ 从微习惯开始 ❺ 找到“对”的提示 ❻ 庆祝成功 ❼ 排除障碍、重复和扩展 关于如何调整习惯难度的操作指南： 不要给自己施加太多压力去试图养成更高阶的习惯。 如果你生病了、累了，哪怕只是心情不好，那就将行为规模缩小到最微小的程度。 如果你想多做一些，也随时都可以提高标准，但只要有需要，你也可以随时降低标准到最低程度。 灵活性是这项技巧中的一部分。 如果你想多做一些，不要限制自己。让动机来告诉你该做多少和该怎么做。 如果你做了很多，一定要为自己额外付出的努力而庆祝。 如果为了提升习惯而给自己太多压力，你就有可能觉得痛苦或沮丧，这反而会削弱习惯。 如果出现了这种情况，你可以通过加倍为自己庆祝来抵消负面情绪。 利用情感标志来帮助你找到边界。 沮丧、痛苦以及逃避等情绪标志着你的习惯出了问题，可能是难度提升太多、太快。 但如果你是对现有习惯感到有些厌倦，那么你或许还需要再提高些难度才行。 现在我希望你专注于改善周遭的环境使之更利于习惯养成，而不是想着靠降低习惯的难度和规模来让习惯易于执行。 养成在前一天晚上洗好黄瓜并且切片的习惯（持续的习惯）； 告诉家人不要动你的黄瓜（单次动作）； 确保冰箱够整洁，方便你能够立即找到黄瓜（每星期一次的习惯）。 通过重新设计情境来养成习惯，可以减少摩擦，让习惯行为可以轻易地超越行动线。 那些提前清洗过并切成片的黄瓜会让你的新习惯畅通无阻。 当她注意到凌乱的台面阻碍了她做早餐的热情时，她找出了习惯养成的环境缺陷，并通过养成“在前一天晚上做好清理”的新习惯对之进行处理。 你会越来越擅长重新设计情境以养成良好习惯。 一旦开始以这种方式来看待世界，你就会发现这些微不足道的障碍是如何阻碍你获得良好习惯的。 通过精心设计情境来达到对新习惯悉心照料的结果，能够让你的整个生活都更轻松。 关于重新设计情境的一些指南： 在设计新习惯时，也投入时间重新设计情境以便让习惯易于执行。 开始执行新习惯时，边执行边调整情境，并根据需要重新设计情境以便让习惯易于执行。 大胆质疑传统。 购买你所需要的装备。 此时，你应该已经学到了一些有价值的心态调整技巧： 以开放、灵活和好奇的态度来应对变化。 能够降低期望。 通过为成功（不管是多小的成功）庆祝获得良好的感觉。 对改变过程保持耐心和信心。 人们在刚开始实践微习惯时，我经常会听到他们说“我已经习惯了这样子”、“我不是那种很容易改变的人”或者是“这些对我来说都不管用”。 但同样是这些人，有很多人就在短短5天的计划之后就改变了腔调，告诉我说“这真是难以置信，我必须承认我错了。 我是可以改变的人”，或者“我就知道我是那种可以坚持到底的人”。 由于总是会听到人们说出“我就是那种……的人”这个句式，我决定将其纳入微习惯策略的评估流程，在为期5天的计划结束时，我要求人们补全下面这句话：“在实践微习惯之后，我现在认为自己是那种……的人。” 在收集了这些数据之后我发现，随着人们在养成习惯方面变得越来越熟练，他们的自我认知也在改变。 在开始微习惯计划时，他们认定自己是某种类型的人，而在5天的微习惯计划结束的时候，他们则已经开始拥抱一种新身份了。 很多新身份会让人愿意相信自己的改变潜力，也有其他身份的变化方向是与习惯类型以及人们已经做出的改变有关的。 作为社会人，我们在很大程度上都是在遵循某种特定身份采取行动的，虽然或许我们自己都没有意识到这一点。 身份转变会推动改变加速，因为它能帮助我们培养出一系列的行为习惯，而不只是一两个单独的行为习惯。 他同样还习惯了认为自己是个不会穿衣服的人，但后来他意识到，由于他的肚腩已经消失了，购物现在已经变成了一种令人愉快甚至兴奋的体验。 看着镜子里的自己，他感觉状态很好。 苏库马尔开始质疑心中曾经很牢固的消极自我认知，那是带给他痛苦和失望的身份认知。 既然他可以做出原本以为不可能的改变，他断定自己可以改变他想要改变的一切。 对苏库马尔来说，这种赋能和乐观的感觉为他带来了真正的转变。 他在生活中的各个方面都变得更为自信，他离开已工作19年之久的公司，创办了自己的公司，以微习惯为重点帮助大型组织展开变革。 接下来，让我们深入细致地学习如何构建这些重要的身份认知技巧： 用你想要拥抱的一种身份或多种身份，补全“我现在认为自己是那种……的人”这句话。 参加那些汇集了跟你的新身份相关的人员、产品和服务的活动。 学习行话，了解谁是专家。观看跟你感兴趣的变化领域相关的视频。 穿T恤也是用来表明身份的一种常用方式。 耐克牌T恤代表了跑步爱好者，而我穿的T恤上面印有冲浪板或冲浪场面的图像。 我每年冲浪过百次，我可不会觉得自己是在装腔作势，将这种身份穿在身上感觉很自然。 更新你的社交媒体页面，换一张能够展现你新身份的档案照片，再看看人们的反应如何。 修改网上的个人简介，加一些跟你的新身份相关的内容。 教导他人或成为榜样都能够强化你对新身份的认知。社会地位的力量是很强大的。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:7","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"7. 行为改变系统方案，一次只解一个结 行为设计追求的并非某个独立的结果。行为设计的每一个习惯、每一项改变，都是可以在池塘里引起涟漪的一滴水。 我建议不要用“打破”，而是用一个别的词和一个隐喻：想象一条缠在一起、打满了结的绳子，压力过大、看屏幕时间过长和拖延等习惯就是这条绳子上的结。 你无法一次解开所有结，并且从长远来看，紧拉绳子可能会让情况变得更糟。你必须逐一解开这些结，而且不需要一开始就专攻最难的部分。 为什么呢？因为最难解的结是隐藏最深的，你必须有所规划，先找出最容易解开的结，从它开始。 无法改掉坏习惯会引起人们深深的羞愧感和内疚感，为什么呢？因为许多文化都很重视个人责任感，认为如果你无法做到“对”的事情，那必然是性格方面存在缺陷。 在行为改变领域，这是一种过于片面且毫无益处的观念，但它已然在人们心中根深蒂固。 不过，请你首先要记得：如果你曾听从误导性建议来打破习惯，结果却没有成功，那么这不是你的错。 你只是被灌输了有缺陷的思维和做法，因而陷入挫败和举足不前的循环。 其次要记得：你可以用一种更聪明、更有效的方式来设计出你想要的改变。 坏习惯和好习惯的基本要素并没有本质性不同，行为就是行为，它始终是动机、能力和提示这3大要素同时作用的结果。 当你做出一系列积极的改变时，就会更加接近你想成为的自己。 如果在这些改变中你感受到了成功，那你自然会重新看待自己，并开始接受自己的新身份。 新身份会带来更多积极习惯，但它还有另一个作用：挤走那些你不想要的行为。它们已经不符合你的新身份和焕然一新的你。 人们往往倾向于选择先解决最困难、最棘手的习惯问题，但这种做法是错误的，这就像是一开始就要去解一团乱麻中隐藏最深、系得最紧的那个结。 正确的做法是，从最容易改掉的具体习惯开始。 你也可以直接删除社交媒体App。这是一种单次行为，通常会比每天关闭通知功能这种日常动作更有效，因为它只需要完成一次，不需要养成习惯。 具体的做法是，想办法让自己不想要的习惯和你重视的某个习惯日程发生冲突，而你重视的日程比你想要改掉的习惯更重要。 如何用其他行为削弱习惯的动机： 早点睡觉，以削弱自己早晨赖床的动机； 参加聚会前先吃点儿健康食品，可以降低你在聚会上狂吃不健康食品的动机； 每星期做一次针灸，可以降低你吃止痛药的动机。 在冰箱上贴了一张纸，上面写着：“停！你已经超重了！”这固然能降低你吃东西的动机，但也会影响你的斗志。 成效最佳的改变，源自感觉良好，而非感觉糟糕。因此，要确保你的去激励因素不会演变成自责之旅。 在大多数情况下，以惩罚或威胁自己的方式去终止习惯都是不好的，因为相对于那一星半点的收获而去承担这种风险是不值得的，尤其是在你还有其他选择的时候。 重要的是找到替代坏习惯的新习惯。 从小改变中看到颠覆的美。 当你成功摆脱那些坏习惯时，你也会感受到同样的乐趣。这已经很棒了，但更令人振奋的是你在生活中创造出新空间之后突然出现的那些事物。 摆脱坏习惯之后省下来的时间，可以用来做你喜欢的事，也可以用来提升工作效率，还可以用来加深人际关系，或是拓展一个新身份。 改变群体行为方面，主要有3种方法： 设计改变自身行为，从而让自己远离群体的负面影响； 与其他人一起设计改变你们的集体行为； 为他人设计一个对他们有利的改变。 通过微习惯策略和行为设计，你可以成为他人生活中的正能量。一个具备相应技巧并充满爱心的人（就是你），足以促成一个群体的改变。 当你使用行为设计和微习惯策略时，你可以相信，自己就是在帮助他人取得成功。 在帮助他人完成改变的过程时，福格原则可以成为你的向导：福格原则1，帮助人们做他们已经想做的事；福格原则2，帮助人们感受成功。 行为设计能够应对任何挑战。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:8","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"8. 结语：改变一切的小改变 创造一种积极改变的家庭传统。不管这看似多么具有挑战性，请从现在开始行动吧。 通过分享微习惯策略及“发光”概念，你们可以从今天开始，在改变的过程中相互支持。 当你们一起学习和演练改变技巧时，你们将创造出一份持续的激励自主的传承。 拥抱成功的感觉，并为日常生活增添更多美好，会让世界变得更加光明，这不仅仅是为了你自己，也是为了其他人。 克服羞耻感和内疚感，同时也是在解放你自己和那些一生都在自我贬低的其他人。 本书讲到的最深刻的改变不是那些零散习惯的形成，而是体验的本质改变：从痛苦到较少的痛苦，从恐惧到希望，从不知所措到充满力量。 这些改变之所以能够成功，是因为埃米、朱妮、萨里卡、苏库马尔、迈克，以及其他人决心要拥抱良好的感受，并以此作为撬动更大改变的杠杆。 在此过程中，他们克服了毁灭性环境、三分钟热度和自我批评的挑战。 他们重新掌控了自己的人生，并且发现了每个人都能做到的事情：改变一切的小改变。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:9","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"9. 附录：福格行为设计工具箱 福格行为模型适用于所有类型的人类行为。总的来说，当动机、能力和提示同时产生作用时，行为就会发生。 三者缺一不可，否则，行为就不会发生。 Anchor 锚点，Behavior 行为，Celebration 庆祝 A B C 三步骤： A．锚点时刻提醒你去执行新的微行为的关键时点。例如，某个日常习惯（刷牙）或某件必然发生的事情（电话铃声响起）。 B．新的微行为锚点出现后立刻去执行的微行为。这是新习惯的简化版，比如用牙线清洁一颗牙齿或做两个俯卧撑。 C．即时庆祝完成新的微行为后要立刻庆祝。任何能带来积极情绪的事情都可以，比如说出“我很棒”之类的话。 你可以按照微习惯配方的格式，将自己要培养的习惯写在卡片上，然后收集到一起保存起来，这样有助于你根据需要随时检视和调整。 改善睡眠的微习惯配方：在我听到起床的闹钟响起之后，我会立即关掉它（而且不赖床）。 照顾者的微习惯配方： 在我晚上起夜之后，去看妈妈时，即使她听不到，我也会说一句支持她的话。 在我听到起床闹钟响起之后，我会从床上下来，说：“无论如何，这将是美好的一天！” 在我把早饭端给妈妈之后，我会让她告诉我她最喜欢的一样东西。 在我看到丈夫为我做好早餐之后，我会在入座之前给他一个大大的拥抱。 新晋管理者的微习惯配方： 在我吃完早餐之后，我会打开日历App，查看当天的日程。 在我穿好衣服之后，准备去上班时，我会说一句积极向上的话。 在我走进办公室之后，我会微笑着和每一个碰面的同事打招呼。 在我和同事进行一对一会议时，关上办公室的门之后，我会询问他“最近怎么样”，而且问题要具体。 在我注意到一名同事的沮丧情绪之后，我会称赞她的优点。 在我结束一对一会议之后，我会强调同事的一个积极贡献。 在我向领导了解了一个新项目之后，我会在Slack中为它创建一个新群组。 在我的员工例会开始之后，我会与他们问一些有趣的问题，并倾听每个人的简短回应。比如：你最近去过哪座城市？ 在我注意到会议停顿的原因是主题不明确之后，我会说：“澄清一下，我们要为某事而进行设计，对吗？” 在我们讨论完所有议题之后，我会向同事询问是否还有其他议题要讨论。 在我们的会议结束之后，我会让我的团队成员将他们的行动项目通过电子邮件发送到小组。 在我盖上午餐盒之后，我会穿上步行鞋。 在我吃完午饭、进入办公室之后，我会走到团队中的某个人面前，问他：“今天有需要我帮助的地方吗？” 在我去参加完一场会议之后，我会给会议组织者一个积极的评价。 在我的下属向我提出问题之后，我会说：“你认为最好的解决方案是什么？” 在我处理好新员工的招聘文件之后，我会把他们的生日添加到日历中。 在我收到表示夸赞的电子邮件或文件之后，我会把它们转存到我的绩效评估文件夹中。 在我下班关掉电脑之后，我会把办公桌上的一份文件归类整理好。 在我收拾好办公包之后，我会锁上我的文件柜。 在我关上办公室的门之后，我会一边走向地铁，一边回想当天我所取得的一项成就。 （父亲们）居家办公的微习惯配方： 在我早上起床、双脚落地之后，我会说：“这将是很棒的一天！” 在我看到孩子们坐下来吃早餐之后，我会问他们：“你今天想遇到什么好事呢？” 在我看到妻子正打扫厨房之后，我会给她一个拥抱，并表示感谢。 在我的妻子和孩子出门之后，我会坐下来冥想，至少3次。 在我启动电脑之后，我会查看我的团队工作进度。 在我看到一个同事完成一个项目之后，我会发送一条附带表情符号的短信给他。 在我确定好当天要做的最重要事项之后，我会启动番茄定时器。 在我吃完午饭之后，我会绕着街区走一圈（或者打电话给我的父母）。 在我看到孩子们到家之后，我会让他们分享当天的一个惊喜。 在我打开花洒之后，我会想起一件当天很顺利就完成了的事。 减轻压力的微习惯配方： 在我早上醒来之后，我会打开窗户，进行几次深呼吸。 在我把杯子里倒上咖啡或茶之后，我会坐到冥想垫上。 在我把孩子们送上校车之后，我会向他们的朋友表示感谢。 在我知道自己今天要出门之后，我会在手机上设置定时提醒。 在我爬到床上之后，我会闭上眼睛，念叨“唵”。 在我枕在枕头上之后，我会想一件我从今天开始感激的事情。 提高效率的微习惯配方： 在我到办公桌前坐下之后，我会把手机调成静音模式。 在我关上办公室的门之后，我会整理周围的一件东西。 在我发现自己沉迷于社交媒体之后，我会立刻退出。 在我发现通话时间比预想的要长之后，我会这样说：“很高兴和你通话，但差不多该进入主题了，请问重要的事情是？” 在我看到需尽快回复的电子邮件之后，我会这样回复：“收到。我将详细审查，并尽快与您联系。” 在我离开办公室之后，我会想当天的一件成功的事。 加强亲密关系的微习惯配方： 在我整理好床铺之后，我会给伴侣一个拥抱。 在我与邻居碰面之后，我会挥手问：“最近怎么样，一切都好吗？” 在我和朋友坐下来开始喝咖啡之后，我会问她一个关于她生活的具体问题。 在我到杂货店里看到卡片区时，我会选择一张思念卡片送给我爱的人。 在我从网上看到一个好朋友过生日的提醒之后，我会给他发一条祝福短信。 在我下班或出差回到家之后，我会拥抱我的伴侣和孩子。 在我听到我的伴侣抱怨疼痛时，我会主动为他提供按摩服务。 在我听到伴侣紧张了一天之后，我会说：“我会陪着你。” 在我离开教堂之后，我会在回家的路上给父母打电话。 在我专程去看望家人之后，我会在用电子邮件与他们分享几张照片，并表达我的谢意。 在我和一个亲密的朋友结束活动之后，我会给他发一条感谢短信。 在我自己做了好吃的东西之后，我会与邻居或朋友分享。 在我收到孩子们的礼物之后，我会给他们发短信：“我好喜欢！你太贴心了。谢谢你！” 在我和我的伴侣做好一日游的计划之后，我会问问他有没有特别想看或想做的事情。 在我准备好要去拜访别人之后，我将为他准备一份特别的惊喜。 保持专注的微习惯配方： 当我踏入办公室的门之后，我会把手机调成静音模式，并把它放到包里。 在我放下公文包之后，我会选择一项我想立即完成的重要任务。 在我挑选出重要的任务之后，我会清除桌上所有让我分心的东西。 在我清理完办公桌子之后，我会定时45分钟。 在我设置好时间之后，我会戴上耳机，向别人发出“不要打扰我”的信号。 在我戴上耳机之后，我会关闭电脑上所有不必要的窗口。 在我的定时结束之后，我会列出我的下一个任务，然后休息一下。 在我选出下一个项目之后，我会快速列出实施步骤。 在我们的项目会议开始之后，我会开始记笔记（这样我才能保持关注）。 在我下班走出办公室之后，我会说：“为什么我如此擅长专注？” ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:2:10","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"总结 “福格行为模型”为我们提供了一套科学而实用的行为改变方法论。其核心在于 B=MAP 公式，即行为的发生需要“动机”、“能力”和“提示”三要素同时具备。 核心要点包括： 动机不可靠：传统依赖意志力和动机的方法往往失败，因为动机善变且难以维持。真正有效的改变应该帮助人们做他们已经想做的事； 简化是王道：通过简化行为、从微小改变开始，可以绕开动机的不稳定性。“简单才能改变行为”，微习惯策略让改变变得容易执行； 提示不可缺：没有合适的提示，再好的动机和能力也无法产生行为。利用锚点（现有习惯）来触发新行为是最有效的提示设计方式； 庆祝要即时：即时庆祝能创造积极情绪，激发大脑奖励机制，将有意识的行为快速转化为无意识的习惯。“习惯来自让你感觉美好的情绪”； 小胜聚大胜：通过“高频率小成功”建立“成功的动能”，逐步实现身份认知转变，最终形成持久的行为改变系统。 书中附录的“行为设计工具箱”提供了“A B C 三步骤”框架「Anchor 锚点，Behavior 行为，Celebration 庆祝」和丰富的微习惯配方模板，涵盖了从提高效率到加强亲密关系等各种生活场景，让理论真正落地为可操作的实践指南。 福格博士的方法颠覆了“要么做到最好，要么干脆不做”的传统思维，倡导从最小可行的改变开始，通过正向强化和系统设计，让改变变得可持续且愉悦。 福格行为模型不仅仅是一套行为改变技术，更是一种全新的生活哲学。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:3:0","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["读书笔记"],"content":"思考 福格行为模型以一个简洁的公式 B=MAP 为核心，通过大量实例与场景，指出了相比“能力”和“提示”，“动机”是最不可预测和最不可靠的。 它顺应人性，反对消极的自我批评，倡导以小而易行的改变作为起点，并以正念的方式激励自我，让“成功孕育成功”的正向反馈自然发生，是一套既科学又实操性强的方法论。 通过学习，我认识到，依靠消极和痛苦的自我批评来维持“恒心”并不科学，也难以真正适应人性。今后，我会更多地践行微习惯，从一个个小目标出发，逐步实现更大的人生目标。 ","date":"2024-03-01","objectID":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/:4:0","tags":["自我管理"],"title":"读书笔记之《福格行为模型：微习惯改变一切》","uri":"/2024/03/notes-from-tiny-habits-the-small-changes-that-change-everything/"},{"categories":["技能矩阵"],"content":"我收集整理了一套完整的阿里云矢量图标，分别标注了中英文名称，并生成了相应的 draw.io 图标库。","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"我收集整理了一套完整的阿里云矢量图标，分别标注了中英文名称，并生成了相应的 draw.io 图标库。 ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:0:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"背景 在众多知名的绘图软件（如 draw.io、Lucidchart、Gliffy、ProcessOn 等）中都没有内置一套完整的、最新的阿里云官方矢量图标。 因此，在画阿里云相关的网络拓扑图和架构图时，和 AWS、Azure、GCP 相比，很不方便。 于是，我收集整理了一套完整的阿里云矢量图标，分别标注了中英文名称，并生成了相应的 draw.io 图标库，方便自己的同时也希望能够帮助到大家。 ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:1:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"draw.io 自定义图标库截图 ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:2:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"draw.io 自定义图标库下载 中文版 Alibaba Cloud.xml | 英文版 Alibaba Cloud.xml ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:3:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"阿里云矢量图来源 链接: 阿里云设计中心 | 阿里云产品类别 矢量图标颜色代码: #ff6a00 ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:4:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"draw.io 中图标的顺序 . ├── 00 Logo ├── 01 网络与CDN ├── 02 计算 ├── 03 容器 ├── 04 Serverless ├── 05 数据库 ├── 06 存储 ├── 07 中间件 ├── 08 迁移与运维管理 ├── 09 开发工具 ├── 10 企业服务与云通信 ├── 11 安全 ├── 12 大数据计算 ├── 13 人工智能与机器学习 ├── 14 物联网 └── 15 媒体服务 ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:5:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"后续 关于 draw.io 中没有内置阿里云官方矢量图标这件事情，我带来了一些改变。 大家很快就能在 draw.io 里看到内置的阿里云官方矢量图标了。😄 https://github.com/jgraph/drawio/issues/4086 ","date":"2024-01-04","objectID":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/:6:0","tags":["阿里云"],"title":"阿里云官方矢量图标和 draw.io 自定义图标库","uri":"/2024/01/alibaba-cloud-official-vector-icons-and-drawio-custom-libraries/"},{"categories":["技能矩阵"],"content":"git-crypt 是一个用于加密和解密文件的工具，可以与 Git 仓库无缝集成，允许用户安全地存储和共享敏感数据。","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"git-crypt 是一个用于加密和解密文件的工具，可以与 Git 仓库无缝集成，允许用户安全地存储和共享敏感数据。 ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:0:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"安装 git-crypt ❯ brew install git-crypt ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:1:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"初始化 git-crypt 并备份加密 key ❯ git-crypt init Generating key... ❯ git-crypt export-key /Users/damonguo/Workspace/keys/git-crypt-v1.key ❯ diff .git/git-crypt/keys/default /Users/damonguo/Workspace/keys/git-crypt-v1.key ❯ echo \"git-crypt/api.key filter=git-crypt diff=git-crypt\" \u003e .gitattributes ❯ git add .gitattributes ❯ git commit -m \"feat: tell git-crypt to encrypt git-crypt/api.key\" ❯ git push ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:2:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"创建测试文件 ❯ mkdir git-crypt ❯ echo \"This is some text\" \u003e git-crypt/file.txt ❯ echo \"dummy value\" \u003e git-crypt/api.key ❯ git add git-crypt ❯ git commit -m \"feat: add git-crypt demo files\" ❯ git push ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:3:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"校验文件加解密状态 使用 git-crypt status 命令查看文件的服务端加解密状态 ❯ git-crypt status git-crypt encrypted: git-crypt/api.key not encrypted: git-crypt/file.txt 通过 GitLab 网页端 查看文件的服务端加解密状态 通过 git-crypt lock/unlock 命令对文件 git-crypt/api.key 进行本地加解密 ❯ git-crypt lock ❯ file git-crypt/api.key git-crypt/api.key: data ❯ git-crypt unlock /Users/damonguo/Workspace/keys/git-crypt-v1.key ❯ file git-crypt/api.key git-crypt/api.key: ASCII text ❯ cat git-crypt/api.key dummy value ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:4:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"在团队中使用 git-crypt 以安全的方式与团队成员共享导出的加密 Key /Users/damonguo/Workspace/keys/git-crypt-v1.key。 通知他们导入加密 Key 对 Git 仓库中的加密文件进行解密: git-crypt unlock /path/to/git-crypt-v1.key。 ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:5:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"更新 git-crypt 加密 key 创建一个新的 git-crypt 加密 Key ❯ git-crypt unlock /Users/damonguo/Workspace/keys/git-crypt-v1.key ❯ rm -rf .git/git-crypt/keys ❯ git-crypt init Generating key... ❯ git-crypt export-key /Users/damonguo/Workspace/keys/git-crypt-v2.key ❯ diff .git/git-crypt/keys/default /Users/damonguo/Workspace/keys/git-crypt-v2.key 触发更新并应用新的 git-crypt 加密 key。 ❯ echo \"new dummy value\" \u003e git-crypt/api.key ❯ git add git-crypt/api.key ❯ git commit -m \"feat: update api.key with new git-crypt encryption key\" ❯ git push 以安全的方式与团队成员共享新的加密 Key /Users/damonguo/Workspace/keys/git-crypt-v2.key。 通知他们暂停 git push 和 pull 等操作，先导入新的加密 Key: git-crypt unlock /path/to/git-crypt-v2.key，然后再继续。 ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:6:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"参考 https://buddy.works/guides/git-crypt ","date":"2023-12-18","objectID":"/2023/12/use-git-crypt-to-encrypt-files-in-git/:7:0","tags":["Git","安全"],"title":"使用 git-crypt 加解密 Git 中的文件","uri":"/2023/12/use-git-crypt-to-encrypt-files-in-git/"},{"categories":["技能矩阵"],"content":"部署和管理原生 Kubernetes 集群是一项颇具挑战的工作，社区因此推出了轻量级 Kubernetes 发行版以降低运维复杂度。","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署和管理原生 Kubernetes 集群是一项颇具挑战的工作，社区因此推出了轻量级 Kubernetes 发行版以降低运维复杂度。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:0:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"Minikube 结合 Podman 实践 Minikube 是轻量级的 Kubernetes 实现，可在本地计算机上创建虚拟机并部署仅包含节点的简单集群。 Podman 是开源的容器运行时工具，它提供与 Docker 相似的功能，但不需要守护进程，并且支持更多的安全特性和 rootless 模式运行。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:1:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Driver: Podman CPUs: 2 Memory: 2Gi Disk: 20GiB Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:1:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 Podman ➜ brew install podman ==\u003e Installing dependencies for podman: capstone, dtc, pcre2, gettext, glib, gmp, libtasn1, nettle, p11-kit, openssl@3, libnghttp2, unbound, gnutls, jpeg-turbo, libpng, libslirp, libssh, libusb, lzo, pixman, snappy, vde and qemu ==\u003e podman ➜ podman machine init --cpus 2 --memory 2048 --disk-size 20 --rootful Downloading VM image: fedora-coreos-39.20231204.2.1-qemu.aarch64.qcow2.xz: done Extracting compressed file: podman-machine-default_fedora-coreos-39.20231204.2.1-qemu.aarch64.qcow2: done Image resized. Machine init complete ➜ podman machine start Starting machine \"podman-machine-default\" Waiting for VM ... Mounting volume... /Users:/Users Mounting volume... /private:/private Mounting volume... /var/folders:/var/folders API forwarding listening on: /Users/damonguo/.local/share/containers/podman/machine/qemu/podman.sock The system helper service is not installed; the default Docker API socket address can't be used by podman. If you would like to install it, run the following commands: sudo /opt/homebrew/Cellar/podman/4.8.1/bin/podman-mac-helper install podman machine stop; podman machine start You can still connect Docker API clients by setting DOCKER_HOST using the following command in your terminal session: export DOCKER_HOST='unix:///Users/damonguo/.local/share/containers/podman/machine/qemu/podman.sock' Machine \"podman-machine-default\" started successfully ➜ podman machine list NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE podman-machine-default qemu 8 minutes ago Currently running 2 2GiB 20GiB ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:1:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 Minikube ➜ brew install minikube ==\u003e Installing dependencies for minikube: kubernetes-cli ==\u003e minikube ➜ minikube config set driver podman These changes will take effect upon a minikube delete and then a minikube start ➜ minikube start --driver=podman --kubernetes-version=v1.28.3 minikube v1.32.0 on Darwin 14.1.2 (arm64) Using the podman (experimental) driver based on user configuration Using Podman driver with root privileges Starting control plane node minikube in cluster minikube Pulling base image ... Downloading Kubernetes v1.28.3 preload ... preloaded-images-k8s-v18-v1...: 341.16 MiB / 341.16 MiB 100.00% 13.99 M gcr.io/k8s-minikube/kicbase...: 410.58 MiB / 410.58 MiB 100.00% 13.22 M Creating podman container (CPUs=2, Memory=1887MB) ... Preparing Kubernetes v1.28.3 on Docker 24.0.7 ... Generating certificates and keys ... Booting up control plane ... Configuring RBAC rules ... Configuring bridge CNI (Container Networking Interface) ... Verifying Kubernetes components... Using image gcr.io/k8s-minikube/storage-provisioner:v5 Enabled addons: storage-provisioner, default-storageclass Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default ➜ minikube status minikube type: Control Plane host: Running kubelet: Running apiserver: Running kubeconfig: Configured ➜ kubectl get namespaces NAME STATUS AGE default Active 4m40s kube-node-lease Active 4m40s kube-public Active 4m40s kube-system Active 4m40s ➜ kubectl get nodes NAME STATUS ROLES AGE VERSION minikube Ready control-plane 4m44s v1.28.3 ➜ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 16m ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:1:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ vim nginx-deploy-svc.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 ➜ kubectl apply -f nginx-deploy-svc.yaml deployment.apps/nginx-deploy created service/nginx-svc created ➜ kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-7c5ddbdf54-4d8c2 1/1 Running 0 67s pod/nginx-deploy-7c5ddbdf54-cmcg2 1/1 Running 0 67s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 24m service/nginx-svc NodePort 10.103.72.229 \u003cnone\u003e 80:31985/TCP 67s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 67s NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-7c5ddbdf54 2 2 2 67s ➜ minikube service nginx-svc --url http://127.0.0.1:51726 Because you are using a Docker driver on darwin, the terminal needs to be open to run it. 通过 Tunnel 访问 Nginx: http://127.0.0.1:51726 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:1:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 Minikube 和 Podman ➜ minikube stop Stopping node \"minikube\" ... Powering off \"minikube\" via SSH ... 1 node stopped. ➜ minikube status minikube type: Control Plane host: Stopped kubelet: Stopped apiserver: Stopped kubeconfig: Stopped ➜ minikube delete Deleting \"minikube\" in podman ... Deleting container \"minikube\" ... Removing /Users/damonguo/.minikube/machines/minikube ... Removed all traces of the \"minikube\" cluster. ➜ podman machine list NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE podman-machine-default qemu 54 minutes ago Currently running 2 2GiB 20GiB ➜ podman machine stop podman-machine-default Waiting for VM to exit... Machine \"podman-machine-default\" stopped successfully ➜ podman machine rm podman-machine-default The following files will be deleted: /Users/damonguo/.ssh/podman-machine-default /Users/damonguo/.ssh/podman-machine-default.pub /Users/damonguo/.config/containers/podman/machine/qemu/podman-machine-default.ign /Users/damonguo/.local/share/containers/podman/machine/qemu/podman-machine-default_fedora-coreos-39.20231204.2.1-qemu.aarch64.qcow2 /Users/damonguo/.local/share/containers/podman/machine/qemu/podman.sock /Users/damonguo/.local/share/containers/podman/machine/qemu/podman-machine-default_ovmf_vars.fd /Users/damonguo/.config/containers/podman/machine/qemu/podman-machine-default.json Are you sure you want to continue? [y/N] y ➜ minikube delete --purge --all Successfully deleted all profiles Successfully purged minikube directory located at - [/Users/damonguo/.minikube] ➜ brew uninstall minikube ➜ brew uninstall podman ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:1:5","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"KinD 实践 KinD (Kubernetes in Docker) 是轻量级的工具，用于在 Docker 中运行本地 Kubernetes 集群。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:2:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Driver: Docker Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:2:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 KinD ➜ brew install kind ==\u003e Installing kind ==\u003e Pouring kind--0.20.0.arm64_sonoma.bottle.tar.gz ==\u003e kind ➜ kind version kind v0.20.0 go1.21.1 darwin/arm64 创建名为 mycluster 的 K8S 集群，并将 hostPort 的30080端口暴露到 localhost 的30080端口。 ➜ vim config-with-port-mapping.yaml kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane extraPortMappings: - containerPort: 30080 hostPort: 30080 ➜ kind create cluster --name mycluster --config=config-with-port-mapping.yaml Creating cluster \"mycluster\" ... ✓ Ensuring node image (kindest/node:v1.27.3) ✓ Preparing nodes ✓ Writing configuration ✓ Starting control-plane ✓ Installing CNI ✓ Installing StorageClass Set kubectl context to \"kind-mycluster\" You can now use your cluster with: kubectl cluster-info --context kind-mycluster Thanks for using kind! ➜ kubectl cluster-info --context kind-mycluster Kubernetes control plane is running at https://127.0.0.1:64070 CoreDNS is running at https://127.0.0.1:64070/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy ➜ kind get clusters mycluster ➜ kubectl get nodes NAME STATUS ROLES AGE VERSION mycluster-control-plane Ready control-plane 85s v1.27.3 ➜ kubectl get pods -n kube-system NAME READY STATUS RESTARTS AGE coredns-5d78c9869d-6zdpz 1/1 Running 0 81s coredns-5d78c9869d-twr96 1/1 Running 0 81s etcd-mycluster-control-plane 1/1 Running 0 94s kindnet-x9zrb 1/1 Running 0 81s kube-apiserver-mycluster-control-plane 1/1 Running 0 96s kube-controller-manager-mycluster-control-plane 1/1 Running 0 94s kube-proxy-5zzch 1/1 Running 0 81s kube-scheduler-mycluster-control-plane 1/1 Running 0 94s ➜ kubectl get namespaces NAME STATUS AGE default Active 108s kube-node-lease Active 108s kube-public Active 108s kube-system Active 108s local-path-storage Active 104s ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:2:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ kubectl get all NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 119s ➜ vim nginx-deploy-svc-portmapping.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 nodePort: 30080 ➜ kubectl apply -f nginx-deploy-svc-portmapping.yaml deployment.apps/nginx-deploy created service/nginx-svc created ➜ kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-55f598f8d-f2c2q 1/1 Running 0 35s pod/nginx-deploy-55f598f8d-ljxd8 1/1 Running 0 35s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 5m5s service/nginx-svc NodePort 10.96.221.64 \u003cnone\u003e 80:30080/TCP 35s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 35s NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-55f598f8d 2 2 2 35s 通过 NodePort 本地端口映射访问 Nginx: http://localhost:30080 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:2:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 KinD ➜ kind delete cluster --name mycluster Deleting cluster \"mycluster\" ... Deleted nodes: [\"mycluster-control-plane\"] ➜ kind get clusters No kind clusters found. ➜ kubectl config delete-context kind-mycluster deleted context kind-mycluster from /Users/damonguo/.kube/config ➜ brew uninstall kind ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:2:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"K3S 结合 Multipass 实践 K3S 是轻量级、易于安装的 Kubernetes 发行版。 Multipass 是 Ubuntu 公司 Canonical 开发的用于快速创建、管理和操作 Ubuntu 虚拟机的工具。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:3:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Virtualization: Multipass CPUs: 1 Memory: 1Gi Disk: 10GiB Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:3:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 Multipass ➜ brew install --cask multipass ==\u003e Downloading https://github.com/canonical/multipass/releases/download/v1.12.2/multipass-1.12.2+mac-Darwin.pkg ==\u003e Installing Cask multipass installer: Package name is multipass installer: Installing at base path / installer: The install was successful. multipass was successfully installed! ➜ multipass launch --name k3s-server --cpus 1 --memory 1G --disk 10G Launched: k3s-server ➜ multipass info k3s-server Name: k3s-server State: Running IPv4: 192.168.64.2 Release: Ubuntu 22.04.3 LTS Image hash: 9256911742f0 (Ubuntu 22.04 LTS) CPU(s): 1 Load: 0.56 0.15 0.05 Disk usage: 1.4GiB out of 9.6GiB Memory usage: 140.0MiB out of 962.3MiB Mounts: -- ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:3:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 K3S ➜ multipass shell k3s-server Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-89-generic aarch64) ubuntu@k3s-server:~$ curl -sfL https://get.k3s.io | sh - [INFO] Finding release for channel stable [INFO] Using v1.27.7+k3s2 as release [INFO] Downloading hash https://github.com/k3s-io/k3s/releases/download/v1.27.7+k3s2/sha256sum-arm64.txt [INFO] Downloading binary https://github.com/k3s-io/k3s/releases/download/v1.27.7+k3s2/k3s-arm64 [INFO] Verifying binary download [INFO] Installing k3s to /usr/local/bin/k3s [INFO] Skipping installation of SELinux RPM [INFO] Creating /usr/local/bin/kubectl symlink to k3s [INFO] Creating /usr/local/bin/crictl symlink to k3s [INFO] Creating /usr/local/bin/ctr symlink to k3s [INFO] Creating killall script /usr/local/bin/k3s-killall.sh [INFO] Creating uninstall script /usr/local/bin/k3s-uninstall.sh [INFO] env: Creating environment file /etc/systemd/system/k3s.service.env [INFO] systemd: Creating service file /etc/systemd/system/k3s.service [INFO] systemd: Enabling k3s unit Created symlink /etc/systemd/system/multi-user.target.wants/k3s.service → /etc/systemd/system/k3s.service. [INFO] systemd: Starting k3s ubuntu@k3s-server:~$ sudo k3s kubectl get nodes NAME STATUS ROLES AGE VERSION k3s-server Ready control-plane,master 19s v1.27.7+k3s2 ubuntu@k3s-server:~$ sudo ss -lntpu | grep k3s-server tcp LISTEN 0 4096 127.0.0.1:10248 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=172)) tcp LISTEN 0 4096 127.0.0.1:10249 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=208)) tcp LISTEN 0 4096 127.0.0.1:6444 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=15)) tcp LISTEN 0 4096 127.0.0.1:10256 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=206)) tcp LISTEN 0 4096 127.0.0.1:10257 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=86)) tcp LISTEN 0 4096 127.0.0.1:10258 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=202)) tcp LISTEN 0 4096 127.0.0.1:10259 0.0.0.0:* users:((\"k3s-server\",pid=2786,fd=209)) tcp LISTEN 0 4096 *:10250 *:* users:((\"k3s-server\",pid=2786,fd=168)) tcp LISTEN 0 4096 *:6443 *:* users:((\"k3s-server\",pid=2786,fd=13)) ubuntu@k3s-server:~$ sudo cat /var/lib/rancher/k3s/server/node-token K10fa8d62310e361852c7607ba12b9667cd05f52122df80ca928448200295bb0969::server:c421b343a4f042a2a3511156664a76b1 ubuntu@k3s-server:~$ exit logout ➜ multipass launch --name k3s-agent --cpus 1 --memory 1G --disk 10G Launched: k3s-agent ➜ multipass list Name State IPv4 Image k3s-server Running 192.168.64.2 Ubuntu 22.04 LTS 10.42.0.0 10.42.0.1 k3s-agent Running 192.168.64.3 Ubuntu 22.04 LTS ➜ multipass shell k3s-agent Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-89-generic aarch64) ubuntu@k3s-agent:~$ curl -sfL https://get.k3s.io | K3S_URL=https://192.168.64.2:6443 K3S_TOKEN=\"K10fa8d62310e361852c7607ba12b9667cd05f52122df80ca928448200295bb0969::server:c421b343a4f042a2a3511156664a76b1\" sh - [INFO] Finding release for channel stable [INFO] Using v1.27.7+k3s2 as release [INFO] Downloading hash https://github.com/k3s-io/k3s/releases/download/v1.27.7+k3s2/sha256sum-arm64.txt [INFO] Downloading binary https://github.com/k3s-io/k3s/releases/download/v1.27.7+k3s2/k3s-arm64 [INFO] Verifying binary download [INFO] Installing k3s to /usr/local/bin/k3s [INFO] Skipping installation of SELinux RPM [INFO] Creating /usr/local/bin/kubectl symlink to k3s [INFO] Creating /usr/local/bin/crictl symlink to k3s [INFO] Creating /usr/local/bin/ctr symlink to k3s [INFO] Creating killall script /usr/local/bin/k3s-killall.sh [INFO] Creating uninstall script /usr/local/bin/k3s-agent-uninstall.sh [INFO] env: Creating environment file /etc/systemd/system/k3s-agent.service.env [INFO] systemd: Creating service file /etc/systemd/system/k3s-agent.service [INFO] systemd: Enabling k3s-agent unit Created symlink /etc/systemd/system/multi-user.target.wants/k3s-agent.service → /etc/systemd/system/k3s-agent.service. [INFO] systemd: Starting k3s-agent ubuntu@k3s-agent:~$ exit logout ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:3:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ multipass shell k3s-server Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-89-generic aarch64) ubuntu@k3s-server:~$ sudo k3s kubectl get nodes NAME STATUS ROLES AGE VERSION k3s-server Ready control-plane,master 9m26s v1.27.7+k3s2 k3s-agent Ready \u003cnone\u003e 71s v1.27.7+k3s2 ubuntu@k3s-server:~$ vim nginx-deploy-svc.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 ubuntu@k3s-server:~$ sudo k3s kubectl apply -f nginx-deploy-svc.yaml deployment.apps/nginx-deploy created service/nginx-svc created ubuntu@k3s-server:~$ sudo k3s kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-55f598f8d-pzr6n 1/1 Running 0 20m pod/nginx-deploy-55f598f8d-z55ng 1/1 Running 0 20m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.43.0.1 \u003cnone\u003e 443/TCP 68m service/nginx-svc NodePort 10.43.202.7 \u003cnone\u003e 80:32711/TCP 20m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 20m NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-55f598f8d 2 2 2 20m ubuntu@k3s-server:~$ exit logout ➜ multipass list Name State IPv4 Image k3s-server Running 192.168.64.2 Ubuntu 22.04 LTS 10.42.0.0 10.42.0.1 k3s-agent Running 192.168.64.3 Ubuntu 22.04 LTS 10.42.1.0 10.42.1.1 通过 NodePort 访问 Nginx: http://192.168.64.2:32711 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:3:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 Multipass 和 K3S ➜ multipass delete k3s-server k3s-agent ➜ multipass list Name State IPv4 Image k3s-server Deleted -- Not Available k3s-agent Deleted -- Not Available ➜ multipass purge ➜ multipass list No instances found. ➜ brew uninstall --cask multipass ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:3:5","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"K3D 实践 K3D 是轻量级的工具，用于在 Docker 中运行 K3S。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:4:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Driver: Docker Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:4:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 K3D ➜ brew install k3d ==\u003e Installing k3d ==\u003e Pouring k3d--5.6.0.arm64_sonoma.bottle.tar.gz ==\u003e k3d ➜ k3d version k3d version v5.6.0 k3s version v1.27.5-k3s1 (default) 创建名为 mycluster 的 K8S 集群，并将 Ingress 的80端口暴露到 localhost 的8081端口。 ➜ k3d cluster create mycluster -p \"8081:80@loadbalancer\" --agents 1 INFO[0000] portmapping '8081:80' targets the loadbalancer: defaulting to [servers:*:proxy agents:*:proxy] INFO[0000] Prep: Network INFO[0000] Created network 'k3d-mycluster' INFO[0000] Created image volume k3d-mycluster-images INFO[0000] Starting new tools node... INFO[0000] Starting Node 'k3d-mycluster-tools' INFO[0001] Creating node 'k3d-mycluster-server-0' INFO[0001] Creating node 'k3d-mycluster-agent-0' INFO[0001] Creating LoadBalancer 'k3d-mycluster-serverlb' INFO[0001] Using the k3d-tools node to gather environment information INFO[0001] HostIP: using network gateway 192.168.167.1 address INFO[0001] Starting cluster 'mycluster' INFO[0001] Starting servers... INFO[0001] Starting Node 'k3d-mycluster-server-0' INFO[0004] Starting agents... INFO[0004] Starting Node 'k3d-mycluster-agent-0' INFO[0007] Starting helpers... INFO[0007] Starting Node 'k3d-mycluster-serverlb' INFO[0013] Injecting records for hostAliases (incl. host.k3d.internal) and for 3 network members into CoreDNS configmap... INFO[0015] Cluster 'mycluster' created successfully! INFO[0015] You can now use it like this: kubectl cluster-info ➜ kubectl cluster-info Kubernetes control plane is running at https://0.0.0.0:56685 CoreDNS is running at https://0.0.0.0:56685/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy Metrics-server is running at https://0.0.0.0:56685/api/v1/namespaces/kube-system/services/https:metrics-server:https/proxy ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:4:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ kubectl get all NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.43.0.1 \u003cnone\u003e 443/TCP 48s ➜ vim nginx-deploy-svc-ingress.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 --- apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: nginx-ingress annotations: ingress.kubernetes.io/ssl-redirect: \"false\" spec: rules: - http: paths: - path: / pathType: Prefix backend: service: name: nginx-svc port: number: 80 ➜ kubectl apply -f nginx-deploy-svc-ingress.yaml deployment.apps/nginx-deploy created service/nginx-svc created ingress.networking.k8s.io/nginx-ingress created ➜ kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-55f598f8d-z9n5v 1/1 Running 0 2m pod/nginx-deploy-55f598f8d-h5zkb 1/1 Running 0 2m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.43.0.1 \u003cnone\u003e 443/TCP 3m12s service/nginx-svc NodePort 10.43.58.173 \u003cnone\u003e 80:32459/TCP 2m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 2m NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-55f598f8d 2 2 2 2m ➜ kubectl get ingress NAME CLASS HOSTS ADDRESS PORTS AGE nginx-ingress \u003cnone\u003e * 192.168.167.2,192.168.167.3 80 2m56s 通过 Ingress 访问 Nginx: http://localhost:8081 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:4:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 K3D ➜ k3d cluster list NAME SERVERS AGENTS LOADBALANCER mycluster 1/1 1/1 true ➜ k3d cluster delete mycluster INFO[0000] Deleting cluster 'mycluster' INFO[0000] Deleting cluster network 'k3d-mycluster' INFO[0000] Deleting 1 attached volumes... INFO[0000] Removing cluster details from default kubeconfig... INFO[0000] Removing standalone kubeconfig file (if there is one)... INFO[0000] Successfully deleted cluster mycluster! ➜ k3d cluster list NAME SERVERS AGENTS LOADBALANCER ➜ brew uninstall k3d ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:4:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"MicroK8s 结合 Multipass 实践 MicroK8s 是 Ubuntu 公司 Canonical 开发的轻运维、最小化生产级 Kubernetes。 Multipass 是 Ubuntu 公司 Canonical 开发的用于快速创建、管理和操作 Ubuntu 虚拟机的工具。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:5:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Virtualization: Multipass Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:5:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 Multipass ➜ brew install --cask multipass ==\u003e Downloading https://github.com/canonical/multipass/releases/download/v1.12.2/multipass-1.12.2+mac-Darwin.pkg ==\u003e Installing Cask multipass installer: Package name is multipass installer: Installing at base path / installer: The install was successful. multipass was successfully installed! ➜ multipass list No instances found. ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:5:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 MicroK8s ➜ brew install ubuntu/microk8s/microk8s ==\u003e Tapping ubuntu/microk8s Cloning into '/opt/homebrew/Library/Taps/ubuntu/homebrew-microk8s'... ==\u003e Fetching ubuntu/microk8s/microk8s ==\u003e Installing microk8s from ubuntu/microk8s Run `microk8s install` to start with MicroK8s ➜ microk8s install Launched: microk8s-vm microk8s (1.28/stable) v1.28.15 from Canonical✓ installed microk8s-integrator-macos 0.1 from Canonical✓ installed MicroK8s is up and running. See the available commands with `microk8s --help`. ➜ microk8s status --wait-ready microk8s is running high-availability: no datastore master nodes: 127.0.0.1:19001 datastore standby nodes: none addons: enabled: dns # (core) CoreDNS ha-cluster # (core) Configure high availability on the current node helm # (core) Helm - the package manager for Kubernetes helm3 # (core) Helm 3 - the package manager for Kubernetes disabled: cert-manager # (core) Cloud native certificate management cis-hardening # (core) Apply CIS K8s hardening community # (core) The community addons repository dashboard # (core) The Kubernetes dashboard host-access # (core) Allow Pods connecting to Host services smoothly hostpath-storage # (core) Storage class; allocates storage from host directory ingress # (core) Ingress controller for external access kube-ovn # (core) An advanced network fabric for Kubernetes mayastor # (core) OpenEBS MayaStor metallb # (core) Loadbalancer for your Kubernetes cluster metrics-server # (core) K8s Metrics Server for API access to service metrics minio # (core) MinIO object storage observability # (core) A lightweight observability stack for logs, traces and metrics prometheus # (core) Prometheus operator for monitoring and logging rbac # (core) Role-Based Access Control for authorisation registry # (core) Private image registry exposed on localhost:32000 rook-ceph # (core) Distributed Ceph storage using Rook storage # (core) Alias to hostpath-storage add-on, deprecated ➜ multipass info microk8s-vm Name: microk8s-vm State: Running Snapshots: 0 IPv4: 192.168.64.6 10.1.254.64 Release: Ubuntu 22.04.5 LTS Image hash: 7b86a56f8069 (Ubuntu 22.04 LTS) CPU(s): 2 Load: 0.73 0.40 0.16 Disk usage: 2.9GiB out of 48.4GiB Memory usage: 624.6MiB out of 3.8GiB Mounts: -- 启用 ingress 插件 ➜ microk8s enable ingress Infer repository core for addon ingress Enabling Ingress ingressclass.networking.k8s.io/public created ingressclass.networking.k8s.io/nginx created namespace/ingress created serviceaccount/nginx-ingress-microk8s-serviceaccount created clusterrole.rbac.authorization.k8s.io/nginx-ingress-microk8s-clusterrole created role.rbac.authorization.k8s.io/nginx-ingress-microk8s-role created clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-microk8s created rolebinding.rbac.authorization.k8s.io/nginx-ingress-microk8s created configmap/nginx-load-balancer-microk8s-conf created configmap/nginx-ingress-tcp-microk8s-conf created configmap/nginx-ingress-udp-microk8s-conf created daemonset.apps/nginx-ingress-microk8s-controller created Ingress is enabled ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:5:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ vim nginx-deploy-svc-ingress.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 --- apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: nginx-ingress annotations: nginx.ingress.kubernetes.io/rewrite-target: / spec: rules: - http: paths: - path: / pathType: Prefix backend: service: name: nginx-svc port: number: 80 ➜ microk8s kubectl apply -f nginx-deploy-svc-ingress.yaml deployment.apps/nginx-deploy created service/nginx-svc created ingress.networking.k8s.io/nginx-ingress created ➜ microk8s kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-7c5ddbdf54-ld8xc 1/1 Running 0 62s pod/nginx-deploy-7c5ddbdf54-t44vz 1/1 Running 0 62s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.152.183.1 \u003cnone\u003e 443/TCP 22m service/nginx-svc NodePort 10.152.183.115 \u003cnone\u003e 80:30945/TCP 62s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 62s NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-7c5ddbdf54 2 2 2 62s ➜ microk8s kubectl get ingress NAME CLASS HOSTS ADDRESS PORTS AGE nginx-ingress public * 127.0.0.1 80 2m17s 通过 Ingress 访问 Nginx: http://192.168.64.6:80 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:5:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 Multipass 和 MicroK8s ➜ microk8s stop Stopped. ➜ brew uninstall ubuntu/microk8s/microk8s ➜ brew untap ubuntu/microk8s ➜ rm -rf ~/.microk8s ➜ multipass delete microk8s-vm ➜ multipass purge ➜ multipass list No instances found. ➜ brew uninstall --cask multipass ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:5:5","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"K0S 结合 Multipass 实践 K0S 是简单、稳固且经过认证的 Kubernetes 发行版。 Multipass 是 Ubuntu 公司 Canonical 开发的用于快速创建、管理和操作 Ubuntu 虚拟机的工具。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:6:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Virtualization: Multipass CPUs: 1 Memory: 1Gi Disk: 10GiB Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:6:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 Multipass ➜ brew install --cask multipass ==\u003e Downloading https://github.com/canonical/multipass/releases/download/v1.16.0/multipass-1.16.0+mac-Darwin.pkg ==\u003e Installing Cask multipass installer: Package name is multipass installer: Installing at base path / installer: The install was successful. multipass was successfully installed! ➜ multipass launch --name k0s-controller --cpus 1 --mem 1G --disk 10G Launched: k0s-controller ➜ multipass launch --name k0s-worker --cpus 1 --mem 1G --disk 10G Launched: k0s-worker ➜ multipass info k0s-controller Name: k0s-controller State: Running Snapshots: 0 IPv4: 192.168.64.7 Release: Ubuntu 24.04.2 LTS Image hash: bbecbb88100e (Ubuntu 24.04 LTS) CPU(s): 1 Load: 0.04 0.03 0.01 Disk usage: 2.0GiB out of 9.6GiB Memory usage: 222.6MiB out of 952.9MiB Mounts: -- ➜ multipass info k0s-worker Name: k0s-worker State: Running Snapshots: 0 IPv4: 192.168.64.8 Release: Ubuntu 24.04.2 LTS Image hash: bbecbb88100e (Ubuntu 24.04 LTS) CPU(s): 1 Load: 0.04 0.01 0.00 Disk usage: 2.0GiB out of 9.6GiB Memory usage: 222.4MiB out of 952.9MiB Mounts: -- ➜ multipass exec k0s-controller -- bash -c \"mkdir -p ~/.ssh \u0026\u0026 echo '$(cat ~/.ssh/id_rsa.pub)' \u003e\u003e ~/.ssh/authorized_keys\" ➜ multipass exec k0s-worker -- bash -c \"mkdir -p ~/.ssh \u0026\u0026 echo '$(cat ~/.ssh/id_rsa.pub)' \u003e\u003e ~/.ssh/authorized_keys\" ➜ ssh ubuntu@192.168.64.7 Are you sure you want to continue connecting (yes/no/[fingerprint])? yes ubuntu@k0s-worker:~$ exit logout Connection to 192.168.64.7 closed. ➜ ssh ubuntu@192.168.64.8 Are you sure you want to continue connecting (yes/no/[fingerprint])? yes ubuntu@k0s-worker:~$ exit logout Connection to 192.168.64.8 closed. ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:6:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 K0S ➜ brew install k0sproject/tap/k0sctl ==\u003e Tapping k0sproject/tap Cloning into '/opt/homebrew/Library/Taps/k0sproject/homebrew-tap'... Tapped 2 formulae (17 files, 98KB). ==\u003e Fetching k0sproject/tap/k0sctl ==\u003e Downloading https://github.com/k0sproject/homebrew-tap/releases/download/k0sctl-0.25.1/k0sctl-0.25.1.arm64_sonoma.bottle.tar.gz ==\u003e Installing k0sctl from k0sproject/tap ==\u003e Pouring k0sctl-0.25.1.arm64_sonoma.bottle.tar.gz /opt/homebrew/Cellar/k0sctl/0.25.1: 9 files, 18.6MB ➜ k0sctl init \u003e k0sctl.yaml ➜ vim k0sctl.yaml apiVersion: k0sctl.k0sproject.io/v1beta1 kind: Cluster metadata: name: k0s-cluster user: admin spec: hosts: - ssh: address: 192.168.64.7 user: ubuntu port: 22 keyPath: ~/.ssh/id_rsa role: controller - ssh: address: 192.168.64.8 user: ubuntu port: 22 keyPath: ~/.ssh/id_rsa role: worker options: wait: enabled: true drain: enabled: true gracePeriod: 2m0s timeout: 5m0s force: true ignoreDaemonSets: true deleteEmptyDirData: true podSelector: \"\" skipWaitForDeleteTimeout: 0s concurrency: limit: 30 workerDisruptionPercent: 10 uploads: 5 evictTaint: enabled: false taint: k0sctl.k0sproject.io/evict=true effect: NoExecute controllerWorkers: false ➜ k0sctl apply --config k0sctl.yaml INFO ==\u003e Running phase: Set k0s version INFO Looking up latest stable k0s version INFO Using k0s version v1.33.2+k0s.0 INFO ==\u003e Running phase: Connect to hosts INFO [ssh] 192.168.64.8:22: connected INFO [ssh] 192.168.64.7:22: connected INFO ==\u003e Running phase: Detect host operating systems INFO [ssh] 192.168.64.7:22: is running Ubuntu 24.04.2 LTS INFO [ssh] 192.168.64.8:22: is running Ubuntu 24.04.2 LTS INFO ==\u003e Running phase: Acquire exclusive host lock INFO ==\u003e Running phase: Prepare hosts INFO ==\u003e Running phase: Gather host facts INFO [ssh] 192.168.64.7:22: using k0s-controller as hostname INFO [ssh] 192.168.64.8:22: using k0s-worker as hostname INFO [ssh] 192.168.64.7:22: discovered enp0s1 as private interface INFO [ssh] 192.168.64.8:22: discovered enp0s1 as private interface INFO ==\u003e Running phase: Validate hosts INFO validating clock skew INFO ==\u003e Running phase: Validate facts INFO ==\u003e Running phase: Download k0s on hosts INFO [ssh] 192.168.64.8:22: downloading k0s v1.33.2+k0s.0 INFO [ssh] 192.168.64.7:22: downloading k0s v1.33.2+k0s.0 INFO ==\u003e Running phase: Install k0s binaries on hosts INFO [ssh] 192.168.64.7:22: validating configuration INFO ==\u003e Running phase: Configure k0s INFO [ssh] 192.168.64.7:22: installing new configuration INFO ==\u003e Running phase: Initialize the k0s cluster INFO [ssh] 192.168.64.7:22: installing k0s controller INFO [ssh] 192.168.64.7:22: waiting for the k0s service to start INFO [ssh] 192.168.64.7:22: wait for kubernetes to reach ready state INFO ==\u003e Running phase: Install workers INFO [ssh] 192.168.64.7:22: generating a join token for worker 1 INFO [ssh] 192.168.64.8:22: validating api connection to https://192.168.64.7:6443 using join token INFO [ssh] 192.168.64.8:22: writing join token to /etc/k0s/k0stoken INFO [ssh] 192.168.64.8:22: installing k0s worker INFO [ssh] 192.168.64.8:22: starting service INFO [ssh] 192.168.64.8:22: waiting for node to become ready INFO ==\u003e Running phase: Release exclusive host lock INFO ==\u003e Running phase: Disconnect from hosts INFO ==\u003e Finished in 1m18s INFO k0s cluster version v1.33.2+k0s.0 is now installed INFO Tip: To access the cluster you can now fetch the admin kubeconfig using: INFO k0sctl kubeconfig ➜ k0sctl kubeconfig \u003e k0s.kubeconfig ➜ kubectl --kubeconfig=k0s.kubeconfig get all --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE kube-system pod/coredns-5c8cb48c4-rr9k2 1/1 Running 0 8m54s kube-system pod/konnectivity-agent-sndm9 1/1 Running 0 8m50s kube-system pod/kube-proxy-csvw7 1/1 Running 0 8m53s kube-system pod/kube-router-5nn4t 1/1 Running 0 8m53s kube-system pod/metrics-server-7db8586f5-d7p8h 1/1 Running 0 8m50s NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE default service/kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 9m5s kube-system ser","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:6:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ vim nginx-deploy-svc.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 ➜ kubectl --kubeconfig=k0s.kubeconfig apply -f nginx-deploy-svc.yaml deployment.apps/nginx-deploy created service/nginx-svc created ➜ kubectl --kubeconfig=k0s.kubeconfig get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-86c57bc6b8-pm68d 1/1 Running 0 22s pod/nginx-deploy-86c57bc6b8-tchhj 1/1 Running 0 22s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 33m service/nginx-svc NodePort 10.104.182.55 \u003cnone\u003e 80:32110/TCP 22s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 22s NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-86c57bc6b8 2 2 2 22s 通过 NodePort 访问 Nginx: http://192.168.64.8:32110 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:6:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 Multipass 和 K0S ➜ multipass shell k0s-controller ubuntu@k0s-controller:~$ sudo k0s status Version: v1.33.2+k0s.0 Process ID: 2213 Role: controller Workloads: false SingleNode: false ubuntu@k0s-controller:~$ sudo k0s kubectl get nodes NAME STATUS ROLES AGE VERSION k0s-worker Ready \u003cnone\u003e 40m v1.33.2+k0s ubuntu@k0s-controller:~$ sudo k0s stop ubuntu@k0s-controller:~$ exit logout ➜ multipass delete k0s-controller k0s-worker ➜ multipass list Name State IPv4 Image k0s-controller Deleted -- Ubuntu 24.04 LTS k0s-worker Deleted -- Ubuntu 24.04 LTS ➜ multipass purge ➜ multipass list No instances found. ➜ brew uninstall --cask multipass ➜ brew uninstall k0sctl ➜ brew untap k0sproject/tap ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:6:5","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"Talos 实践 Talos 是为 Kubernetes 环境设计的安全、最小化且只读的容器化 Linux 操作系统。 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:7:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"基础环境 OS: macOS Architecture: ARM64 Driver: Docker Installer: Homebrew ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:7:1","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"安装使用 Talos ➜ brew install siderolabs/tap/talosctl ==\u003e Tapping siderolabs/tap Cloning into '/opt/homebrew/Library/Taps/siderolabs/homebrew-tap'... ==\u003e Fetching siderolabs/tap/talosctl ==\u003e Downloading https://github.com/siderolabs/talos/releases/download/v1.10.5/talosctl-darwin-arm64 ==\u003e Installing talosctl from siderolabs/tap /opt/homebrew/Cellar/talosctl/1.10.5: 7 files, 85.6MB, built in 4 seconds ➜ talosctl cluster create validating CIDR and reserving IPs generating PKI and tokens creating state directory in \"/Users/damonguo/.talos/clusters/talos-default\" downloading ghcr.io/siderolabs/talos:v1.10.5 creating network talos-default creating controlplane nodes creating worker nodes waiting for API bootstrapping cluster waiting for etcd to be healthy: OK waiting for etcd members to be consistent across nodes: OK waiting for etcd members to be control plane nodes: OK waiting for apid to be ready: OK waiting for all nodes memory sizes: OK waiting for all nodes disk sizes: OK waiting for no diagnostics: OK waiting for kubelet to be healthy: OK waiting for all nodes to finish boot sequence: OK waiting for all k8s nodes to report: OK waiting for all control plane static pods to be running: OK waiting for all control plane components to be ready: OK waiting for all k8s nodes to report ready: OK waiting for kube-proxy to report ready: OK waiting for coredns to report ready: OK waiting for all k8s nodes to report schedulable: OK merging kubeconfig into \"/Users/damonguo/.kube/config\" PROVISIONER docker NAME talos-default NETWORK NAME talos-default NETWORK CIDR 10.5.0.0/24 NETWORK GATEWAY 10.5.0.1 NETWORK MTU 1500 KUBERNETES ENDPOINT https://127.0.0.1:60132 NODES: NAME TYPE IP CPU RAM DISK /talos-default-controlplane-1 controlplane 10.5.0.2 2.00 2.1 GB - /talos-default-worker-1 worker 10.5.0.3 2.00 2.1 GB - ➜ kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME talos-default-controlplane-1 Ready control-plane 108s v1.33.2 10.5.0.2 \u003cnone\u003e Talos (v1.10.5) 6.14.10-orbstack-00291-g1b252bd3edea containerd://2.0.5 talos-default-worker-1 Ready \u003cnone\u003e 102s v1.33.2 10.5.0.3 \u003cnone\u003e Talos (v1.10.5) 6.14.10-orbstack-00291-g1b252bd3edea containerd://2.0.5 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:7:2","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"部署测试 Nginx Service ➜ vim nginx-deploy-svc.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx type: NodePort ports: - name: http port: 80 ➜ kubectl apply -f nginx-deploy-svc.yaml Warning: would violate PodSecurity \"restricted:latest\": allowPrivilegeEscalation != false (container \"nginx\" must set securityContext.allowPrivilegeEscalation=false), unrestricted capabilities (container \"nginx\" must set securityContext.capabilities.drop=[\"ALL\"]), runAsNonRoot != true (pod or container \"nginx\" must set securityContext.runAsNonRoot=true), seccompProfile (pod or container \"nginx\" must set securityContext.seccompProfile.type to \"RuntimeDefault\" or \"Localhost\") deployment.apps/nginx-deploy created service/nginx-svc created ➜ kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-deploy-86c57bc6b8-dk5fh 1/1 Running 0 33s pod/nginx-deploy-86c57bc6b8-hb44f 1/1 Running 0 33s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.96.0.1 \u003cnone\u003e 443/TCP 8m7s service/nginx-svc NodePort 10.109.129.119 \u003cnone\u003e 80:32659/TCP 33s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-deploy 2/2 2 2 33s NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-deploy-86c57bc6b8 2 2 2 33s ➜ kubectl port-forward svc/nginx-svc 30081:80 Forwarding from 127.0.0.1:30081 -\u003e 80 Forwarding from [::1]:30081 -\u003e 80 通过 NodePort 本地端口映射访问 Nginx: http://127.0.0.1:30081 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:7:3","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"清理 Talos ➜ talosctl cluster destroy destroying node talos-default-controlplane-1 destroying node talos-default-worker-1 destroying network talos-default ➜ talosctl cluster show PROVISIONER docker NAME talos-default NETWORK NAME NETWORK CIDR NETWORK GATEWAY NETWORK MTU 0 KUBERNETES ENDPOINT NODES: NAME TYPE IP CPU RAM DISK ➜ kubectl config delete-context admin@talos-default deleted context admin@talos-default from /Users/damonguo/.kube/config ➜ brew uninstall talosctl ➜ brew untap siderolabs/tap ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:7:4","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"总结 针对不同的使用需求，轻量级 Kubernetes 发行版在架构、数据存储、容器运行时、部署依赖、部署难度、插件等方面各具特点，选择时可结合实际场景和技术偏好进行权衡。 发行版 架构 数据存储 容器运行时 部署依赖 部署难度 插件 适用场景 Minikube 单节点伪集群 etcd Podman / Docker / containerd Podman / Docker 简单 优 本地开发 KinD 单节点伪集群 etcd containerd Docker 简单 差 本地开发、CI/CD K3S 多节点真集群 SQLite / etcd /MySQL / PostgreSQL containerd Linux 适中 良 边缘计算、生产运营 K3D 单节点伪集群 SQLite / etcd / MySQL / PostgreSQL containerd Docker 简单 良 本地开发、CI/CD MicroK8s 多节点真集群 etcd / dqlite (distributed SQLite) containerd / Kata Linux 适中 优 本地开发、生产运营 K0S 多节点真集群 etcd / SQLite / MySQL / PostgreSQL containerd Linux 适中 中 边缘计算、生产运营 Talos 多节点真集群 etcd containerd Docker 简单 差 本地开发、生产运营 ","date":"2023-12-07","objectID":"/2023/12/lightweight-kubernetes-distributions-practices/:8:0","tags":["Kubernetes","Podman"],"title":"轻量级 Kubernetes 发行版实践","uri":"/2023/12/lightweight-kubernetes-distributions-practices/"},{"categories":["技能矩阵"],"content":"在互联网寻址结构中，互联网工程任务组 IETF 和互联网号码分配局 IANA 保留了许多用于特殊目的的 IP 地址。","date":"2023-03-29","objectID":"/2023/03/what-are-private-ip-addresses/","tags":["网络"],"title":"私有 IP 地址包括哪些","uri":"/2023/03/what-are-private-ip-addresses/"},{"categories":["技能矩阵"],"content":"在互联网寻址结构中，互联网工程任务组 IETF 和互联网号码分配局 IANA 保留了许多用于特殊目的的 IP 地址。 ","date":"2023-03-29","objectID":"/2023/03/what-are-private-ip-addresses/:0:0","tags":["网络"],"title":"私有 IP 地址包括哪些","uri":"/2023/03/what-are-private-ip-addresses/"},{"categories":["技能矩阵"],"content":"对私有 IP 地址的误解 内网 IP 地址、外网 IP 地址这个概念并不是固定的，而是相对的。如果用私有 IP 地址、公网 IP 地址或者局域网 IP 地址、互联网 IP 地址来理解就容易多了。 几乎所有的教科书都会告诉大家私有 IP 地址有3种： A 类：10.0.0.0 - 10.255.255.255 B 类：172.16.0.0 - 172.31.255.255 C 类：192.168.0.0 - 192.168.255.255 但事实上不止这些，从 Wikipedia 的 Reserved IP addresses 页面可以了解到在互联网寻址结构中，互联网工程任务组 IETF 和互联网号码分配局 IANA 保留了许多用于特殊目的的 IP 地址。 ","date":"2023-03-29","objectID":"/2023/03/what-are-private-ip-addresses/:1:0","tags":["网络"],"title":"私有 IP 地址包括哪些","uri":"/2023/03/what-are-private-ip-addresses/"},{"categories":["技能矩阵"],"content":"IPv4保留地址列表 其中 IPv4部分如下所示： 地址块 CIDR 范围 地址数 效用域 用途 0.0.0.0/8 0.0.0.0 – 0.255.255.255 16,777,216 软件 用于广播信息到当前主机 10.0.0.0/8 10.0.0.0 – 10.255.255.255 16,777,216 专用网络 用于专用网络中的本地通信 100.64.0.0/10 100.64.0.0 – 100.127.255.255 4,194,304 专用网络 用于在电信级 NAT 环境中服务提供商与其用户通信 127.0.0.0/8 127.0.0.0 – 127.255.255.255 16,777,216 主机 用于到本地主机的环回地址 169.254.0.0/16 169.254.0.0 – 169.254.255.255 65,536 链路 用于单链路的两个主机之间的链路本地地址 172.16.0.0/12 172.16.0.0 – 172.31.255.255 1,048,576 专用网络 用于专用网络中的本地通信 192.0.0.0/24 192.0.0.0 – 192.0.0.255 256 专用网络 用于 IANA 的 IPv4特殊用途地址表 192.0.2.0/24 192.0.2.0 – 192.0.2.255 256 文档 分配为用于文档和示例中的 TEST-NET，不应该被公开使用 192.31.196.0/24 192.31.196.0 - 192.31.196.255 256 专用网络 旨在处理私有使用地址的反向 DNS 查询，不会出现在公共 DNS 系统中 192.52.193.0/24 192.52.193.0 - 192.52.193.255 256 专用网络 用于自动组播隧道 AMT 192.88.99.0/24 192.88.99.0 – 192.88.99.255 256 互联网 用于 6to4 任播中继，已废弃 192.168.0.0/16 192.168.0.0 – 192.168.255.255 65,536 专用网络 用于专用网络中的本地通信 192.175.48.0/24 192.175.48.0 - 192.175.48.255 256 专用网络 旨在处理私有使用地址的反向 DNS 查询，不会出现在公共 DNS 系统中 198.18.0.0/15 198.18.0.0 – 198.19.255.255 131,072 专用网络 用于测试两个不同的子网的网间通信 198.51.100.0/24 198.51.100.0 – 198.51.100.255 256 文档 分配为用于文档和示例中的 TEST-NET-2，不应该被公开使用 203.0.113.0/24 203.0.113.0 – 203.0.113.255 256 文档 分配为用于文档和示例中的 TEST-NET-3，不应该被公开使用 240.0.0.0/4 240.0.0.0 – 255.255.255.254 268,435,455 互联网 用于将来使用 255.255.255.255/32 255.255.255.255 1 子网 用于受限广播地址 ","date":"2023-03-29","objectID":"/2023/03/what-are-private-ip-addresses/:2:0","tags":["网络"],"title":"私有 IP 地址包括哪些","uri":"/2023/03/what-are-private-ip-addresses/"},{"categories":["技能矩阵"],"content":"参考 https://en.wikipedia.org/wiki/Reserved_IP_addresses https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml ","date":"2023-03-29","objectID":"/2023/03/what-are-private-ip-addresses/:3:0","tags":["网络"],"title":"私有 IP 地址包括哪些","uri":"/2023/03/what-are-private-ip-addresses/"},{"categories":["技能矩阵"],"content":"通过 Bucket Level Policy 合理限制 S3 Bucket 的访问请求来源后，能够在 AKSK 泄露的情况下仍然保障 AWS S3 Bucket 的数据安全。","date":"2022-11-20","objectID":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/","tags":["AWS","安全"],"title":"通过 Bucket Level Policy 加强 AWS S3 数据安全防护","uri":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/"},{"categories":["技能矩阵"],"content":"通过 Bucket Level Policy 合理限制 S3 Bucket 访问请求来源后，能够在 AKSK 泄露的情况下仍然保障 AWS S3 Bucket 的数据安全。 ","date":"2022-11-20","objectID":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/:0:0","tags":["AWS","安全"],"title":"通过 Bucket Level Policy 加强 AWS S3 数据安全防护","uri":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/"},{"categories":["技能矩阵"],"content":"背景 随着公有云的不断发展，越来越多的企业通过云服务来构建基础设施，并采用对象存储作为企业的数据底座。 由于安全意识较弱，大量的技术人员为了方便，喜欢通过 AKSK（Access Key and Secret Key）的授权方式对资源进行访问。AKSK 由两串字符构成，通过 AKSK 能够直接用命令行工具或 API 代码获取到对应用户的权限。以 AWS 为例，通过一个简单的 aws s3 sync 命令就可以将 S3 Bucket 的数据全部拖走。 由于 AKSK 泄露造成对象存储中数据被拖走的案例，可谓是屡见不鲜，部分案例所造成的影响甚至可以用骇人听闻来形容。采用技术手段规避掉这类风险是很有必要的，以 AWS 为例，通过 Bucket Level Policy 合理限制 S3 Bucket 的访问请求来源后，能够在 AKSK 泄露的情况下仍然保障 AWS S3 Bucket 的数据安全。 当然，这里还有一个前提，就是泄露的 AKSK 对应用户的权限不能太大，比如具备管理员权限或包含其它服务如 IAM、EC2、Lambda 等服务的完整权限。否则仍然可能通过其它服务绕过 Bucket Level Policy 的合理限制或修改重置 Bucket Level Policy，造成权限蔓延。对于这类情况，可以通过 SCP 从组织账号级别对各种服务进行限制，Policy 也会更复杂一些。 ","date":"2022-11-20","objectID":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/:1:0","tags":["AWS","安全"],"title":"通过 Bucket Level Policy 加强 AWS S3 数据安全防护","uri":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/"},{"categories":["技能矩阵"],"content":"Policy 示例 以下 Bucket Level Policy 示例代码默认采用了 Deny（禁用）策略，仅对以下几种请求放行： 当请求直接来自于 AWS Service； 当请求来自于指定的 VPC ID； 当请求来自于指定的 Role； 当请求来自于指定的 IP。 { \"Version\": \"2012-10-17\", \"Id\": \"RestrictVPCsAndARNsAndSourceIPs\", \"Statement\": [ { \"Sid\": \"VPCsAndARNsAndSourceIPs\", \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": \"s3:*\", \"Resource\": [ \"arn:aws:s3:::bucket-name\", \"arn:aws:s3:::bucket-name/*\" ], \"Condition\": { \"Bool\": { \"aws:ViaAWSService\": \"false\" }, \"StringNotEqualsIfExists\": { \"aws:SourceVpc\": [ \"vpc-857abc857abc875aa\", \"vpc-857cba857cba875bb\" ] }, \"ArnNotLikeIfExists\": { \"aws:PrincipalArn\": [ \"arn:aws:iam::857857857857:role/role-name\", \"arn:aws:iam::361361361361:role/role-name\", \"arn:aws:iam::857857857857:role/role*\", \"arn:aws:iam::361361361361:role/role*\" ] }, \"NotIpAddressIfExists\": { \"aws:SourceIp\": [ \"8.5.7.11/32\", \"8.5.7.22/32\" ] } } } ] } ","date":"2022-11-20","objectID":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/:2:0","tags":["AWS","安全"],"title":"通过 Bucket Level Policy 加强 AWS S3 数据安全防护","uri":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/"},{"categories":["技能矩阵"],"content":"更完善的方案 更加完善地保障 S3 Bucket 的数据安全，可以通过访问来源、最小访问权限、安全监测、日志监控、数据加密、配置检查、数据副本等方面开展： 通过 SCP 从组织账号级别限制 S3 以及其它 AWS Service 的访问来源 通过 Bucket Level Policy 限制具体的 S3 Action 启用 GuardDuty 监测可疑的 S3 访问活动 使用 Macie 扫描 S3 中的敏感数据 启用 KMS 加密 S3 中的数据 启用 S3 Versioning 保留数据副本避免误删除，或启用 S3 Object Lock 禁用数据删除功能 启用 S3 访问日志和 CloudTrail 日志监控 通过 Security Hub 检查 S3 设置，对 CloudWatch 日志进行自定义分析和报警 采用 S3 跨区域复制功能自动同步备份 ","date":"2022-11-20","objectID":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/:3:0","tags":["AWS","安全"],"title":"通过 Bucket Level Policy 加强 AWS S3 数据安全防护","uri":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/"},{"categories":["技能矩阵"],"content":"参考 https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html https://aws.amazon.com/cn/blogs/security/top-10-security-best-practices-for-securing-data-in-amazon-s3/ ","date":"2022-11-20","objectID":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/:4:0","tags":["AWS","安全"],"title":"通过 Bucket Level Policy 加强 AWS S3 数据安全防护","uri":"/2022/11/enhance-aws-s3-data-security-with-bucket-level-policy/"},{"categories":["技能矩阵"],"content":"正确表示常用标点符号的中英文名称。","date":"2022-05-31","objectID":"/2022/05/punctuation-marks/","tags":["English"],"title":"常用标点符号中英文名称对照","uri":"/2022/05/punctuation-marks/"},{"categories":["技能矩阵"],"content":"正确表示常用标点符号的中英文名称。 参考资料：List of typographical symbols and punctuation marks 标点符号 英文名 中文名 ~ tilde 波浪符 ` backquote 反引号 ! exclamation mark 感叹号 @ at 地址号 # hash , number sign , pound sign 井号 $ dollar 美元符号 % percent 百分号 ^ caret 插入号 \u0026 and , ampersand 表示 and 的符号 * asterisk , star / multiply / pointer 星号 / 乘号 / 指针 ( parenleft , opening parenthesis 左圆括号 ) parenright , closing parenthesis 右圆括号 ( ) parentheses 圆括号 _ underscore 下划线 - minus / hyphen 减号，负号 / 连字符 + plus 加号 = equal 等号 { braceleft , opening brace 左花括号 } braceright , closing brace 右花括号 { } braces 花括号 [ bracketleft , opening bracket 左方括号 ] bracketright , closing bracket 右方括号 [ ] brackets 方括号 | bar , vertical bar 竖线 \\ backslash 反斜杠 : colon 冒号 ; semicolon 分号 \" double quote 双引号 \" \" quotation marks 引号 ' quote / apostrophe 单引号 / 撇号 \u003c less-than / opening angle 小于号 / 左尖括号 \u003e greater-than / closing angle 大于号 / 右尖括号 \u003c \u003e angle brackets 尖括号 , comma 逗号 . full stop , period / dot 句号 / 点 ? question mark 问号 / slash 斜杠 – dash 破折号 … dots , ellipsis 省略号 || parallel 双线号 → arrow 箭头 ✓ tick , check 钩 x cross 叉 ","date":"2022-05-31","objectID":"/2022/05/punctuation-marks/:0:0","tags":["English"],"title":"常用标点符号中英文名称对照","uri":"/2022/05/punctuation-marks/"},{"categories":["读书笔记"],"content":"富人买入资产，穷人只有支出，中产阶级购买自以为是资产的负债。","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"富人买入资产，穷人只有支出，中产阶级购买自以为是资产的负债。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:0:0","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"序 本书的作者罗伯特·清崎有两个爸爸：「穷爸爸」是他的亲生父亲，一个拥有博士头衔的教育官员；「富爸爸」是他好朋友的父亲，一个高中没毕业却善于投资理财的企业家。 清崎追寻富爸爸的脚步，踏入商界，登上了致富快车。清崎以亲身经历的财富故事展示了穷爸爸和富爸爸截然不同的金钱观和财富观：穷人为钱工作，富人让钱为自己工作。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:1:0","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:0","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"0. 序言 两个爸爸的事业都相当成功，而且一辈子都非常勤奋。他们都有着丰厚的收入。然而其中一个人终其一生都在个人财务问题的泥沼中挣扎，另一个人则成了夏威夷最富有的人之一。一个爸爸去世后为家人、慈善机构和教堂留下了数千万美元的遗产，而另一个爸爸只留下一些待付的账单。 两个爸爸都是那种意志坚强、富有魅力、具有影响力的人。他们都曾给我建议，但建议的内容并不相同；他们也都深信教育的力量，但推荐给我的课程却从不一样。 穷人的孩子可能会以优异的成绩毕业，但同时也秉承了穷人的理财方式和思维习惯。 遗憾的是，学校并没有开设有关“金钱”的课程。学校教育只专注于学术知识的传授和专业技能的培养，却忽视了理财技能的培训。 我认识到有一点很重要，那就是一个人的观念对他的一生影响巨大。例如，我的一个爸爸总是习惯说“我可付不起”，而另一个爸爸则禁止我们说这样的话，他坚持让我这样说：“我怎样才能付得起？”这两句话，一句是陈述句，另一句是疑问句。一句让你放弃，而另一句则促使你去想办法。 一个爸爸努力存钱，另一个爸爸则不断投资。一个爸爸教我怎样去写一份让人印象深刻的简历，以便找到一份好工作；另一个爸爸则教我写下雄心勃勃的事业规划和财务计划，进而创造创业的机会。 贫穷和破产的区别是：破产是暂时的，而贫穷是永久的。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:1","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"1. 第一章 富人不为钱工作 富爸爸向罗伯特解释道，生活是一门课程，但这门课程并不会用语言来教你，它只是推着你转。在这个过程中，有些人会变得愤怒并把这些气发泄到他的老板或者他爱的人身上，而有些人却从中学会了很多东西，并欢迎生活来推动他们。 学校的教育固然重要，他说，但对大部分人来说，可悲的是离开学校是学习的终点，而不是起点。对于孩子们来说最主要的还是学会用感情来思考，而不是带着感情去思考。他们必须学会选择他们的想法。 他告诉他们要留意可以挣钱的途径：“如果你们能看到一个机会，就注定你们会在一生中不断地发现机会。” 左脑时刻：尽管有一份高收入的工作，像罗伯特的穷爸爸一样的人仍只能勉强维持着收支平衡。 右脑时刻：用一个新颖的、具有创造性的方法去看待废弃的连环画可以带来的商机。 潜意识时刻：人们让恐惧和贪婪控制了自己的人生。 穷人和中产阶级为钱而工作。富人让钱为他工作。生活推着我们所有的人，有些人放弃了，有些人在抗争。少数人学会了这门课程，取得了进步，他们欢迎生活来推动他们。 工作只是试图用暂时的办法来解决长期的问题。 就像一幅画表现的：驴子拉车，因为主人在它面前挂了个胡萝卜。主人清楚自己想要去哪里，而驴子却只是在追逐一个幻影。但第二天驴子依旧会去拉车，因为又有胡萝卜放在它的面前。 在笼子里奔跑的小老鼠，不就像我们身边的大多数人吗？无论多么努力的奋斗，可我们在财务方面始终在原地转圈，获得不了自己追求的财富。牛津字典对老鼠赛跑的解释是：一种人们陷入为争夺财富或权利而进行激烈竞争的生活方式，通常这是一个令人疲惫不堪的过程。我们很多人的一生就是典型的老鼠赛跑模式。 身在老鼠赛跑圈的人们为金钱工作，每月的支出主要靠工资收入，没有属于自己的资产或者虽有资产，但带来的收入还远远不足以维持家庭的花费，只能辛苦工作赚钱，不断地为人生奋斗着。在老鼠赛跑之中求生存，越努力越心酸。在老鼠赛跑的人生中，我们生活的每一个阶段，如生孩子、离婚、失业、生病、出意外、吃官司等等，都和金钱密切相关而跳。 老鼠赛跑的诀窍不是挣越来越多的钱，因为衡量一个人财富的不是这个人能挣多少钱，而是这个人拥有多少资产。很多人之所以深陷老鼠赛跑陷阱，归根结底还是没有足够的金融财务知识，没能掌握金钱的运动规律，不具有富人的思维方式，也不清楚资产和负债真正的定义。穷人和富人的区别之一就在于穷人不知道金钱运动的规律，而富人却非常熟悉。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:2","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"2. 第二章 为什么要教授财务知识 在这个时代，比钱更重要的生存之道是我们所受的教育和学习的能力。 重要的不是你挣了多少钱，而是你能留下多少钱，以及能够留住多久。 所以当人们问起罗伯特该从哪儿开始致富时，他告诉他们富爸爸曾告诉他的答案：“如果你想发财，就要学习财务知识。” 如果你的模式是把收入都花掉，那么最可能的结果是在增加收入的同时也增加支出。 首要的规则，罗伯特说，就是你必须明白资产和负债的区别，并且只购买资产。这就是所有你应该知道的。尽管这很简单，但是很多人仍然不能够理解。 这是一张资产的现金流模式图。 图表的上半部分是收益表，也常被称为损益表，它被用来衡量收入和支出：金钱的进入和流出。图表的下半部分是资产负债表，它被用来说明资产和负债的情况。资产增加你的收入，它能把钱放进你的口袋。 这是一张负债的现金流模式图。负债会把钱从你的口袋里取走。 想变得富有吗？那就购买资产吧。这似乎很容易，但很多人陷入了财务危机，因为他们购买了负债。如果你想得到或者保住你的财富，你就必须充分理解这一点。这并非只是数字，它会告诉你一些东西。跟随图中的箭头来看看金钱是怎么流动的，或者说是“现金流”。它会告诉你财务状况的细节。 这是一张穷人的现金流图。 这是一张中产阶级的现金流图。 这是一张富人的现金流图。 通过这些简化的图表，现金流就能告诉你每个人怎么处理自己的钱。通常，那些负债的人认为解决方法就是挣更多的钱。但更多的钱不仅不能解决问题，还可能让问题更严重。 大部分人缺失的就是财务教育。这就是为什么他们在职业上很成功但始终在为了钱而苦苦挣扎。他们可能已经学会了怎么挣钱，但却不知道怎么去管理。一个聪明的人，也可能是财务上的文盲。他们知道如何努力工作挣钱，却不知道如何让钱为他们努力工作。 想变得富有吗？努力去购买创造收入的资产吧。当你真正理解什么是资产的时候，降低负债和支出，这会使你的资产不断增多。 那么如何知道自己是否富有了呢？罗伯特引用了巴克敏斯特·富勒的定义：“财富就是支撑一个人生存多长时间的能力，或者说，如果我今天停止工作，我还能活多久？” 用另一个方式来阐述：财富是将资产项产生的现金与支出项流出的现金进行比较而定的。当你的资产项能产生足够的收入来填补你的支出时，你就是富有的，即使你还没有什么钱。 左脑时刻：观察这些数字并学习它们所讲的故事。资产把钱放入你的口袋。如果有东西把钱从你的口袋里拿出来，它不是资产，而是负债。 右脑时刻：资产负债表清楚地解释了钱在不同人的生活中的运动规律。 潜意识时刻：被排斥的恐惧导致人们顺从，从不提出质疑，普遍接受别人的观点和流行趋势，最后却使自己的财务受到损害。 术语解析 资产：以最低限度的劳动将钱放到你口袋里的东西。 资产负债表：收益表的下半部分，之所以这么叫是因为它是用来平衡资产和负债的。 现金流：现金流进（收入）和现金流出（支出）。现金流的流向决定了什么是收入，什么是支出，什么是资产，什么是负债。现金流说明一切。 理财态度：在你赚了钱之后如何处理这些钱，又怎样防止别人从你手中拿走这些钱，怎么才能拥有这些钱更久，如何让钱为你工作。 黄金规则：有黄金的人制定规则。 收入：个人或企业进行商业活动作为回报得到的钱。 收益表或损益表：衡量收入和支出——钱的流入和流出。 负债：把钱从你的口袋里拿走的东西。 共同基金：集合股票、债券、证券等多种投资形式，由专业的投资公司管理，私人投资者通过购买份额以获取收益的投资方式。拥有共同基金的份额不代表拥有直接的相应公司的价值。 社会保险：一项社会福利或社会保险制度，通常由自动扣除工资而获得资金，用于补贴老年人或者残疾人。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:3","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"3. 第三章 关注自己的事业 大多数人工作是为其他人：他们的老板、政府（税）、银行（抵押贷款）。雷·克罗克和富爸爸所知道的第三个致富秘诀是：关注自己的事业。不要耗费一生为别人工作。 很多人耗尽一生去关注别人的事业并使他人致富。关注自己的事业并不意味着要开一个公司，虽然有些人会这样。你的事业的重心应该是你的资产项，而不是你的收入项。 晋升或者一份更好的工作只是围绕着工资收入转。只有你把额外的收入用来购买可产生收入的资产，你才能真正感到财务安全。 大多数穷人和中产阶级财务保守的根本原因在于，他们没有经济基础。他们必须依附于工作，安全运作，他们无法承担风险。 你可以继续白天的工作，但要购买真正的资产，而不是负债或一带回家就没有价值的个人用品。保持低支出，降低负债，为坚实的资产打造基础。 罗伯特说真正的资产分为以下几类： 1．不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了。 2．股票 3．债券 4．能够产生收入的房地产 5．票据（借据） 6．版税，如音乐、手稿、专利 7．其他任何有价值、可产生收入或有增值潜力并且有很好销路的东西 去获取你喜欢的资产。罗伯特喜欢房地产，因此他花了大量的时间思考并购买。如果你并不喜欢房地产，就不要投资它。 他并不建议人们去成立一个公司除非他是真的有这个意愿。否则，他会建议人们坚持日常的工作并关注自己的事业：建立自己稳固的资产。 左脑时刻：当资产产生的收入能够支付奢侈品时，才是你可以购买它们的时候。 右脑时刻：创造性地去想一想什么才是你的事业，而不是你的职业。 潜意识时刻：获取你所喜欢的资产，这样你才能很好地打理它们，享受其中的学习过程。 为了财务安全，人们需要关注自己的事业。 富人关心的焦点是资产而其他人关心的是收入。 存在财务问题的人经常耗费一生为别人工作，其中许多人在他们不能工作时就变得一无所有。 富人最后才买奢侈品，而穷人和中产阶级会先买奢侈品。穷人和中产阶级用他们的血汗钱和本应该留给子孙的遗产来购买奢侈品。 术语解析 债券：一种由授权发行者发行的向投资者借债并承诺到期偿还本金和利息的债务证券。 企业家：以获取利润为目的，创造一套体系来提供某个产品或服务的人。企业家愿意接受一定程度的风险来追求机会，在资本主义社会具有举足轻重的作用。 财务报表：一项关于你的收入、支出、资产、负债的表格。当你离开学校后，银行会根据你的这份“成绩单”来决定是否借给你钱。 股票：一个企业通过分配股份来筹措资金。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:4","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"4. 第四章 税收的历史和公司的力量 虽然普遍的观点都认为富人应该缴更多的税让穷人受益，但实际上是中产阶级在承担着沉重的税负，尤其是那些受过良好教育、高收入的中产阶级。 在富爸爸指导罗伯特的这些年间，富爸爸一直提醒他知识就是力量，而且钱越多，就越需要知识管理它，使它继续增加。没有这种知识，世界就会牵着你走。 雇用聪明的会计师和律师是很有必要的，因为付给他们的钱要比付给政府的少得多。不了解法律是要付出代价的。 让罗伯特这一切变为可能的是财商，或者叫财务知识。它由4部分组成：会计（财务知识，也就是解读数字的能力以及评估一项生意的优势和劣势）、投资（钱生钱的科学和策略）、了解市场（供给与需求的科学以及市场条件）、法律（减税优惠和在诉讼中获得保护）。 左脑时刻：会计就是财务知识或者解读数字的能力。如果你想建立一个商业帝国，这项能力至关重要。你管理的钱越多，就越要精确，否则你的大厦就会倒塌。 右脑时刻：投资就是“钱生钱”的科学。这包含策略和方案，这要使用属于创造的右脑来做。 潜意识时刻：了解市场是供给与需求的科学。在市场基本面或者说一项投资的经济意义基础上，你需要了解受感情驱动的市场的“技术面”。 雇员挣钱、纳税，并靠剩下的钱为生；企业挣钱、花钱，并只为剩下来的钱缴税。这是富人钻的最大的法律空子。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:5","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"5. 第五章 富人的投资 今天，信息便是财富。信息以光一样的速度在全世界迅速传播，变化会越来越快，越来越显著，新的千万富翁人数会极大地增加，同样，也会有许多人被远远地抛在后面。 财商就是让你有更多的选择，找到发现机会的方法或者改变局面来做自己喜欢的事情。 众所周知，钱并不是我们最伟大的资产，我们的头脑才是。试着训练我们的头脑，这样我们仅仅用点子和合约就可以赚取数百万美元。 左脑时刻：一小笔钱可以通过精明的、好的投资变成一大笔钱。 右脑时刻：罗伯特常常鼓励他的成人学生要从《富爸爸现金流》游戏中发现哪些情况是他们所知道的，哪些是他们还需要学习的。最重要的是，这个游戏能反映一个人的行为方式，它是一个实时的反馈系统。它不需要老师不停地讲解，它就像是一场个人间的对话，完全按照你的习惯定制。 潜意识时刻：我们都拥有巨大的潜能——这是上天赏赐的礼物。我们都或多或少地存在着某种自我怀疑的心理，从而阻碍前进的步伐。这种障碍很少是缺乏某种技术性的东西，更多的是缺乏自信。 在现实生活中，人们往往是依靠勇气而不是智慧去取得领先的位置的。 作为一名教师，我意识到过分的害怕和自我怀疑是毁掉我们才能的最大因素。看到学生们明明知道该做什么，却缺乏勇气付诸实际，我就感到十分悲哀。 陈旧的思想是那些在贫困线上苦苦挣扎的人背负的最大债务。原因很简单：他们没有意识到已有的某种思想或方法在昨天还是一种资产，今天却已经变成了负债。 富人往往更富有创造性，愿意经过精心筹划后再去冒险。 为什么你想提高自己的财商呢？因为你想成为能够自己创造机遇的人。 我们唯一的，也是最重要的资产是我们的头脑。如果使其得到良好的训练，它转瞬间就能创造大量的财富。而未经训练的头脑有可能创造无数的贫穷来拖垮一个家庭，甚至几代人。 如果投资机会太复杂而我又弄不明白，我就不会去投资。简单的数学计算和一般常识是有效理财所需要的一切。 通常，那些贴着“安全标签”的投资是被他人进行过风险处理的。它们是如此安全，以致于回报也少得可怜。 如果你清楚自己在做什么，那就不是在赌博；如果你把钱投进一笔交易然后只是祈祷，这才是在赌博。 好机会是用你的脑子而不是用你的眼睛看到的。懂得财商的重要性，这就是你最大的资产。不知道这一点，将成为你面临的最大的风险。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:6","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"6. 第六章 学会不为钱工作 这意味着我们太多人是专业性人才。如果我们多学习和掌握一项技能，我们的收入就会呈指数级增长。当涉及钱的时候，只掌握一项技能的人不得不努力工作。 成功所必需的管理技能包括：（1）现金流管理；（2）系统管理；（3）人员管理。最重要的专业技能是销售技能和营销技能。沟通能力，如书面表达、口头表达及谈判能力等对一个人的成功来说更是至关重要。罗伯特就是通过学习各种课程、看教学视频等来扩展知识并不断提高自己的这一技能的。 左脑时刻：辞去一份看似有前途的工作而去追求另一份工作，短期来看，你的薪水可能会减少；但从长远来看，你将从中获得巨大的收益。 右脑时刻：学习专业以外的其他技能将会使你受益。 潜意识时刻：面对你需要学习的新技能，请务必克服内心的恐惧和懒惰。而且你必须强迫自己去学习，像去健身房一样，当你做到之后，你会感到很高兴。 对于受过良好教育的爸爸来说，工作的稳定就是一切；而对于富爸爸来说，不断学习才是一切。 生活就像去健身房，最痛苦的事情是做出锻炼身体的决定，一旦你过了这一关，以后的事情就好办了。 世界上到处都是有才华的穷人。在很多情况下，他们贫穷、财务困难或者只能挣到低于他们应得的薪水，不是因为他们的学识不够，而是因为他们缺乏另一项技能。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:7","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"7. 第七章 克服困难 但掌握财务知识的人有时候还是不能积累丰厚的资产项，其主要原因有5个：（1）恐惧；（2）愤世嫉俗；（3）懒惰；（4）不良习惯；（5）自负。 左脑时刻：选择学会分析现实，而不是只会批评。愤世嫉俗者喜欢批评，但获胜者却常常分析并抓住其他人错过的、忽视的机会。 右脑时刻：用好的新习惯来克服旧的坏习惯，比如先支付自己，而不是最后才支付自己。 潜意识时刻：对失败的恐惧使太多的人退出博弈。相反，利用失败，将其作为激励以取得成功，正如得克萨斯人对待“阿拉莫之战”那样。 富人和穷人之间最主要的区别在于他们处理恐惧的方式不同。 我从未遇见不曾打丢一球的高尔夫球选手，也从未见过不曾伤心过的恋人，更未见过从不亏钱的富人。 对大多数人来说，他们在财务上不成功是因为对他们而言亏钱所造成的痛苦远远大于致富所带来的乐趣。 富爸爸知道失败只会使他更强大，更精明。他并不愿意亏钱，但他清楚自己是什么样的人，知道该怎样去面对损失。他接受了损失，然后将它变成赢利。 得克萨斯人并不掩饰失败，而是愈挫愈奋，他们接受失败的现实并将失败转化为动力。 摆脱“老鼠赛跑”式的生活在技术上讲十分容易，不需要接受接受太多的教育，可那些疑虑却使大多数人寸步难行。 愤世嫉俗者就像“小鸡”一样，每当心里害怕、怀疑的时候，他们就会像“小鸡”一样杞人忧天。 “我可付不起”带来的悲哀和无助感会使人们失望、迟钝以至意志消沉。“我怎样才能付得起”则打开了充满可能性的快乐和梦想之门。 如果我也学会先支付给自己，那我就会在财务上更“强壮”。应该在精神上和财务上都更“强壮”。在金钱、财务和投资领域，有许多人完全不知道自己在谈论什么。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:8","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"8. 第八章 开始行动 罗伯特提供了他自己一直遵循的可以唤醒理财天赋的10个步骤，你可以照着这些步骤来做，也可以按自己的方式去做，你的理财天赋足以让你胜任这项任务。 我需要一个超现实的理由——精神的力量 这些理由和目标是“想要”和“不想要”的结合体——就像罗伯特想要富有的理由和目标一样。 他不想将一生都耗费在工作上，也不想父辈那样一生只为追求稳定的工作和一套郊区的房子，他也不想一辈子都做打工族，更不想因为忙于工作而影响与家人相聚的欢乐时刻，更不愿意像穷爸爸那样死后自己的全部东西都被政府收走，没什么可留给孩子。 他想在年轻的时候环游世界，并按照自己喜欢的方式生活。他想获得心灵上的自由，自己支配自己的时间和生活。他想要他的钱为自己工作。 每天做出自己的选择——选择的力量 你每天都可以选择是让自己成为富人，还是成为穷人，亦或是成为中产阶级。你的消费习惯可以反映出你是什么样的人。穷人之所以贫穷，是因为他们有着不良的消费习惯。 他建议人们首先投资于教育。因为我们的头脑是我们最强大的工具。随着年纪的增长，我们都有选择学习哪些知识的自由。 慎重地选择朋友——关系的力量 罗伯特提醒大家不要听贫穷的或是胆小的人的话。对他们而言，当涉及到投资时，如同“天就要塌下来了”，他们总会告诉你这件事为什么不可行。 当一位专家说市场正在走向衰退，另一位专家却声称市场正在趋于繁荣。这时候，两方的话你都要听。因为两种说法都有合理的地方。 在积累财富的过程中，最困难的事情莫过于坚持自己的选择而不盲目从众。如果某项大宗交易被大众熟知时，此刻你去投资，恐怕时已晚，此时，你应该试着寻找下一个新交易。 掌握一种模式，然后再学习一种新的模式——快速学习的力量 大多数人一般只知道一个基本的赚钱模式：上班-赚钱-支付账单-平衡支票簿-购买共同基金-然后再上班。 大部分高等专科学校和社区大学都开有理财规划和传统投资方面的辅导班，这些都是非常好的理财启蒙的地方。罗伯特总是在寻找更迅速的赚钱模式，这就是为什么他一天挣的钱比许多人一生当中挣的钱还要多的原因所在。 首先支付自己——自律的力量 在所有步骤中，自律可能是最难掌握的。能否自律是将富人、穷人和中产阶级区分开来的首要因素。生活推着你转，并给你施加压力。对理财压力承受力差的人永远不会成为富人。 要想成功做到“首先支付自己”，你应该遵循以下两个法则：1．不要让自己背上数额过大的债务包袱。保持低支出。首先建立资产项，然后再用资产项购买大房子或豪车。2．当你资金短缺时，让压力去发挥作用，不要动用你的储蓄或投资。利用压力激发你的理财天赋，想出新的赚钱方法，然后支付你的账单。这样不但能让你赚到钱，还能提高你的财商。 给你的经纪人以优厚的报酬——好建议的力量 许多人试图通过使用佣金低的经纪人或不通过中介而是自己卖房子来达到省钱的目的。但是，优秀的专业人士不仅可以节省你的时间，还可以让你赚钱。 做一个“印第安给予者”——无私的力量 用资产来购买奢侈品——专注的力量 罗伯特和其他人一样喜欢奢侈品，但他不会借钱购买奢侈品，而是专注于用资产栏创造钱去买这些奢侈品。 对英雄的崇拜——神话的力量 通过偶像的模范作用，我们挖掘出自身的巨大潜能。英雄人物不仅激励了我们，还会使难题看起来容易一些。 先予后取——给予的力量 当你感到手头“有点紧”或是想得到什么时，首先要想到给予，只有先“予”，你才能在将来取得丰厚的回报，无论金钱、微笑、爱情还是友谊都是如此。 教学也是如此。你教给别人的越多，你学到的也越多。罗伯特的两个爸爸都证明了这一点。慷慨地分享你所拥有的，并确保你享受给予给自己带来的快乐，而不是简单地为了得到而给予。 左脑时刻：用自律精神践行“首先支付自己”这一法则，以确保永远把“增加资产项”放在第一位。 右脑时刻：让你的头脑对新的想法和新的做事方式保持开放，以便让新旧想法和方式交锋，擦出思想的火花。 潜意识时刻：挖掘“我想变得富有”的理由和目标，并不断增强这些深层次的精神动力。它们将帮助你扫除通往财务自由之路上的一切障碍。 术语解析 ROI：即投资回报率，是指通过投资而应返回的价值，即从一项投资活动中得到的经济回报。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:9","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"9. 第九章 行动指南清单 停下你手头的活儿 寻找新的思想 找一些做过你想做的事情的人 参加辅导班、阅读和参加研讨会 行动的人总会击败不行动的人 在会计领域里，有三种不同的收入：1．劳动性收入。2．投资组合收入。3．被动收入。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:2:10","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"总结 对于本书的总结，可以引用微信读书中一位网友的书评： 对书名好奇而来，读了一半才知道是财商类的书。生活就是最好的教师，学校里学的都是美好的，而生活都是残酷现实的，学校教会你知识，而生活教会你生存，大脑是世界上最强的“计算机”，懒惰是你最强的敌人，它会使你的大脑停止思考。 穷爸爸，书中所说的“穷”，不是真的穷，是“穷”在眼界、格局、思维、胆识、能力、懒惰、理财方式、对孩子的教育方式，穷爸爸一直教育孩子，要好好学习，长大了才能有一份安稳的好工作，大多数人觉得这话没什么不对，而孩子也会随爸爸的想法，好好学习，长大了有一份好工作，为赚钱而工作一生！ 富爸爸，富的是：眼界、格局、思维、胆识、高度自律、理财方式、不断创新、不断学习、抓住时机用钱生钱、对孩子教育是:你不但要好好学习，你要学会如何掌控自己的情绪，而不是情绪来掌控你，学会怎样去思考，不断去创新，学会怎样让你的钱能赚到更多的钱，你不是为赚钱而工作，你要做到钱为你工作，这就是穷爸爸和富爸爸对孩子教育方式，和思维模式的区别。 本书的英文完整标题翻译过来是《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》，而全书最精华的部分，便是富人的现金流图： 和通过自律的力量，养成首先支付自己的习惯： ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:3:0","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"思考 “富人买入资产，穷人只有支出，中产阶级购买自以为是资产的负债。” “穷人和中产阶级为钱而工作。富人让钱为他工作。” 这两句话对我来说，可谓是醍醐灌顶。以及“老鼠赛跑”这个词，更是形象和深刻地让我意识到了自己的现实处境。通过这本书，我开始了对财商知识的学习，并且会不断努力，通过更有针对性的学习和行动来摆脱“老鼠赛跑”的困境。 ","date":"2022-05-29","objectID":"/2022/05/notes-from-rich-dad-poor-dad/:4:0","tags":["金融"],"title":"读书笔记之《富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道》","uri":"/2022/05/notes-from-rich-dad-poor-dad/"},{"categories":["读书笔记"],"content":"作者在书中虚构了一个远洋中的小岛，通过关于鱼、渔网、存钱、借钱等故事揭示了经济是如何运行的，映射出当今经济体制与政策暗藏的漏洞。","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"作者在书中虚构了一个远洋中的小岛，通过关于鱼、渔网、存钱、借钱等故事揭示了经济是如何运行的，映射出当今经济体制与政策暗藏的漏洞。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:0:0","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"序 如何对经济领域的各种现象进行专业而又生动的分析，是一项艰巨的任务。如何让从9岁到90岁的读者都能通过一本书洞悉日常生活现象背后的经济规律，更是一项几乎不可能完成的任务。 《小岛经济学》通过关于鱼、渔网、存钱、借钱等故事揭示了经济是如何运行的，映射出当今经济体制与政策暗藏的漏洞。作者彼得·希夫和安德鲁·希夫两兄弟在书中以机智幽默的手法阐释了经济增长的根源，贸易、储蓄及风险三者的重要性，滞胀的根源，利率的影响，政府的刺激机制、消费信贷的破坏性本质等问题。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:1:0","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:0","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"1. 第一章 一个好点子出炉了 对所有物种而言（人类除外），经济学其实可以简单理解为日常生存活动。食物短缺、天气恶劣、食肉动物的威胁、疾病的困扰、发明相对较少、忍饥挨饿地活着（有一点儿剩余时间进行再生产），这是所有动物的生存常态。所幸我们人类拥有两样东西——我们的大脑和灵巧的双手，否则我们的命运跟那些动物不会有什么分别（在不太久远的过去，我们跟它们是一样的）。靠着大脑和灵巧的双手，我们制造了工具和机器，改造环境的能力大大提高。 努力使有限的资源（每种资源都是有限的）产生最大的效益以尽可能满足人类的需求，这就是经济这一概念最简单的定义。工具、资本以及创新是实现这一目标的关键。牢记这一点，我们就很容易理解经济增长的原因：找到了生产人类所需物品的更好方式。不管一个经济体最后变得多么强大，这个原因是不会改变的。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:1","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"2. 第二章 把财富分享给别人 艾伯愿意并有能力把多余的鱼借给别人，因此，贝克和查理也拥有了自己的渔网。现在大家都有渔网可用了，小岛上的整体捕鱼能力便从每天三条鱼提高到每天6条鱼，经济增长翻番，前景更加光明。 但事实并非如此，因为这三个人对自己颇具局限性的生活方式感到不满。饥饿（其经济术语为“需求”）只是刺激经济增长的必要而非充分条件。追求更多是人类的本性。不管已经拥有什么，我们总是想要更多。也许不是想要更多的东西，而是更多的时间、更多的乐趣、更多的选择，所有这些需求都需要资本。艾伯、贝克和查理这些年来对鱼的问题可能都没少抱怨，但他们最后都成功地提高了生产力，满足了自己的需求。 有了多余的鱼，小岛上的几位居民每天终于可以比原来多吃一些鱼了（原来是每天一条鱼），但是经济并没有增长，因为他们的消费增长了。而他们的消费之所以增长，是因为经济增长了。这个道理很简单，但令人不解的是现代经济学家竟然会在这个简单的问题上纠缠不休。 大多数经济学家认为，给老百姓更多的钱花就可以增加需求，但是这种做法并不能改变真正的需求，只会使人们花更多的钱购买已经生产出来的商品。只有增加供给才能切实满足人们更多的需求。 不幸的是，争取充分经济自由的实例在世界历史上还很鲜见。不过，一旦利己主义得到发展机会，生产能力就会迅速提高。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:2","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"3. 第三章 信用卡的多种用途 消费贷款如果不能提高产能的话，这笔贷款无论是对贷款人还是借款人来说都是一种负担。 如果艾伯之前已经将自己的储蓄作为没有收益的消费贷款借出的话，这次就无法拿出这份应急贷款了。事实上，在社会生死攸关之时，储蓄便显得至关重要。 遇到经济可能收紧的情况时，政治家和银行家常会讨论是否需要“扩大信贷”，增加可以借出的贷款数额。但是是否可以随心所欲地这样做呢？在我们这些捕鱼的朋友的案例中，艾伯合法地借出的鱼不会多于自己所储存的鱼，这座小岛的贷款总额会受到岛上所储存的鱼总量的制约。 与达尔文的观点相似，即自然选择催生了生命力更强的物种，这种借贷原则催生出更加健康的企业和更加强劲的经济。 贷给个人或者企业的款项如果无法成功促成必要的创新或者提高产能，就会浪费储蓄的供给，削弱整体经济。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:3","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"4. 第四章 经济到底是如何发展的 储蓄不只是提高个人消费能力的手段，还是防止经济受到意外因素影响的重要缓冲器。 凯恩斯主义者认为储蓄对发展不利，因为这种做法妨碍了货币循环、降低了消费（他们认为消费是促进经济增长的重要因素）。而政策制定者们受这些观点影响，制定出各种规则奖励花钱的人、惩罚存钱的人。 结果，美国人多年来总是入不敷出。在自给自足的经济中，比如小岛经济，这样做根本不可能。但是在我们的现代社会中，货币流通跨越国界，而印钞机似乎具有无限魔力，可以欺瞒美国民众，让他们无法认清一个简单的事实：我们的消费不能超过产能，我们的借款不能超出存款，至少不能长期这样。 消费只是我们用来衡量生产的尺度，因为所有生产出来的东西最终都是用于消费的。那么消费有什么实际意义呢？只要价格降得足够低，即便是没人想要的东西也可以卖出去。但是，如果没有生产，也就没有东西可消费了。因此，生产是有价值的。 储蓄创造了资本，而资本使生产扩大成为可能，所以储蓄起来的一美元对经济产生的积极影响要大于消费掉的一美元。对于这一点，你不必费力向经济学家或者政治家解释。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:4","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"5. 第五章 在鱼被指定为货币之后 到目前为止，岛上实行的是物物交换。但是物物交换过程烦琐，效率较低。制矛师可能需要大厨的服务，但大厨却不需要一支矛。即便他们能各取所需，到底多少顿饭能和一支矛的价值相当呢？ 为了改变这种杂乱无章的交换系统，岛上需要新的交换物。这种交换物应该能用来交换任何物品、能被所有人接受。换句话说，岛民需要货币。鉴于岛上的所有人都吃鱼，鱼被指定为货币。很快，所有的工资和价格都开始用鱼计量。 因为人们仍然假设每天需要吃一条鱼才能生存，所以一条鱼的价值是多少，所有人心里都有数。也就是说，岛上的价格体系和鱼的真实（或者固有）价格相关。 由于生产率提高了（储蓄、创新和投资的结果），独木舟的价格便随之下降，更多顾客能够享受到拥有独木舟的好处。昔日富人独享的奢侈品也成了普通消费品。 正如故事中所讲的那样，价格下降并没有损害达菲的利益。实际上，其他行业生产的产品的价格也随着生产率的提高而下降，达菲可以用赚得的鱼买到更多的东西。 技术创新是个单向的过程。除非人们失去记忆，否则生产效率必然会越来越高。因此，价格具有随着时间推移而降低的趋势。 持续下降的价格还会鼓励岛民储蓄，因为他们知道现在的鱼将来会更有价值。尽管听起来可能有些疯狂，不过省一条确实等于赚一条。这样一来，人们就愿意储蓄，也就有更多资本可用于贷款、资本投资、生产，最终带来更多消费。 除了那些出于某种原因依然选择徒手捕鱼的人以外（也许是出于艺术上的原因），每个劳动者都有三种选择：1.省吃俭用，自制渔网。2.贷款购买渔网。3.为有渔网的人工作。鉴于选项一需要饿肚子，选项二需要担风险，大多数劳动者会选择选项三。他们只需给人打工，就能得到报酬。 在经济学家和政治家眼中，通货紧缩被定义为一段时间内价格的全面下降，就好像经济领域的鼠疫一样。只要有一丁点儿通货紧缩的苗头，政府通常就会采取措施抬高物价。 价格下降有什么不好呢？我们已经习惯了不断上涨的物价，要是我们知道在过去的将近150年（从18世纪末一直到1913年）中，美国的物价一直在稳步下降，几乎所有人都会大吃一惊。然而，就是在这段时间里，我们经历了人类历史上经济增长最快的几个阶段。 这种现象出现的原因正如本章所讲述的那样，是因为生产率的提高。如果货币供应稳定（就像美联储成立前的美国那样），生产率的提高会促使价格下降。 现代经济学错误地认为：消费促进经济增长，因而一旦发生通货紧缩，人们就不愿意消费（这样价格就会继续下降），而如果人们继续消费，价格下降的影响就会减弱。真是荒谬。 实际上，如果消费者不愿意消费，刺激需求最好的办法就是让物价降到更合理的水平。山姆·沃尔顿就是运用这个简单的概念赚了数百亿美元。 虽然有这么多反面证据，通货紧缩还是被当作经济的头号敌人。这是因为通货紧缩（与通货膨胀相反）是政治家最好的朋友。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:5","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"6. 第六章 为什么会有储蓄 贷款利率又决定了银行能支付给储户的利息。存款利率是随存款年限递增的。存款年限越长，造成银行存鱼短缺的风险越低。因此，如果储户愿意长期储蓄，获得的利率也就较高，进行短期储蓄的储户所获利率则较低。 尽管迈克斯掌握着利率的制定权，但是整体利润还是会随着无法掌控的市场情况的变化而波动。有时生产率大幅提高，岛上的存鱼量也随之大大增加。如果储藏室里堆满了鱼，银行就会主动降低贷款利率。因为此时银行承受损失的能力较强，而且健康的经济也为新企业的发展提供了良好的环境。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:6","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"7. 第七章 基础设施与贸易 国际贸易与个人劳动分工没有什么区别。每个人或者每个国家都用自己多余的或者擅长生产的产品，换取自己缺乏的或者不擅长生产的产品。 基础设施建设投资会对经济产生巨大的影响。然而，只有在收益大于支出时，这种投资才有效果。反之，这些项目就是在浪费资源并阻碍经济增长。 目前，很多政治家和经济学家都错误地认为：基础设施建设投资并不是可能带来长期收益的投资，而是增加就业和提振经济的直接手段。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:7","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"8. 第八章 一个共和国就这样诞生了 岛民们知道政府的支出就是纳税人缴纳的税款，所以他们认为应该由纳税人决定税款怎么花。因此，只有纳税人可以投票。 美国宪法有意将权力分配给联邦政府的不同部门，并把中央的权力下放到各州。更重要的是，宪法可以防止联邦政府从人民手中剥夺任何权利。结果，在这个国家里，人人可以享有人身自由权和财产权，可以随心所欲地处理个人资产，政府无权干涉。虽然并非每个人都能幸运地享有这些权利，但是这无损于这个设想展现出的勇气。毕竟，这是以前任何国家的法典中都不曾有过的。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:8","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"9. 第九章 政府的职能开始转变了 在美国历史上的大多数时期，通货紧缩持续存在。1913年，美联储成立。美联储发行纸币，承诺纸币持有者可以随时将其兑换成黄金，从而取代了当时流通的私营银行发行的钞票。 其实，私营银行也做出了相似的担保。但是，自从美联储登上历史舞台，美国的物价就开始不断上涨。成立美联储的最初目的是形成“弹性货币供应”。当时的设想是：美联储可以根据经济活动的情况，扩大或收紧货币流通量。设计者以为这样可以让物价保持平稳，不受繁荣或萧条的影响。即便这一设想是个好想法，很明显美联储在这个任务上已经一败涂地。 在过去的100年里，美元损失了超过95%的价值。这可真够稳定的！事实上，美联储现在存在的唯一目的就是产生足够的通货膨胀，从而使政府的支出大于税收收入。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:9","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"10. 第十章 不断缩水的鱼就像货币一样 随着通鱼膨胀愈演愈烈，岛民们终于注意到他们从银行取出的鱼比他们存入银行的鱼要小。因此，虽然有利息的诱惑，人们还是开始减少储蓄，有些人索性一点儿也不储蓄了。反过来，由于物价不断快速上涨，人们必须抓紧消费，以免损失鱼的价值。 快速的通鱼膨胀的最大受害者是退休人员。在参加工作的那些年里他们把鱼存入银行，而现在他们每天必须吃两三条鱼才能果腹。他们原以为可以让他们维持生活20年的储蓄，四五年就用光了。 经济学家们非常成功地混淆了通货膨胀的起因，手段之一就是简化这个词的定义。几乎所有人都认为物价上涨就是通货膨胀。因此，如果物价没有上涨，就没有通货膨胀。 但是上涨的价格不过是通货膨胀的结果罢了！这就好比给气球充气，气球就会不断膨大一样。通货膨胀其实就是货币供应量增加，与其相反的情况即为通货紧缩，意指货币供应收紧。从另一方面来说，价格自身其实不会膨胀或者紧缩，只会上涨或下跌。所以膨胀的不是价格，而是货币供应。 但是，经济不景气时，物价需要下跌才能平衡经济局势。经济不景气时需要通货紧缩，物价下跌能够削弱低就业率的影响。然而，当代经济学家却认为，物价下跌会导致经济陷入需求崩溃的万丈深渊。他们忘记了一旦物价下跌到一定程度，人们就会开始消费。这个过程淘汰了不必要的产能，把物价调低到符合内在供求关系的水平。 通货膨胀人为地使物价居高不下，妨碍了上述过程发挥作用。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:10","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"11. 第十一章 中岛帝国：远方的生命线 多年来，经济学家对美中关系的理解一直是错误的。大多数人认为那是一种互利互惠的双边关系：美国得到廉价商品和贷款，中国得到制造业的就业机会。然而，这真的是一种双赢的安排吗？ 美国人占了便宜：他们不用生产就可以得到商品，不必储蓄就可以得到贷款。而对于中国人来说，他们辛勤工作却不能消费自己生产的产品，他们努力储蓄却得不到贷款。 这有什么好处呢？美国的低利率很大程度上是由国外的高储蓄率造成的，大多数当代经济学权威都没有意识到这一点。要记住，想要借贷，就必须先储蓄。所幸，对于美国来说，全球经济使得借与存的关系可以不受国境的限制。 到目前为止，美国手中的王牌一直是美元的地位。作为世界的官方储备货币，美元是一切国际贸易的结算货币。也就是说，不仅仅是美国的贸易伙伴，所有人交易时都需要使用美元。所以，即便没有人购买美国的产品，人们也需要美元。而其他任何国家都没有这种运气。 外国人持有的美元很多都存在美国的银行里，因而又可以借贷给美国人。这么一来，美国人即使不储蓄也可以获得贷款。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:11","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"12. 第十二章 服务业是如何崛起的 与大多数同时代的经济学家一样，伯南柯认为消费是经济发展的内在动力。因此，最大的消费群体就是经济增长的引擎。 尽情购物要比卖力工作更让人快乐。这一点连傻瓜都知道。但是，是卖力工作的人，而不是尽情购物的人，第一时间将商品放在货架上。没有产品，购买就无从谈起。一旦某个产品被生产出来，它将必然被用于销售。可能发生变化的仅仅是其购买者和价格。 全球经济失衡最明显的证据就是美国的贸易逆差。在美国历史上的多数时期，出口都大于进口，造成贸易顺差。在有些年份，尤其是接近20世纪中叶的时候，贸易顺差额还相当巨大。美国利用这些盈余在国内置办了更多资产，在国外也购买了不少资产。在这个过程中，美国成了世界上最富有的国家。但是到20世纪60年代末，贸易平衡被打破了。自1976年以来，美国开始常年处于贸易逆差状态。 美元的储备货币地位很大程度上导致了贸易逆差的扩大。如果没有全球经济系统对美元的内在需求，任何国家都无法长期维持这种失衡状态。各家公司和各国政府都会拒绝用商品交换无法购买任何东西的货币。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:12","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"13. 第十三章 鱼本位的破灭 虽然经济学家声称已经预见到了这一切，但事实上，从长期来看，我们并没有预见全球经济会建立在一种不可兑现的货币（通常称之为“法定货币”）的基础上。“法定”（fiat）一词来自拉丁语，字面含义为“让它做”（Let it be done）。我们用这个词是想表达纸币本身没有内在价值，是因为政府的命令而具有价值。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:13","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"14. 第十四章 棚屋价格是如何涨上去的 局势发展得超乎想象，传统的支付能力标准不再适用。以前岛民只会用年收入的两三倍买棚屋，现在他们要花掉年收入的一二十倍。人们明知负担不起还要买棚屋，是因为他们相信买入的棚屋几年后可以卖个好价钱。有这么好的增值前景，又没有什么风险，加上政府的一系列鼓励政策（包括人为造就的低贷款利率），没有人能抗拒这种诱惑。 现在，惨痛的事实告诉我们每个人，美国在房市泡沫膨胀和破灭的过程中体会到了喜悦和痛苦。因此，我们必须铭记危机曾经近在咫尺，而绝大部分经济学家、政府官员和金融评论家都没能预见到灾难的来临。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:14","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"15. 第十五章 快了！快了！棚屋市场要崩溃了 繁荣的房市对整个经济的影响至关重要。在房市繁荣的巅峰时期，房屋的融资、建设和装修成了美国经济的中流砥柱。然而，每个人都只看到了眼前的好运，却没注意到未来的损失。 不仅“炒房者”赚到了大量财富，普通房主们每年也通过“以小换大”贷款获得数千亿美元。如此一来，房产成了免税的自动提款机。人们用这些钱翻新房屋、度假、上大学以及买车和电子产品，总体生活水平比房屋升值前提高了。 但是，这些财富不过是海市蜃楼。 经济学家宣称，如果人们不能消费，政府就应该采取措施帮助他们消费。但是，政府也没有多少钱。政府所有的就是税收、贷款和自己印刷的货币。税金和借款只是将私营部门的花销或投资转嫁到政府头上，印制货币也会产生同样的效果。政府将新发行的货币投入流通领域，必然会抑制老百姓手中所持货币的购买力。 但是，美国不会一直拥有这样的“好运”。最终美国政府只有两个选择：拒绝还款（告诉债主美国没钱，并商议一个解决办法），或者通货膨胀（印钱来还债）。任何一个选择的后果都很严重。拒绝还款还有可能彻底清算从头来过，是相对较好的选择。不幸的是，虽然通货膨胀在经济上影响相对较差，但是在政治上有好处。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:15","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"16. 第十六章 情形怎么变得如此糟糕 要记住，一国的经济不会因为人们的消费而增长，而是经济增长带动人们的消费。参议员们和顾问们都没能抓住这个真理。与此同时，大把大把的新钞票营造了经济有所好转的假象。 如果美国政府不在财政上严于律己，美国的债权人（主要是中国和日本）迟早会要求美国那么做。债权人可以选择多种方式让美国就范，最有效的一招就是停止购买美国的国债。 目前，这些国家的处境与中岛帝国相似。一旦它们认识到不断向一个付不起账的顾客借钱是件浪费资源的事，就会改弦更张。那时它们就会把生产力集中到国内消费者身上，它们就能完全享受自己的劳动果实了。 目前，国际上要求金融改革的呼声高涨，这些国家虽然也怨言不断，但它们还是继续借钱给美国。但是，它们的忍耐是有限度的。现在美国一半以上的政府债务都卖给了外国政府，如果它们拒绝继续购买，谁来买美国的国债？美国国内可用的储蓄少得可怜，美国人自己解决不了这个问题。等到那一天到来，美国有两种选择：拒绝还款或通货膨胀。不论选哪一个，由于购买力下降和利率升高，美国人的生活水平都会急剧下降。\\ ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:16","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"17. 第十七章 缓兵之计 2008年之前，量化宽松这一概念尚未普及，只有大学经济学系的学生听说过。而过去几年间，量化宽松已被越来越多的人视为影响股票、债券和房地产走势最重要的因素。尽管很多人知道美国依赖量化宽松，但很少有人真正看透其本质：向金融市场注入新的资金，以推动价格上涨。实际上，量化宽松不过是通货膨胀的一种委婉表达，它也成为美联储将政府债务货币化的隐秘手段。 正如本书前文所述，大多数经济学家认为，消费会促进经济增长。增加货币供应量固然会鼓励人们消费，但对扩大需求却毫无裨益，而需求才是促进经济增长的真正动力。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:17","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"18. 第十八章 占领华孚街 尽管长期实施量化宽松政策为股票市场带来诸多益处，也重新造就了房屋市场的繁荣，但这一政策对真正的经济发展却作用甚微。这就是为什么在股票与价格高涨的同时，失业率却始终居高不下，实际收入则陷入停滞。 真正的问题在于，当最后关头来临时，美国会有更多的债务要应对。美国的经济对于量化宽松已黔驴技穷，剩下的只有债台高筑的困境。 今天的经济学家需要看清量化宽松的真正面目：它是延长经济衰退的办法，而不是促进经济复兴的良方。经过多年的失败，他们需要试试新方法。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:18","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"19. 第十九章 无鱼不起浪 “陛下，恕我愚昧，但是我看不出来我们为什么需要他们的钞票。没有我们的鱼和碗，那些钞票就没有价值。我们能制造产品，同样也能买得起它们。我们只需要不再把好处白白送人。” 不知何故，农民简单的话语居然给国王留下了深刻的印象。国王决定改变政策，不再购买鱼邦储备券。从现在开始，中岛帝国人交易时只接受真鱼！ 和往常一样，中岛帝国人仍旧捕鱼、制造产品并继续储蓄，由于这些都是促进经济增长的重要因素，因此中岛帝国没有陷入经济危机。实际上，很多产品在国内销售，国人的储蓄也都存在国内的银行里，中岛帝国的生活水平开始稳步提高。当地的工厂利用以前用于购买鱼邦储备券的储蓄购置设备以满足国内需求。为国内消费者生产的产品更多了，中岛帝国的商店里一下子摆满了商品，库存增多导致物价下跌。 正如那位农民所预料的，虽然损失了大把大把注定贬值的鱼邦储备券，但中岛帝国蓬勃发展起来。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:19","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"后记 美国政府拒绝顺应市场的力量，不允许严格控制过度消费，不允许错误投资变现，不允许补充已经枯竭了的储蓄，不允许为资本投资提供资金，不允许帮助工人从服务业转移到制造业。如此一来，美国政府实际上是拒绝了良药，加重了病情。在此过程中，美国把各种各样的债务都转化成了政府债务，并且吹起了另一个泡沫，这次的主角是美国国债。 多年以来，美国人一直入不敷出，现在他们必须下决心过量入为出的生活。如果能够做到这一点，并任由自由市场的力量发挥作用，他们就能重新平衡经济，为实实在在的发展打下基础。然而，如果他们选择寄希望于借贷、印钞机以及政府承诺的毫无痛苦的解决办法，那他们都要回到徒手捕鱼的状态。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:2:20","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"总结 引用自微信读书中一位网友的书评： 这本书是以一个一穷二白的小岛经济发展的过程来讽刺美国经济史的寓言故事。 书中的中岛帝国明显就是中国，而美索尼亚国必然是美国无疑。 靠布柱是尼克松，华孚街是华尔街。巴斯、奥库达、格林芬和伯南柯分别对应的是美国前总统小布什、奥巴马，以及前美联储主席格林斯潘和伯南克。 正是因为这本书写的隐约其辞，含沙射影。因此这本书不适合经济小白阅读。 另外，作者是哈耶克的坚定支持者，对凯恩斯主义鄙夷不屑。对政府干预经济的行为非常抵制，认为它使经济自身的运行规律遭到破坏，使得市场的自我调节能力被扼杀。这样的观点在书中随处可见。 实际上，越来越多的科学家认为经济学严格来说只是一门“伪科学”，但同时越来越多的经济学家却愈加认为经济学绝对是一门现代科学。 现代科学是通过观察发现问题，再由合理的假设推导出一个命题，再用实验去验证它，并最终得出一个结论。所有的公式、定理都是在假设条件下具备逻辑正确性的命题。 因此，现代科学理论实质上是一种体系构建。而经济理论属于经验和猜想。 经济学家通常构建一个经济模型去证明某一个事件，但是无法将其转化为为一个定理。被证明的事件也无法用公式来表述，即使勉强表述出来，变量的调整无法与结果相对应。之所以出现这样的情况，最重要的一个原因是人的行为永远会对经济结果产生影响。而自然科学不会。举例来说，人再怎么运动，不会改变引力的大小，不会改变光的速度，而人的行为肯定会导致明天的股市大跌。 也正因为人为因素在内的诸多不确定性，经济理论通常无法预测，只能给事先发生的事件给予合理化解释。这和历史学很像，这也是经济学最为脆弱的地方。 这部《小岛经济学》更像一部讽刺寓言故事，而不是一部经济学著作。如果是对经济学感兴趣，我推荐微信读书上的《斯坦福极简经济学》和《经济学通识课》作为入门。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:3:0","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"思考 作为一名存粹的外行，通过这本浅显易懂的经济寓言故事书，让我对经济学原理也有了一些粗浅的理解，我也会以此为起点，开始了解经济学的相关知识。 ","date":"2022-04-08","objectID":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/:4:0","tags":["经济学"],"title":"读书笔记之《小岛经济学：鱼、美元和经济的故事》","uri":"/2022/04/notes-from-how-an-economy-grows-and-why-it-crashes/"},{"categories":["读书笔记"],"content":"非暴力沟通的四要素：观察、感受、需要、请求。","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"非暴力沟通的四要素：观察、感受、需要、请求。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:0:0","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"序 马歇尔·卢森堡博士由于在促进人类和谐共处方面的突破成就，2006年他获得了地球村基金会颁发的和平之桥奖。他发展出极具启发性和影响力的非暴力沟通的原则和方法，依照它来谈话和聆听，能使人们情意相通，和谐相处。 留意一下现实生活中的谈话方式，并且用心体会各种谈话方式给我们的不同感受，我们一定会发现，有些话确实伤人。言语上的指责、嘲讽、否定、说教以及任意打断、拒不回应、随意出口的评价和结论给我们带来的情感和精神上的创伤，甚至比肉体的伤害更加令人痛苦。这些无心或有意的语言暴力能让人与人变得冷漠、隔膜、敌视。 这本书的英文原名是「Nonviolent Communication: A Language of Life」，直译过来就是「非暴力沟通：生命的语言」，但根据书的内容来看，更好的翻译应该是「非暴力沟通：爱的语言」。非暴力沟通能够：疗愈内心深处的隐秘伤痛；超越个人心智和情感的局限性；突破那些引发愤怒、沮丧、焦虑等负面情绪的思维方式；用不带伤害的方式化解人际间的冲突；学会建立和谐的生命体验。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:1:0","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:0","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"0. 译序和前言 我曾以为，我的一生将致力于对生命的痛苦作出反应。后来，我发现，这过于沉重、过于灰暗。如果我只看到痛苦，我的心难免会被乌云所笼罩，被绝望所吞没。在徘徊中，终于有一天，我发现，我的人生可以对生命的美丽作出反应。当我看到了美——自己、他人以及其他生命的美，我心中充满了柔情，也找回了生活的热情与活力。这个转变，我很大程度上归功于卢森堡博士发现的非暴力沟通模式。 读完这本书后，我发现，我激励自己的方式无意中促成了自我憎恨。由于认为自己‘应该’做到许多事情，我不停地指责自己、命令自己、要求自己。这不可避免地导致内在的分裂与不满。而非暴力沟通提醒我倾听内心中不同的声音，以及它们所反映的需要——这促进了自我理解和内心的和谐。 我很希望这本书能帮助更多的人安静下来。使用暴力的人其实是因为他们内心的宁静遭到了破坏，所以他们才会用暴力的方式维护或寻求心灵的和平。 让梦想中的世界通过我们的转变得以实现。 非暴力也不是让你变得温顺或听话。非暴力主张积极进取，而非消极无为。 让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。人们常说：这是一个弱肉强食的世界，为了生存，我们必须不择手段。这个观点，请恕我无法同意。 如果今天的世界是无情的，那是我们的生活方式造成它的无情。我们的转变与世界的状态息息相关。而改变沟通方式是自我转变的重要开端。提升沟通品质有助于建设一个友爱的世界。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:1","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"1. 第一章 让爱融入生活 语言是窗户，否则，它们是墙。听了你的话，我仿佛受了审判，无比委屈，又无从分辩。在离开前，我想问，那真的是你的意思吗？在自我辩护前，在带着痛苦或恐惧质问前，在我用言语筑起心灵之墙前，告诉我，我听明白了吗？ 语言是窗户，或者是墙。它们审判我们，或者让我们自由。在我说与听的时候，请让爱的光芒照耀我。我心里有话要说，那些话对我如此重要，如果言语无法传达我的心声，请你帮我获得自由好吗？如果你以为我想羞辱你，如果你认定我不在乎你，请透过我的言语，倾听我们共有的情感。 也许我们并不认为自己的谈话方式是“暴力”的，但我们的语言确实常常引发自己和他人的痛苦。 运用非暴力沟通聆听彼此心灵深处的需要，我们将以全新的眼光看待人际关系。 当我们真诚助人时，我们丰富他人生命的愿望得到了满足。我们的行为，是出于由衷的喜悦。这样的给予让施者和受者同时受益。由于施者的给予既不是出于恐惧、内疚或羞愧，也不是为了得到什么；受者获得馈赠，却不会有心理负担。与此同时，施者会因自己行为的价值更加欣赏自己。 非暴力沟通过程：什么是我的观察；我的感受如何；哪些需要（或价值、愿望等）导致那样的感受；为了改善生活，我的请求是什么。 当我运用非暴力沟通与他交流，我不再觉得受伤，也没有退缩，而能倾听和领会他的情感。我发现，这个与我结婚28年的男人，内心原来那样痛苦！在我参加非暴力沟通研讨班前的那个周末，他甚至提出了离婚。长话短说，幸亏非暴力沟通挽救了我们的婚姻，否则，今天我们不可能一起来到这里……我试着体会他的感受，说出我的需要，听取不中听的回答。他来这里不是为了讨我欢心，我来也不是为了他的幸福。我们学着成长、接纳和爱，只有这样才能各得所愿。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:2","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"2. 第二章 是什么蒙蔽了爱 对他人的评价实际上反映了我们的需要和价值观。 分类和评判提倡的是暴力。 如果真的想过上悲惨生活，就去与他人做比较。 我们可以用负责任的语言代替回避责任的语言。 我们无法强迫他人按我们的期待生活。 认为“某人应当受到惩罚”使我们难以体会到心中的爱。 人天生热爱生命，乐于互助。可是，异化的沟通方式使我们难以体会到心中的爱。道德评判就是其中的一种，它将不符合我们价值观的人看作是不道德的或邪恶的。进行比较也是一种评判，它会蒙蔽对人对己的爱意。异化的沟通方式还淡化了我们对自己的思想、情感和行为的责任意识。此外，强人所难也会造成心灵的隔阂。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:3","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"3. 第三章 区分观察和评论 不区分观察和评论，人们将倾向于听到批评。 不带评论的观察是人类智力的最高形式。 非暴力沟通的第一个要素是观察。将观察和评论混为一谈，别人就会倾向于听到批评，并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。它提倡在特定的时间和情境中进行观察，并清楚地描述观察结果。例如，它会说“欧文在过去的5场比赛中没有进一个球”，而不是说“欧文是个差劲的前锋”。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:4","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"4. 第四章 体会和表达感受 表达内心的感受，不仅可以促进亲情，还可以改善工作。 示弱有助于解决冲突。 当我们说“我觉得”，我们常常并不是在表达感受，而是在表达想法。 清楚地表达感受需要丰富的词汇。“很好”或“很差”这样的词语很难让人明白我们实际的状况。 例如，如果我们说“我感觉良好”，“良好”这个词所表达的感受可能是高兴、轻松、欣慰或别的。为了更好地沟通情感，非暴力沟通主张使用具体的语言。为了清晰地表达感受，我们编制了以下的词汇表。 用来表达我们的需要得到满足时的感受：兴奋 喜悦 欣喜 甜蜜 精力充沛 兴高采烈感激 感动 乐观 自信 振作 振奋 开心高兴 快乐 愉快 幸福 陶醉 满足 欣慰 心旷神怡喜出望外平静 自在 舒适 放松 踏实 安全 温暖 放心 无忧无虑 用来表达我们的需要没有得到满足时的感受：害怕 担心 焦虑 忧虑 着急 紧张 心神不宁 心烦意乱忧伤 沮丧 灰心 气馁 泄气 绝望 伤感 凄凉 悲伤恼怒 愤怒 烦恼 苦恼 生气 厌烦 不满 不快 不耐烦不高兴震惊 失望 困惑 茫然 寂寞 孤独 郁闷 难过 悲观沉重 麻木 精疲力尽 委靡不振 疲惫不堪 昏昏欲睡无精打采尴尬 惭愧 内疚 妒忌 遗憾 不舒服 非暴力沟通的第二个要素是感受。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。在表达感受时，示弱有助于解决冲突。此外，非暴力沟通还对表达具体感受的词语与陈述想法、评论以及观点的词语作了区分。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:5","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"5. 第五章 感受的根源 别人的行为可能会刺激我们，但并不是我们感受的根源。 通过了解我们的需要、愿望、期待以及想法，我们不再指责他人，而承认我们的感受源于自身。 非暴力沟通强调，感受的根源在于我们自身。我们的需要和期待，以及对他人言行的看法，导致了我们的感受。听到不中听的话时，我们有四种选择。 第一种是认为自己犯了错。例如，有人气愤地说：“我从没见过像你这么自私的人！”这时，我们可能会自责：“哦，我没有考虑别人的感受，真是太自私了！”这会导致我们内疚、惭愧，甚至厌恶自己。 第二种是指责对方。这时，我们也许会驳斥对方：“你没有权利这么说！我一直都很在乎你的感受。你才自私！”在争吵时，我们一般会感到恼怒。 第三种是了解我们的感受和需要。这时，我们可能会发现我们有些伤心，因为我们看重信任和接纳。 第四种是用心体会他人的感受和需要。 这时，我们也许就会想“他伤心可能是因为他需要体贴和支持”。 使用以下表达方式时，我们可能就已经忽视了感受与自身的关系。 1）只提及相关的事情。“公司海报出现拼写错误使我很生气。”“这件事令我心神不宁。” 2）只提及他人的行为。“我生日那天你没打电话，我很伤心。”“你没有把饭吃完，妈妈很失望。” 3）指责他人。“我很伤心，因为你说你不爱我。”“我很生气，因为老板说话不算数。” 我们可以通过“我（感到）……因为我……”这种表达方式来认识感受与自身的关系。例如： 1）“看到公司海报出现拼写错误，我很不高兴。因为我重视公司的形象。” 2）“你没把饭吃完，妈妈感到失望。因为妈妈希望你能健康成长。” 3）“老板说话不算数，我很生气。因为我想有个长假去看弟弟。” 批评往往暗含着期待。对他人的批评实际上间接表达了我们尚未满足的需要。如果一个人说“你从不理解我”，他实际上是渴望得到理解。如果太太说“这个星期你每天都工作到很晚，你喜欢工作，不喜欢我”，那反映了她看重亲密关系。 如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果我们直接说出需要，其他人就较有可能作出积极的回应。 不幸的是，大多数人并不习惯从需要的角度来考虑问题。在不顺心时，我们倾向于考虑别人有什么错。例如，如果孩子把外套放到了沙发上，而没有挂在衣柜里，我们可能就会说他们是懒虫。如果同事没有听从我们的建议，我们也许会指责他们不负责任。 一旦人们开始谈论需要，而不指责对方，他们就有可能找到办法来满足双方的需要。 对于大多数的人来说，个人成长一般会经历三个阶段。 第一阶段：“情感的奴隶”。在这个阶段，我们相信自己需要为他人负责——让他人快乐是我们的义务。如果别人不高兴，我们就会感到不安，觉得自己有责任做点什么。此时，我们特别容易把亲人看作是负担。 第二阶段：“面目可憎”。在这个阶段，我们发现，为他人的情绪负责，牺牲自己迎合他人，代价实在很大。想到日子过得这么憋屈，我们可能会很恼怒。此时，如果遭遇他人的痛苦，我们可能就会无动于衷：“这是你自己的问题！和我有什么关系？！”虽然不再愿意为他人负责，但我们还心存疑虑。因此，我们的态度也就显得生硬。 第三阶段：“生活的主人”。在这个阶段，我们乐于互助。我们帮助他人，是出于爱，而不是出于恐惧、内疚或惭愧。那是自由而快乐的行为。此时，我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。我们还发现，人与人相互依存，损人无法真正利己。非暴力沟通正是想帮助我们既表达自己，又关心他人。 真诚待人比委曲求全更为可贵。如果别人感到不安，我们可以认真地倾听，但无须责备自己。 他人的言行也许和我们的感受有关，但并不是我们感受的起因。感受根源于我们自身的需要——非暴力沟通的第三个要素。听到不中听的话时，我们可以有四种选择：1）责备自己；2）指责他人；3）体会自己的感受和需要；4）体会他人的感受和需要。 对他人的指责、批评、评论以及分析反映了我们的需要和价值观。如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果直接说出我们的需要，其他人就较有可能作出积极的回应。 对于大多数人来说，个人成长一般会经历三个阶段：（1）“情感的奴隶”——我们认为自己有义务使他人快乐；（2）“面目可憎”时期——此时，我们拒绝考虑他人的感受和需要；（3）“生活的主人”——我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。与此同时，我们还认识到，我们无法牺牲他人来满足自己的需要。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:6","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"6. 第六章 请求帮助 清楚地告诉对方，我们希望他们做什么。如果我们请求他人不做什么，对方也许会感到困惑，不知道我们到底想要什么。而且，这样的请求还容易引起别人的反感。 如果我们只是表达自己的感受，别人可能就不清楚我们想要什么。 我们的意思和别人的理解有时可能是两回事。如果无法确定对方是否已经明白，我们可能就需要得到反馈。请求反馈能确保对方准确把握我们的意思。有时，问一句“我的意思清楚吗”，然后，对方表个态就足够了。 当对方给予反馈，表达我们的感激。如果对方不愿反馈，倾听他的感受和需要。 一旦人们认为不答应我们就会受到责罚，他们就会把我们的请求看作是命令。 我们可以说：“帮我打开窗户好吗？”而不是说：“请打开窗户！” 如果我们只是想改变别人，以使他们的行动符合我们的利益，那么非暴力沟通并不是适当的工具。非暴力沟通是用来帮助我们在诚实和倾听的基础上与人联系。使用非暴力沟通时，我们希望人们的改变和行动是出于对生命的爱。一旦人们相信我们看重彼此的感情，并能兼顾双方的需要，那么，他们也就会相信我们所表达的愿望是请求而非命令。 非暴力沟通的第四个要素是请求。我们告诉人们，为了改善生活，我们希望他们做什么。我们避免使用抽象的语言，而借助具体的描述，来提出请求。 在发言时，我们将自己想要的回应讲得越清楚，就越有可能得到理想的回应。由于我们所要表达的意思与别人的理解有可能不一致，有时，我们需要请求他人的反馈。特别是在集体讨论中发言时，我们需要清楚地表明自己的期待。否则，讨论可能只是在浪费大家的时间。 一旦人们认为不答应我们就会受到责罚，他们就会把我们的请求看作是命令。如果我们清楚地表达我们无意强人所难，人们一般会相信，我们提出的是请求而非命令。非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通重视每个人的需要，它的目的是帮助我们在诚实和倾听的基础上与人联系。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:7","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"7. 第七章 用全身心聆听 在非暴力沟通中，倾听他人意味着，放下已有的想法和判断，一心一意地体会他人。倾听的这种品质体现了它与理解以及同情之间的区别。 分析妨碍了倾听。 不论别人以什么样的方式来表达自己，我们都可以用心体会其中所包含的观察、感受、需要和请求。 在倾听他人的观察、感受、需要和请求之后，我们可以主动表达我们的理解。如果我们已经准确领会了他们的意思，我们的反馈将帮助他们意识到这一点。反之，如果我们的理解还不到位，他们也就有机会来纠正我们。此外，这样做还有助于人们体会自己的状况，从而深入了解自己。 非暴力沟通建议我们使用疑问句来给予他人反馈。这将便于他人对我们的理解作出必要的补充。 我有些困惑。我想知道你是指哪件事。告诉我好吗？ 询问前，先表达我们的感受和需要。 只要我们专注于他人的感受和需要，所有的批评、攻击、辱骂或嘲讽就会消失。我们越是这样做，就越能体会到一个简单的事实：有时，我们认为自己受到了指责，实际上，那些话是他人表达需要和请求的方式。如果意识到这一点，我们就不会认为自己的人格受到了伤害。反之，如果一心分析自己或对方的过错，我们就会认为自己被贬低了。 一旦我们把所谓的批评和指责看作是来自他人的礼物——为处于痛苦中的人提供服务的机会，我们就会感到这种幸福。 当对方得到充分的倾听，（a）我们将体会到气氛变得轻松；（b）他会停止谈话。 “你越是留意自己内心的声音，就越能够听到别人的声音。”一旦我们能够敏锐地察觉并照顾自己的感受和需要，我们就有能力迅速调整好状态，来倾听他人。 当我们痛苦得无法倾听他人时，我们需要（1）体会自己的感受和需要（2）大声地提出请求（3）换一个环境。 当他人遭遇不幸时，我们常常急于提建议，安慰，或表达我们的态度和感受。为了倾听他人，我们需要先放下已有的想法和判断，全心全意地体会对方。倾听他人有助于对他人的理解和接纳。 与此同时，不论别人用怎样的词语表达自己，我们都可以用心体会他们的观察、感受、需要和请求。有时，我们可以主动表达我们的理解，来帮助对方了解我们在何种程度上明白了他的意思。在交流的过程中，我们保持持续的关注，为对方的充分表达创造条件。当我们痛苦得无法倾听他人时，我们需要（1）体会自己的感受和需要；（2）大声地提出请求；（3）换一个环境。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:8","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"8. 第八章 倾听的力量 如果有人倾听你，不对你评头论足，不替你担惊受怕，也不想改变你，这多美好啊……每当我得到人们的倾听和理解，我就可以用新的眼光看世界，并继续前进……这真神奇啊！一旦有人倾听，看起来无法解决的问题就有了解决办法，千头万绪的思路也会变得清晰起来。 一位大学教师提到，一些教师通过倾听以及表达自己的需要，使师生关系得到了明显的改善。 倾听亲人也许极为困难。 说的人更希望对方打断，而不是假装在听。 倾听有赖于我们体会他人的能力。 倾听使我们勇于面对自己的弱点。它还可以帮助我们预防潜在的暴力，使谈话生动有趣，并了解“不！”和沉默所反映的感受和需要。一次又一次，我见证了，倾听帮助人们治愈心灵的创伤。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:9","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"9. 第九章 爱自己 非暴力沟通最重要的应用也许是培养对自己的爱。 不幸的是，我们的自我评价方式往往导致自我憎恨，而无助于学习。 失误揭示我们的局限性，并引导我们的成长。 自责是尚未满足的需要的可悲表达。 一旦发现自己正在做无益的事情，我们的挑战是如何对需要和价值观保持清醒的认识，以使我们的转变：（1）符合我们的心愿；（2）出于对自己的尊重和爱护，而不是出于自我憎恨、内疚或羞愧。 非暴力沟通的忧伤：当我们的行为无法满足自身的需要，我们体会着人生的悲哀和内心的渴望。 非暴力沟通鼓励我们直面人生的苦难：在遇到挫折时，充分体会人生的悲哀和内心的渴望。是的，感到遗憾是难免的。但它能帮助我们从经历中学习，而无须责备自己。 非暴力沟通自我宽恕：感到遗憾时，我们试图了解过去的行为所要满足的需要。 当我们拥抱自己的各个方面，并理解它们所反映的需要及价值观，我们活在对自己深深的爱之中。 如果我们致力于满足他人及自己健康成长的需要，那么，即使艰难的工作也不乏乐趣。反之，如果我们的行为是出于义务、职责、恐惧、内疚或羞愧，那么，即使有意思的事情也会变得枯燥无味。 不论你选择做什么，了解自己为什么要那样做。 非暴力沟通最重要的应用也许在于培育对自己的爱。当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。评价自己的行为时，我们专注于尚未满足的需要；这样，我们就不再依赖羞愧、内疚、恼怒或沮丧的心理来寻求改变，而让爱主导我们的学习和成长。 同时，在日常生活中，我们主动根据需要和价值观来选择生活。我们的行为不再是为了履行职责、获得回报、逃避惩罚或避免感到内疚和羞愧。通过深入理解我们行为的动机，并用“选择做”来取代“不得不”，我们的生活将变得和谐并充满欢乐。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:10","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"10. 第十章 充分表达愤怒 在生气时，杀人、打人、骂人都无法真正传达我们的心声。如果真的很生气，我们就需要找到强有力的方式充分表达自己。 非暴力沟通并不主张忽视或压抑愤怒，它认为，通过深入地了解愤怒，我们可以充分表达内心的渴望。 生气的原因在于我们的想法——对他人的评判和指责。 希望他人因为内疚发生改变，就是将刺激和原因混为一谈。 除了专注于自身的感受和需要，我们还可以选择去体会对方的感受和需要。此时，我们也不会感到生气。我们无须压抑愤怒，只要我们专注于他人的感受和需要，愤怒也就不再存在。 与其沉浸于“合理的愤怒”，不如倾听自己和他人的需要。这也许需要一个过程，但通过不断的实践，我们将会有意识地用“我生气是因为我需要……”来取代“我生气是因为他们……”。 愤怒驱使我们去惩罚他人。 当我们意识到自己的需要，愤怒就转变为服务需要的情感。 听到不中听的话时，我们想起那四种选择：1．责备自己；2．指责他人；3．体会自己的感受和需要；4．体会他人的感受和需要。 表达愤怒的步骤：1．停下来。呼吸。2．留意我们的指责。3．体会我们的需要。4．表达感受和尚未满足的需要。 越是能够倾听他人，也越有机会被倾听。 一旦意识到他人的感受和需要，我们就会发现彼此相同的人性。 留意头脑中出现的暴力想法，而不评判它们。 我们需要有足够的耐心来学习和运用非暴力沟通。在与人交往的过程中，我们的第一反应常常是习惯性的反应，因此，运用非暴力沟通有时是很别扭的事。然而，如果我们想要实现自己的人生选择，我们就要给自己充分的时间。 练习把每一个指责都转化为尚未满足的需要。 在刚开始运用非暴力沟通时，我们可以把节奏放慢些，在说话前先想一想，有时，我们甚至停下来，什么也不说。 在生气时，批评和指责他人都无法真正传达我们的心声。如果想充分表达愤怒，我们就不能归咎于他人，而把注意力放在自己的感受和需要上。与批评和指责他人相比，直接说出我们的需要更有可能使我们的愿望得到满足。 我们需要给自己充分的时间来学习和运用非暴力沟通。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:11","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"11. 第十一章 运用强制力避免伤害 如果冲突的双方都能充分表达观察、感受、需要和请求，并得到对方的理解，那么，双方的需要通常可以同时得到满足。至少，他们可以求同存异。 有一方也许不想交流，或是危险迫在眉睫没有时间交流。在这样的情况下，我们可能就需要使用强制力来避免伤害。 使用防卫性的强制力，是为了保护自己或他人，而不是为了惩罚、羞辱或谴责他人。 在使用惩罚性的强制力时，我们认为某些人是邪恶的，为了让他们悔改，必须给他们一点颜色看看。此时，我们希望痛苦能让他们：（1）意识到自己的过错；（2）感到懊悔；（3）改变行为。然而，在实际生活中，惩罚往往加强了对方的敌意和抵触心理，使双方的关系更加疏远。 除了体罚外，指责或否定他人也是常见的惩罚方式。 惩罚将导致关系的疏远。一旦我们被看作是施暴的人，我们就很难得到友善的回应。 了解别人基于什么样的原因来满足我们的愿望是至关重要的。 如果我们威胁他人或实施惩罚，人们常常会产生敌意和抵触心理。这样，彼此的关系将会疏远。同时，惩罚还可能使人忽视事情本身的意义，而把注意力放在不服从的后果上。如果我们试图通过惩罚来使人们认识自己的需要，那么，我们很可能适得其反。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:12","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"12. 第十二章 重获生活的热情 情感的根源在于个人的需要和想法，并以建设性的语言提出明确的请求 她就用非暴力沟通的四个要素来表达“职业女性”的心声：“为了照顾孩子，我放弃了工作，留在家里（观察）；我有点心灰意冷（感受），因为我看重成就感（需要）。我想，我现在也许可以去找份兼职（请求）。” 专注于我们想要做的，而不是追究错在哪里。 体会自己的感受和需要可以释放压力。 体会他人的感受和需要也可以释放压力。 一旦我不把人当作诊断的对象，而专注于彼此作为人的感受和需要，人们通常都会有积极的反应。 通过培养非暴力沟通的意识和技巧，我们就可以在真诚、开放的气氛中与他人进行平等的互动，从而帮助他人摆脱心理的困扰。 在情绪低落的时候，我们也许会怨天尤人。然而，如果我们以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心将逐渐变得平和。一旦我们发现自己心底深处的愿望，并采取积极的行动，我们将会重获生活的热情。 如果我知道她想要的是什么，如果她告诉我她想加深与我的联系……唉！那简直就是在表达爱。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:13","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"13. 第十三章 表达感激 非暴力沟通表达感激的方式包含三个部分：1．对方做了什么事情使我们的生活得到了改善；2．我们有哪些需要得到了满足；3．我们的心情怎么样？ 对感激的渴望不仅存在于工作场合，而且也存在于家庭中。 从那以后，我就更加留意生活中积极的一面，并表达我的感激之情。 如果无法向那些对我们的一生有极为重要影响的人表达感激，我们会感到多么悲哀啊！ 即使人们在听到感激时会感到尴尬，他们也会想听到明确的表达。 在赞扬他人时，我们很少揭示内心活动，而把自己放在了裁判的位置。赞扬也常常被人用来实现个人目的。非暴力沟通鼓励我们充分表达感激。在表达感激时，我们说出：（1）对我们有益的行为；（2）我们的哪些需要得到了满足；（3）我们的需要得到满足后，我们是什么样的心情。 当别人以这样的方式表达对我们的感激时，我们可以与对方一起庆祝生命的美——既不自大，也不假谦虚。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:2:14","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"总结 非暴力沟通以善良、仁爱、宽容为核心，去感受自己与他人的需要，然后明确表达需求、提出请求。 非暴力沟通的四要素：观察、感受、需要、请求。非暴力沟通的模式用于表达自己和倾听他人。 诚实地表达自己，而不批评、指责： 观察：我所观察（看、听、回忆、想）到的有助于（或无助于）我的福祉的具体行为。 当我（看、听、想到我看到的/听到的）…… 感受：对于这些行为，我有什么样的感受（情感而非思想）。 我感到…… 需要：什么样的需要或价值（而非偏好或某种具体的行为）导致我那样的感受。 因为我需要/看重…… 请求：清楚地请求（而非命令）那些能丰富我生命的具体行为。 你是否愿意……？ 关切地倾听他人，而不解读为批评或指责： 观察：你所观察（看、听、回忆、想）到的有助于（或无助于）你的福祉的具体行为。 当你（看、听、想到你看到的/听到的）…… 感受：对于这些行为，你有什么样的感受（是情感而非思想）。 你感到……吗？ 需要：什么样的需要或价值（而非偏好或某种具体的行为）导致你那样的感受。 因为你需要/看重…… 请求：关切地倾听那些能丰富你生命的具体请求，而不解读为命令。 所以，你想…… ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:3:0","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"思考 正如书中所说：“非暴力意味着让爱融入生活。让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。” 非暴力沟通提醒我们，倾听内心中不同的声音，以及它们所反映的需要，这会促进自我理解和内心的和谐。通过观察、感受、需要、请求的模式，能养成一种好的沟通习惯，使生活多一些和谐、美好。 我会努力练习这样的沟通习惯，不断地改善身边的人和事，让人生充满爱和幸福。 ","date":"2022-03-24","objectID":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/:4:0","tags":["心理学"],"title":"读书笔记之《非暴力沟通：爱的语言》","uri":"/2022/03/notes-from-nonviolent-communication-a-language-of-life/"},{"categories":["读书笔记"],"content":"隐藏在顺从行为背后的六大要素分别是互惠、承诺和一致、社会认同、喜好、权威、短缺。","date":"2022-03-06","objectID":"/2022/03/notes-from-influence-the-psychology-of-persuasion/","tags":["心理学"],"title":"读书笔记之《影响力：让人乖乖听话的说服术》","uri":"/2022/03/notes-from-influence-the-psychology-of-persuasion/"},{"categories":["读书笔记"],"content":"隐藏在顺从行为背后的六大要素分别是互惠、承诺和一致、社会认同、喜好、权威、短缺。 ","date":"2022-03-06","objectID":"/2022/03/notes-from-influence-the-psychology-of-persuasion/:0:0","tags":["心理学"],"title":"读书笔记之《影响力：让人乖乖听话的说服术》","uri":"/2022/03/notes-from-influence-the-psychology-of-persuasion/"},{"categories":["读书笔记"],"content":"序 《影响力：让人乖乖听话的说服术》一书的作者罗伯特·B·西奥迪尼（Robert B. Cialdini）是说服术与影响力研究权威、亚利桑那州立大学的心理学系教授。这本书从心理学的角度为我们解释了为什么有些人极具说服力，而我们总是容易上当受骗。 ","date":"2022-03-06","objectID":"/2022/03/notes-from-influence-the-psychology-of-persuasion/:1:0","tags":["心理学"],"title":"读书笔记之《影响力：让人乖乖听话的说服术》","uri":"/2022/03/notes-from-influence-the-psychology-of-persuasion/"},{"categories":["读书笔记"],"content":"总结 下面是六大说服术和影响力原理总结，引用自微信读书中一位名叫 Mandala 的网友的书评： 互惠 互惠原理和发生作用，主要是利用人的亏欠感，是因为大多数人都讨厌一味索取、从不回报的人。比如请人吃饭办事，商场试吃活动，地推送小礼物。甚至适用于强加的恩惠，硬塞给我们的好处，也能触发亏欠感。 互惠式让步，也被称为登门槛效应，比如先提出大要求（非真正目的），被拒绝后，再提出小要求（真正目的），也就是拒绝后撤，这样往往会被同意。 承诺和一致 人都有一种言行一致的愿望，一旦做出一个选择或站在某个立场，立刻就会碰到来自内心和外部的压力，迫使按照承诺那样去做，会设法用行动证明之前做的选择或立场是对的。 所以当接受琐碎请求时务必要小心，一旦同意，就会影响自我认知去适应这个承诺，于此同时产生了与请求相对应的认知，当别人再提出相似的大请求时，会比刚开始就答应这个大请求的概率大很多。 社会认同 其实社会认同也就是从众心理，在一时不知道判断何为正确的时候，人们往往会根据别人的意见行事，倾向于观察别人做什么。比如，一些电视剧，抖音幕后插入的“罐头笑声”会增加搞笑氛围，一些餐饮店会请人排队，广告商号称“销量最大”会让人感觉产品更好。以及当新闻对自杀事件进行大肆报道之后，往往会引发社会更多自杀事件的现象。 在十八个路人无一人出手相救被车辆碾压的两岁女童的事件中，这些看似冷漠无情的人，其实都被社会认同原理所毒害，是处于多元无知状态的路人，每个人都通过他人反应判断事情严重与否，无法解读事情的紧急程度。所以，当遭遇危险时，不要对着所有人喊救命，指出具体的人求救会更有效果。 喜好 大多数人更容易答应自己熟悉、认识或喜欢的人提出的请求。主要体现在： 外表魅力：一般人会自动给长得好看的人添加一些正面特征，长得好看好办事； 相似性：我们更喜欢与自己相似的人，无论表现在观点，个性，还是背景； 恭维：很多销售会用到的小技巧，哪怕有时候我们心里清楚那是恭维，还是会开心； 条件反射和关联：人会自然而然地讨厌带来坏消息的人，喜欢好消息的人。哪怕报信人和好坏消息一点关系也没有，比如网络上会对出演正反面角色的演员本身进行追捧和攻击。 权威 一般人更倾向于权威，权威的象征有两个方面，头衔和衣着。比如说某专家指出，某科学家表明，都会感觉更有说服力。广告里出现穿着白大褂医生打扮的人宣传某产品也会让人觉得更加可靠。 短缺 物以稀为贵，人对于失去的恐惧会比得到更能激发行动力。比如常见的“数量有限”和“限时抢购”等。 ","date":"2022-03-06","objectID":"/2022/03/notes-from-influence-the-psychology-of-persuasion/:2:0","tags":["心理学"],"title":"读书笔记之《影响力：让人乖乖听话的说服术》","uri":"/2022/03/notes-from-influence-the-psychology-of-persuasion/"},{"categories":["读书笔记"],"content":"思考 读完《影响力：让人乖乖听话的说服术》这本书之后，我对一些商业活动和社会现象有了心理学层面的理解，将来在面对类似的心理操纵时，应该能够保持更清醒的头脑，独立思考，避免被轻易误导。 ","date":"2022-03-06","objectID":"/2022/03/notes-from-influence-the-psychology-of-persuasion/:3:0","tags":["心理学"],"title":"读书笔记之《影响力：让人乖乖听话的说服术》","uri":"/2022/03/notes-from-influence-the-psychology-of-persuasion/"},{"categories":["生活感悟"],"content":"余生可贵，世事无常，别让遗憾太长。","date":"2022-01-20","objectID":"/2022/01/life-is-short-and-love-is-long/","tags":["爱","幸福","家庭"],"title":"人生苦短，爱意绵长","uri":"/2022/01/life-is-short-and-love-is-long/"},{"categories":["生活感悟"],"content":"余生可贵，世事无常，别让遗憾太长。 ","date":"2022-01-20","objectID":"/2022/01/life-is-short-and-love-is-long/:0:0","tags":["爱","幸福","家庭"],"title":"人生苦短，爱意绵长","uri":"/2022/01/life-is-short-and-love-is-long/"},{"categories":["生活感悟"],"content":"豁达 要用一种不害怕的态度面对所有的事情，尽人力、知天命，只问耕耘，不问收获。 迷茫和空虚时，回顾未完成的目标清单。 学而时习之，温故而知新。 对己坦诚，不纠结、不自欺，真实地记录，用真实的数据来分析、决策，持续改进。 ","date":"2022-01-20","objectID":"/2022/01/life-is-short-and-love-is-long/:1:0","tags":["爱","幸福","家庭"],"title":"人生苦短，爱意绵长","uri":"/2022/01/life-is-short-and-love-is-long/"},{"categories":["生活感悟"],"content":"积极 出去运动吧，你将满状态归来！ 立刻专注吧，你将体验到心流的幸福感！ 保持整洁吧，你将感受到身心的舒畅和明朗！ ","date":"2022-01-20","objectID":"/2022/01/life-is-short-and-love-is-long/:2:0","tags":["爱","幸福","家庭"],"title":"人生苦短，爱意绵长","uri":"/2022/01/life-is-short-and-love-is-long/"},{"categories":["生活感悟"],"content":"爱与幸福 父母在，人生尚有出处； 父母去，人生只剩归途。 爱父母，爱妻子的父母； 爱妻子，爱我们的孩子； 爱自己，爱我们的亲朋。 ","date":"2022-01-20","objectID":"/2022/01/life-is-short-and-love-is-long/:3:0","tags":["爱","幸福","家庭"],"title":"人生苦短，爱意绵长","uri":"/2022/01/life-is-short-and-love-is-long/"},{"categories":["生活感悟"],"content":"选择 道理不是解决问题的终极方法，爱才是。 当陷入坏情绪时，最明智、最有价值的选择是：观察内心的情绪变化，多做有利于良好情绪的行为，并减少不必要的情绪消耗，以维持积极的心理状态。 ","date":"2022-01-20","objectID":"/2022/01/life-is-short-and-love-is-long/:4:0","tags":["爱","幸福","家庭"],"title":"人生苦短，爱意绵长","uri":"/2022/01/life-is-short-and-love-is-long/"},{"categories":["读书笔记"],"content":"她不能被家人所束缚，她注定是飞鸟，要飞往自己的山去。","date":"2022-01-16","objectID":"/2022/01/notes-from-educated-a-memoir/","tags":["人物传记"],"title":"读书笔记之《你当像鸟飞往你的山》","uri":"/2022/01/notes-from-educated-a-memoir/"},{"categories":["读书笔记"],"content":"她不能被家人所束缚，她注定是飞鸟，要飞往自己的山去。 ","date":"2022-01-16","objectID":"/2022/01/notes-from-educated-a-memoir/:0:0","tags":["人物传记"],"title":"读书笔记之《你当像鸟飞往你的山》","uri":"/2022/01/notes-from-educated-a-memoir/"},{"categories":["读书笔记"],"content":"序 这本书的英文原名为「Educated: A Memoir」，可以直译为「教育之名：一段回忆录」。 在面对台湾翻译的中文书名《在垃圾场长大的自学人生：从社会边缘到剑桥博士的震撼教育》时，塔拉觉得这不是她想要的最佳译名。因为这本书并不是一篇励志的鸡汤爽文，而是一个从原生家庭的心灵创伤下自我救赎的真实故事。对于自己取得的成就，塔拉在书中只是轻描淡写，她的真正求学之路对于大多数人反而没什么可以借鉴的。 英文的原版封面用一支铅笔勾勒出大山的轮廓，一个女孩站在一座山头，眺望远方的崇山峻岭，一群飞鸟向着远方的山林飞去。你当像鸟飞往你的山Flee as a bird to your mountain——出自《圣经·诗篇》，这句话本身有双重解释，一种是“逃离”，一种是“找到新的信仰”。这也是塔拉决定使用的中文版书名。 ","date":"2022-01-16","objectID":"/2022/01/notes-from-educated-a-memoir/:1:0","tags":["人物传记"],"title":"读书笔记之《你当像鸟飞往你的山》","uri":"/2022/01/notes-from-educated-a-memoir/"},{"categories":["读书笔记"],"content":"总结 书中，塔拉的回忆按照时间的顺序展开，有一段往事插叙其中：塔拉一家曾救助过一只野生的大角猫头鹰。这个受伤的野性生灵发现自己被囚禁，险些将自己拍打致死，于是他们只好将它放生。这支小插曲似乎就是对这个书名的诠释，也是作者对自身处境的诠释。 她身在剑桥，与周遭所有人都不同，童年的独特经历让一部分的她永远属于那座大山，似乎显得格格不入，这是她无法剥离的原生家庭痕迹；另一部分的她不能被家人所束缚，她注定是飞鸟，要飞往自己的山去。这山是她为自己找寻的山峰，不是家人给她定义的山峰。她就是那只猫头鹰，有着自由飞翔的意志，不能教她属于那里。 教育给了塔拉全新看待家人看待世界的视角，她重新审视父亲的精神奴役，母亲的懦弱，哥哥肖恩的暴力，她勇敢地抵抗家庭对她受教育的反对和阻碍，一切，都在教育的创伤中成长。将自己从精神奴役中解放出来，只有我们自己才能解放我们的思想。亦如塔拉所说：“你可以用很多说法来称呼这个全新的自我：转变，蜕变，虚伪，背叛，而我称之为：教育。” 下面是豆瓣上一位有着相似经历，感同身受的网友的书评： 幸福的童年治愈一生，不幸的童年要用一生来治愈。 心灵创伤从来都不是某一个时刻顿悟就变了个人，那是一条很长的路。就像作者写的那样，反反复复，妥协，挣扎，妥协再挣扎。原生家庭的伤害，童年霸凌的心理创伤，很多人没有经历过是不知道，或者自己都意识不到那对自己的为人处事有着很大的影响。觉得自己不配，觉得自己一无是处，不断的质疑，否定自己，不管读再多的书，经历再多。如果没有勇气回去面对，是怎么都走不出来的。 心理医生帮助患者心里搭建一座信任的桥，亲人朋友的支持才是塔拉面对过去，走出来的底气。一个人长大了，不代表他的心理就成长了。也许，有相似的经历，才能看懂作者的挣扎。不会觉得还不够苦。 ","date":"2022-01-16","objectID":"/2022/01/notes-from-educated-a-memoir/:2:0","tags":["人物传记"],"title":"读书笔记之《你当像鸟飞往你的山》","uri":"/2022/01/notes-from-educated-a-memoir/"},{"categories":["读书笔记"],"content":"思考 塔拉的经历充满了创伤和挣扎，抛开那些心理感受，我更愿意用积极的视角去获取一些能量，其中印象最深的是： 榜样的力量 哥哥泰勒是第一个离开原生家庭去求学的，并获得了博士学位。他用亲身经历证明了自己，并启蒙和鼓励塔拉勇敢的迈入大学，是塔拉的榜样，这也是塔拉将书“献给泰勒”的原因。 另一位哥哥理查德，也在塔拉之后迈入大学，也拿到了博士学位。同样的家庭出身，强烈的反差，7个孩子，3个博士，4个没读过高中，这本身就体现了榜样的力量。 苦难的财富 苦难的经历反而转化成了塔拉的财富，为她的论文研究领域提供了宝贵的素材，获得了导师的青睐，也造就了她之后剑桥哈佛平步青云的传奇经历。 人情的温暖 父亲的精神奴役，母亲的懦弱，哥哥肖恩的暴力并不是塔拉生活中的全部。祖母的疼爱、母亲的关心、哥哥泰勒的鼓励给塔拉的生活带了温暖和希望，在迈入大学校园之后，同学的友善、朋友的关心、教主的经济支援、导师的悉心照顾也是塔拉的幸运，都值得感恩。 我也会继续保持积极的视角，从榜样的身上汲取力量，将苦难的经历转化为财富，感受并感恩人情的温暖，持续学习，从中受到教育，像鸟飞往我的山。 ","date":"2022-01-16","objectID":"/2022/01/notes-from-educated-a-memoir/:3:0","tags":["人物传记"],"title":"读书笔记之《你当像鸟飞往你的山》","uri":"/2022/01/notes-from-educated-a-memoir/"},{"categories":["读书笔记"],"content":"影响幸福感的六个维度有凝聚感、金钱、健康、自由、信任和与人为善。","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"影响幸福感的六个维度有凝聚感、金钱、健康、自由、信任和与人为善。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:0:0","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"序 迈克•维金Meik Wiking是哥本哈根「幸福研究所」的首席执行官，他致力于理解快乐、主观幸福感和生活质量。 这本书的英文原名是「The Little Book of Lykke: Secrets of the World’s Happiest People」，直译过来就是「一本关于幸福的小书：世界上最幸福的人的秘密」，LYKKE 在丹麦语中的意思是「幸福」或「快乐」。中文翻译的书名《刻意放手：向最幸福的人学习幸福》中的「刻意放手」可能不太准确，书中其实重点分析了凝聚感、金钱、健康、自由、信任、与人为善这六个维度对幸福感的影响，以及如何通过一些改变让自己更幸福。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:1:0","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:0","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"1. 第一章：寻宝之旅 我写这本书的意图：带领各位读者寻宝，去追寻幸福快乐，发现世上存在的美好，然后把这些统统展示出来，再一起散播出去。 在作者的上一本书中，他曾提出丹麦人的幸福理念：HYGGE，它很难被翻译成准确的中文，意指亲密的关系，放松的心情，温暖，美好，愉悦，享受当下。——编者注 LYKKE 在丹麦语中的意思是“幸福”或“快乐”。不管你如何表达这个词，围坐在一起讲故事时，孩子们都会发自内心地微笑。 我们都认为坐在3月柔和的阳光下，眺望着被白雪覆盖的巍峨的山峰，同朋友们分享食物，这几乎就是幸福的感觉。 当我看到7岁的小朋友可以安全地骑着自行车自己去上学，我会微笑。当我看到咖啡厅里的家长们丝毫不担心把熟睡的孩子放在街边的婴儿车中，我会微笑。当我看到人们在哥本哈根内河港口干净的水中游泳，我会微笑。 仔细阅读《世界幸福报告》就会发现，在世界上最幸福的几个国家和最不幸福的几个国家之间，存在着4分的分差，其中3分可以用着六个因素解释：团结或社群意识、金钱、健康、自由、信任和友善。每一个指标我都会单辟一章来讲述，每一章会探索为什么这些因素影响着人们的幸福程度，我们会从世界各地的人们那里学习幸福的配方，然后发掘能使自己变得幸福的方法，最后再把这些方法结合起来，拼成一副搜索幸福的寻宝图。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:1","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"2. 第二章：如何衡量幸福 人们一直说金钱就等于幸福，事实上，金钱或许能让你幸福，但绝不是达成幸福的唯一条件。 命运和生活其实待我不薄。 情感维度和认知维度二者相关联，在一定程度上还有重合。如果你的日常生活充满积极情绪，那么很可能对整体人生有着更高的满意度。 再从稍微复杂的角度看一看，现在允许我提出第三个维度 eudaimonia，即目的和使命维度。这个词在古希腊语中意为“幸福”，基于亚里士多德对幸福认知的解释。对这位伟人来说，好的生活是有意义的，带有目的和使命感。 一般情况下，那些居住在乡下的人比在大城市更快乐。那些被大城市吸引的人或许更有野心，缺点就是他们会习惯性地对现状不满。 在我看来，行为习惯中小小的改变就可能在潜移默化中提升幸福感，伟大的事情有时始于微不足道的开端。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:2","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"3. 第三章：凝聚感 分享食物不仅仅是喂饱自己，它还巩固了友情，加深了联系，并培养我们的群体意识，这些都是提升自己幸福感的重要因素。 围坐在餐桌旁，投入食物和火所营造的仪式中，我们就能深刻理解美好的生活是建立在良好关系和使命感之上。也让我们体会到财富衡量标准不是银行账户的余额，而是相互之间纽带的强度、我们所爱的人的健康状况和感恩的心情。幸福并不来自拥有一辆更豪华的车，而来自知道自己是更大集体或社群的一部分的那种归属感，且知道我们所有人都在这里面的安心感。 那些最幸福的国家都有着很强的群体意识：那些最幸福的人在需要帮助的时候，都有信赖的人可以依靠。 幸福小窍门：为吃饭辟出时间。夺回自己的午餐时间，约朋友、家人和同事出来，细嚼慢咽地享用美食和他人的陪伴。 在北欧国家，大家都很好地理解了安心生活和共同利益之间的联系。我们没有为了交税而交税，我们实际上是在购买高质量的生活，为自己的集体和社群投资。 院子里充满了孩子嬉戏的欢笑声，跑进跑出的他们来自不同家庭。 即便你不是一个研究幸福的专家，也能感受到更强的社群意识、坚固的安全感和保障感，以及更广泛更紧密的友谊对人们的幸福感有正面的影响。 如果你想造一艘船，先不要一批人来搜集木材，不要指挥他们做这做那，而是激发他们对大海的渴望。 将你所住街道上的邻居们凝聚起来，建立一份通讯录来共享各自的技能和资源。第一次敲开邻居家的门可能对有些人来说很恐怖，但收获也是很大的。最重要的是，你得开口跟邻居说话，知道他们的姓名，了解他们的一技之长、兴趣和需要，在他们周围建立起集体般的社群，这个集体就像你周围的邻居一样多样和独特。 我发现在幸福的场景里，人们总是更经常跟其他人在一起。 孤独不利于幸福的感知。人是一种社会性动物，马斯洛需求层次理论将爱和归属感排在人类最基本的生理需求之后。 尝试去同你的邻居们说话，约他们喝咖啡，在社区菜园里帮他们，或者下次见到他们时直接停下来打招呼。 人类在感到自己同其他人联结的时候，会更快乐。 那些在社交媒体上减少花费时间的人更开心，并且在现实生活中同他人联络更多。 创造“戒电子设备依赖症”小团体。鼓励你的朋友和家人，以周为单位设立“无电子设备”固定时间段，抵御时不时要看手机的诱惑，为自己“戒毒”，戒断电子设备依赖症。 在晚餐前后辟出两小时的“无手机时间段”，或者在衣帽架旁放个篮子用来存放手机，你也可以鼓励来访的朋友们把所有电子设备都放进去。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:3","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"4. 第四章：金钱 许多事情都一样，某样东西我们拥有得越多，从中得到的快乐也就越少。经济学家把这个称做“边际效用递减法则”，这也是为什么一些国家和人民虽然变得更富有，却没有更幸福。另外一个原因是我们适应了新的财富水平，在幸福研究中，这个叫“享乐主义踏板”。 而物质条件上，则部分印证了古罗马思想家马可奥勒留的那句名言，“有多大雄心，就有多大价值”，但他好像忽略了一个人的价值不能跟幸福程度画等号这一点。 快乐等于野心减去现实可能说得通。丹麦人之所以有这么高的生活满意度，主要原因是他们对来年的期望值一直都很低。可能丹麦人在积累财富方面没那么有野心，但也不能说明他们对未来悲观。 花时间享受你在向目标前进时的旅途，同时记住，达到目标不等于完全自我实现。快乐只是过程的衍生品，而不是冲过终点线后举起金灿灿奖杯的瞬间。 期望让心态变得更温柔。期望能成为快乐的源头。 先付钱买下，在慢慢享受。在为一段经历买单之前，要确保这是在未来发生的，为的是你可以对它的到来产生期望。规划再长远一点，10年后，你梦寐以求的是什么？然后开始把一些钱存在单独的“幸福账户”里。 炫耀性消费，指的是通过购买奢侈品来显示自己的财富，从而获得一定社会地位的现象。我想说的是，如果我们把钱花在了自己不需要的物品上，借此来取悦别人，我们并不会更接近幸福，而是卷入到了一场军备竞赛中。如果我们节制消费奢侈品，那我们都会很快乐。 在韩国，人们就经常说：“如果一个兄弟买了地，另外一个就会胃疼。” 当我们研究如何把财富转化成全民的幸福时，美国是一个主要失败案例。 春天来了，生活也变得不同。出去踏青、骑自行车变得更有意思，她还会去湖里游泳；在找到免费的艺术品展览和博物馆后，探索伦敦成为了她的乐趣所在。她使用 Eventbrite 等类似的网站来寻找免费的观影会、品酒会和戏剧演出等。她甚至免费度了一次假，沿着英国的海岸骑自行车，在海滩上扎帐篷住宿。 财富不在于多得，而在于无缺。当我们发现自己的幸福不再依托于财富时，我们才算找到了真正的财富。 将物品同经验联系起来。把花大钱的机会留到适当的时候，这样物品的价值将远远超出价签上的数字，因为这反映了你此时的记忆和感受。如果你必须要买什么东西的话，试着将购买的行为同美好的事件和经历联系起来。 让孩子们知道食物从哪里来，享受观看苹果成长和品尝果实的喜悦，一起劳作收获农产品，以及培养他们照顾这棵树并将其转交下一代的自豪感和使命感。 这三种花费不多的举动能带来幸福。 阅读。一枚完美的午后就是：夏日坐在树荫下面，酣读一本书。阅读是一种免费的疗愈方式。 创造微笑文件夹。每周写下让你很感激的三到五件事情，可以是“我的家人和朋友们都很健康”或者“咖啡和滚石乐队很棒”，同时也描述一下这些事对生活有什么积极的影响。研究表明，将我们的思想转化成明确的语言，要比只是想一想更能带来积极作用，使我们变得更懂自己，并提高情感的表达能力。最好以偶尔的频率来完成它，比如说一周一次而非每日一次，以防止它变成例行公事的程序。 建立免费快乐小团体。你可以成立一个免费快乐小团体，在这里，每位朋友轮流组织一场不怎么需要花钱的社交活动，朋友们可以借这个机会聚在一起，度过闲暇时光。 花最少投资，把幸福收益最大化。钱固然重要，但它不能决定所有事情。幸福程度不仅跟我们赚多赚少有关，还跟我们怎么用有关。 购买人生经历和回忆，而不是物件。比如旅行、聚会。把人生经历当作对美好记忆的投资，当作对你个人发展的投资，你会受益无穷。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:4","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"5. 第五章：健康 这个周末，吹掉你自行车上的灰，出去兜兜风吧。 骑行让我们更活跃、更健康，进而让我们更幸福，不管是短期还是长期。 幸福的最大障碍是人们感觉自己低人一等或被排除在外，而一座好的城市不会让市民有这样的想法。 多步行，下面是不去健身房也能经常锻炼的10种方法：1.不坐电梯。2.走去同事那与他交流。3.找一个“走友”。4.选一段风景优美的路线。5.把每周三都当成“步行星期三”。6.来一场掷硬币决定的旅程。7.带上播客。8.走起来，不要等。9.约你朋友一起去走走，而不是坐着。10.加入健走俱乐部或者远足兴趣小组。 每天多活动一点。在每天的常规事情中添加运动，比如走楼梯，跟同事边散步边开会，或者把车停在离超市出入口尽量远的地方，等等。 让无意的轻度运动成为正常生活的一部分。 研究还表明步行和骑行比驾驶更能带给我们好心情。 在我骑自行车上班的路上，我会经过占地面积很大的公共花园。这个花园为我提供了感知春天到来的一种方式，我能闻到樱花怒放的香气。骑自行车跟驾车比起来能让我们的心情变得更好，部分原因就是在骑行时，我们的感官能被周遭充分调动起来。我们能真切地感受到生命的活力，步行也是一种比驾车更能充分感知周围世界的方式，特别是当你置身于那种日本人称之为“森林浴”的环境中时。 做一个常常的深呼吸，让肺里充满湿润、新鲜的空气。在森林中缓步行走，抬头看看初春那几周特有的鲜绿色树叶，太阳的光线在树叶缝隙间起舞。稍作停留，闭上眼睛，你能听到自己的呼吸声，远处小鸟叽叽喳喳的叫声，以及风在树林间穿梭的声音。160多年前，亨利•戴维•梭罗在他的著作《瓦尔登湖》中为那些心怀不满的人开出了补药——去丛林野外；现在，“森林浴”或许能让人们重拾对这一剂处方的依赖。 “森林浴”来源于一个日语词，就是把自己浸在森林的氛围里，吸收自然中的景色、气味和声音，为自己的生理和心理健康提供足够的滋养。这个词语1982年被创造出来，现在，数百万日本人都热衷于探寻全国48条“森林疗法”路线，来获得属于自己的补给，这种营养素可以称为“户外活动内啡肽”。 花时间亲近大自然对人类健康百益而无一害。 “森林浴”可以帮你将脑子里的烦心事清空，让自己的感官重回巅峰状态。 在一年的时间里，定期到大自然中去，访问相同的地点，并留心每次景致都发生了什么变化。 正念修行在佛教中有着很深的渊源，要以就是人对幸福的永恒追求会导致痛苦。我们能感受到痛苦是因为万事皆非永恒；正念是活在当下，就在这里，现在这一刻，用爱和善对待自己。我们的念想经常纠缠于未来和过去，正念就是要人们活在当下，体会当下。 下次当你问一个人“你过得怎样？”时，要对回答产生真正的兴趣，不要接受“不错”这样的敷衍。“我很关心你，也很想倾听你的想法。关于你的近况，你有什么想让我知道的吗？” ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:5","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"6. 第六章：自由 丹麦人丝毫不掩饰自己对闲暇时间的重视。他们珍视同家人和朋友共度的时光。丹麦是世界上工作和生活平衡制度执行得最好的国家之一。 北欧人的观念是，孩子是两个人共同生的，所以养孩子也应该是两个人的责任。 孩子是快乐和爱的源泉，这一点毋庸置疑；但同时，孩子的诞生也带来了压力、挫败感和焦虑。 疼爱孩子并相信他们是上天赐予的最美好的礼物，并不是说抚养他们完全没压力。孩子为父母提供了充实生活的目标，并要求父母牺牲自己的空闲时间。 一岁以内的孩子可以长达数月地让你不能安心入睡，但50年后，当你在养老院颐享天年时，他又可能会变成你快乐的源泉。 如果一直这么渴望却不付诸行动的话，失望将会越积越多。 你人生的很大一部分都会倾注在工作上，所以应该做一些让你乐在其中的事情。 从零开始创业很艰苦。“我穷，但我快乐。创业的工作量比正常的工作大得多。但我不会用这份事业去换世上的任何工作。创业后最大的变化是你等于工作。我成为母亲，当上公司老板，作为爱人，交朋友没有先后顺序。我就是维罗妮卡，一直都是。这才是让我感觉快乐的原因。” 创业者在很多方面并不如意，比如收入、工作时长和工作保障等，尽管如此，他们整体的工作满意度却往往比固定工作的劳动者高，至少在经合组织成员国是这样。 创业企业家有明确的使命感和人生的规划，研究也指出，人们普遍认为自己给自己当老板能带来更大的自由和更多的机会，这其实是为工作和生活创造快乐的源泉。 创业者几乎没有空闲时间，但他们却有很多自由来追寻自己的激情所在，对客户说“不”，以及根据家庭的需求来安排工作日程。 工作能且应该成为幸福的来源，一个精心设计、运转良好的办公环境能使我们更精神饱满地投入到工作中去。所谓精心设计，就是要提供一定的自由，没有打扰的独立工作时间，这也使员工们能自由选择在家办公。 大部分人都把通勤当作负担，对在这件事上没有自主决定权感到沮丧，被困在了公交车、地铁或汽车上。 汽车代表了终极的自由是典型美国式想法，全世界的汽车广告都一个样，营造一种驾车沿着海岸线兜风，周围绿树环绕，只有你一辆车独占道路的场景。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:6","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"7. 第七章：信任 去哥本哈根旅行，在习惯了街道上来来往往的自行车后，你还会注意到别的事情——婴儿车就那么摆在室外的公共场所，而孩子们在车里酣睡。 你不仅能看到信任，大家还表示对你的信任。相信别人的人更幸福，信任让生活更便捷。 鼓励同事间相互褒奖，以增强信任感。 丹麦的教育体系仍然把培养学生将心比心的品格放在优先位置，孩子们通常以组为单位完成作业，这也是未来职业发展必须要掌握的技巧，同时他们还掌握了社会技巧，认识了合作的价值。 那些给孩子们排名的教育体系无异于告诉他们成功就是“零和博弈”，如果你发达了，必将会夺取他人的机会，但幸福的获得不应该是这样的。事实上，在你与他人分享幸福的喜悦之后，它不会变少。在丹麦，学生们没有排名，在八年级之前也不会收到正式的成绩报告。取而代之的是，老师和每位学生的家长每年都会进行一次谈话，就学生在学业、社交能力和情感上的发展交换意见。 信任不昂贵。把对抗转化成合作。通过重新制定规则和目标，把对抗时的厮杀变成合作中的握手。 虎妈还是象妈？金教授发现，同那些认为父母“支持自己”或“随和”的孩子相比，虎妈教育下的孩子会取得更坏的成绩，更加沮丧，并感觉同父母的关系更疏远。我们来看一下象妈和象爸的优势，他们培养和鼓励自己的孩子，并相信孩子如果知道自己被爱和被呵护，跟成绩高低无关，那么这种爱会给他们力量来发现并追寻幸福之路。 对感同身受进行力量训练。阅读文学小说，走出你平时的社交圈，去理解其他人的行为。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:7","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"8. 第八章：与人为善 帮助别人，倾听每个人的故事，见证希望、梦想和挣扎为这些人带来的喜和悲，并成为他们故事中的一部分。当我们了解一个人后，就会开始在乎他，无论这个人获得胜利还是遇到挫败，我们都在这里。 学学爱美丽。通过善意的方式，找到为他人带去幸福的方法。 在别人的家门前放一份礼物。 记住前台工作人员或以为你每天都能见到的人的姓名，主动叫他的名字，向他问好。 做两份早餐，把一份给别人。 在派对上或办公室里，主动接近躲在角落里害羞的人，跟他交谈。 给别人由衷的称赞，就在现在。 我们在做好事的同时，自我感觉也会很好，因为这种行为所带来的快感同少量摄入吗啡的感觉一样。 助人为乐带来的快感不但能让自己心情变好，这种利他主义还对我们的整体幸福感和对人生的评价有积极影响。参与志愿活动的人更快乐，即使是在排除了社会经济地位等控制因素之后。此外，这些人也表现出更少的抑郁和焦虑症状，享受更有意义的生活。 散播微笑和友好的言辞，这些都是免费的。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:8","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"9. 第九章：把点连成线 为什么我们那么倾向于注意到消极的一面呢？可能是因为消极能让我们变聪明。 当一名悲观主义者毫无意义，用悲观面对人生从来都不会成功。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:2:9","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"总结 英文直译的书名「一本关于幸福的小书：世界上最幸福的人的秘密」准确的表达了全书的内容和主旨。将「刻意放手」作为中文翻译的书名，过于狭隘了。书中通过很多幸福案例，分析了凝聚感、金钱、健康、自由、信任、与人为善这六个维度对幸福感的影响，提出了国外的一些提升幸福感的做法，值得学习。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:3:0","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["读书笔记"],"content":"思考 虽然现实的生活总是不尽如人意，但看过最幸福的人的生活是什么样子，我们也可以试着参考书中的一些提升幸福感的做法，开始一些力所能及的改变，努力让自己更幸福。这本书也给我种上了北欧的草，希望未来能够携家人一起去北欧亲身体验那种幸福生活。 ","date":"2022-01-09","objectID":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/:4:0","tags":["幸福"],"title":"读书笔记之《刻意放手：向最幸福的人学习幸福》","uri":"/2022/01/notes-from-secrets-of-the-worlds-happiest-people/"},{"categories":["生活感悟"],"content":"我重新燃起了对知识的渴望和不断学习的热情。","date":"2022-01-06","objectID":"/2022/01/my-2021-year-in-review/","tags":["成长","年终回顾"],"title":"我的2021年终回顾","uri":"/2022/01/my-2021-year-in-review/"},{"categories":["生活感悟"],"content":"我重新燃起了对知识的渴望和不断学习的热情。 ","date":"2022-01-06","objectID":"/2022/01/my-2021-year-in-review/:0:0","tags":["成长","年终回顾"],"title":"我的2021年终回顾","uri":"/2022/01/my-2021-year-in-review/"},{"categories":["生活感悟"],"content":"成绩 我在2021年里取得了如下成绩： 🎓 完成了全部研究生课程并都拿到了学分 👶 添了一个聪明伶俐的宝宝 🏠 买了一套大房子 📚 背了一万两千个单词 📑 写了这个新博客，每篇文章都有英文版本 🏆 取得了三个专业证书：AWS-SAP、ITIL 和 CKA 💸 获得了公司的 MSTAR 表彰并晋升为 AVP（助理副总裁） 我也开始了减肥 🏃 和备考 CISSP。最重要的是，我重新燃起了对知识的渴望和不断学习的热情 ☀️。 ","date":"2022-01-06","objectID":"/2022/01/my-2021-year-in-review/:1:0","tags":["成长","年终回顾"],"title":"我的2021年终回顾","uri":"/2022/01/my-2021-year-in-review/"},{"categories":["读书笔记"],"content":"番茄工作法是一种简单易行的时间管理方法，有张有弛，能够减轻时间焦虑、提升专注力和减少中断。","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"番茄工作法是一种简单易行的时间管理方法，有张有弛，能够减轻时间焦虑、提升专注力和减少中断。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:0:0","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"序 番茄工作法由弗朗西斯科•西里洛于1992年发明，名称源自于一枚形状像番茄的厨房定时器。 番茄工作法是一种简单易行的时间管理方法，流程如下： 选择一项任务 设定番茄钟为25分钟，开始倒计时 专注工作，直到番茄钟响铃 短暂休息5分钟 每4个番茄钟后，阶段性休息15-30分钟 整个流程的确比较简单，但不假思索就直接使用、缺乏对每日周期的理解、不会处理中断、不会调整和定制番茄钟时间长度的话，实施的效果可能会很差。 在《番茄工作法图解：简单易行的时间管理方法》这本书中，包含了一系列的科学理论方法和最佳实践，有效地解决了上述问题，充满启发且行之有效。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:1:0","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:0","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"0. 推荐序 频繁的中断、重复的活动、迫近的期限，常常使我们力不从心。而这些压力又是最害人的：它们带来更多的压力、更多的被迫行为、更多的难以为继，同时妨碍了我们自觉、专注、清醒地思考。结果是心智游走在过去未来之间，只为找某个人、某件事来顶罪，掩盖我们虚构中的无能。 我所发明的“番茄工作法”，意在让人们驻足、观察、醒悟，并在此过程中改进自我。时间不再是紧绷的弦，反而变成同盟战友，帮我们将100%的心智专注在当下，避免不必要的压力和负担。使用番茄工作法，你将学会微笑达成目标，做强者而无需逞强用力。 番茄工作法与 Scrum、XP 等敏捷工作法类似，但它更关注“微观”层面，相当于一个单人团队在执行25分钟的迭代。最大的区别在于，使用敏捷方法，生产率通常意味着在每个迭代完成了多少工作；而使用番茄工作法，生产率意味着每天完成了多少个番茄钟。要完成大量工作，重点不在完成工作上，而在于能否集中注意力！ 番茄钟是个时间管理的好工具。拖拉的人用它，时间变的紧凑高效；勤奋的人用它，工作变得有张有弛。 你是否和我一样，工作时，不知不觉地走神去干别的事了。尤其是面对电脑时，坐在网络世界的某个节点上，很容易被外界大量的信息——精彩和垃圾的信息所吸引，于是东摸西摸一阵，其结果，别的事没办成，工作也耽误了。 番茄工作法是一套简单的工具和流程，其优点如下： 减轻时间焦虑 提升集中力和注意力，减少中断 增强决策意识 唤醒激励和持久激励 巩固达成目标的决心 完善预估流程，精确地保质保量 改进工作学习流程 强化决断力，快刀斩乱麻 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:1","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"1. 第1章：一次只做一件事 要想做到专注，你就得坚决抛开各种杂念。 我在公交车上读书的时间相对固定，活动单一，目标单一，成果却很惊人。你只要为自己的“小公交车”确定目的地，并设好闹钟，然后专注在工作上即可。 番茄工作法能帮你与时间化敌为友，不会再因为还有一小时、一天、一周、一个月的时限而充满焦虑，你要做的就是定好25分钟番茄钟，然后全然专注于手头的任务。如果番茄钟响铃，25分钟结束，而任务还没完成，这并不代表失败。相反，这铃声在为你已连续地工作了一整段时间而喝彩。 别考虑任务有多复杂，重要的是开始、再开始。扭启番茄钟，半小时内你会有所斩获，并获得休息作为奖赏。 不要总想着要完成整件事你还得费多少功夫，而是想想要完成这一个番茄钟其实也没多久。先完成它，你就会得到回报。 番茄工作法要求在每天早晨做计划，为自己当天分派为数不多的活动。 番茄工作法，以25分钟的短期迭代为节奏，帮你建立可持续发展的步伐，休息时安心休息，工作时一心一意。 番茄工作法是以动作为导向的，扭启番茄钟是动作，遵守铃声是动作，填写“今日待办”表格是动作。习惯成自然，充分利用条件反射的力量。 为了避免第二天犯同样的错误，番茄工作法在一天结束前要做三件事：记录、处理和可视化，这些每日回顾工作，是改进个人流程的关键。每天都学习，每天都进步。这样还有一个好处是，一开始你是按照书本应用番茄工作法，等到认清自身工作习惯后，就可以进行调整，形成自己专属的一套方法。 总是把估计值当作承诺，无论是对自己或对同事，都会造成不必要的焦虑。为避免此类困境，番茄工作法只计算番茄钟。就算最后期限迫在眉睫，你也能花25分钟专注于该做的事。 完美主义，碍手碍脚。“等一等，还有更完美的方案”其实是另一种形式的拖延。番茄工作法没有给“拖延”任何的机会。你只能前进，开始一个番茄钟，不必惦记怎样才能做到“非常完美”。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:2","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"2. 第2章：背景 番茄工作法是简单地让你顺应自己的天性去工作，因势利导，而不是与之对抗。 作息时间不规律的人往往更容易迷茫和焦虑。 同样，我也已经通过番茄工作法训练了大脑，一扭启番茄钟，就把注意力集中；一到番茄钟响铃，注意力就放松下来。就连咔哒作响的声音现在也能加强我的注意力。这些都是条件反射。 我需要休息，以获得新的能量。要让注意力处于最佳状态。 思维导图，是理清联想脉络、服务长期记忆的极佳工具。 短暂的定期休息，能够促进融会贯通的能力。这就解释了，为何有些解决方案会在我午饭或一夜睡眠后冒出来！ 吃一堑，长一智，应当更加频繁地提供反馈和接收反馈。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:3","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"3. 第3章：方法 番茄工作者的一天具有以下5个阶段： 计划：在一天的开始，从积压的工作（称为“活动清单”）中提取最重要的活动，填写到“今日待办”表格中。这就是你当天的自我承诺。 跟踪：确定当天活动后，扭启25分钟的番茄钟，从当天活动的第一项开始进行。在每个25分钟的时间段（称为一个番茄钟）内，你要收集一些过程指标，比如计算遇到的终端次数。 记录：在一天结束时，将当天收集的数据归档，写入“记录”表格。如果你跟踪了中断次数，就把中断次数写下来。 处理：从所记录的原始数据中提取有用信息。例如，可以计算在每个25分钟的时间段，平均遇到几次中断。 可视化：最终你要将信息以某种方式组织起来，从中找出改进流程的思路。如果你想获得最适合现实情况的工作习惯，在自我调整过程中，基本上每天都要做这样的回顾。 在每天开始时，进行计划；每天结束时，进行记录、处理和可视化；在两者之间，进行对25分钟周期循环的跟踪。 戴明循环的4步为：计划 Plan - 执行 Do - 评估 Check - 修正 Act。番茄工作法是一套典型的 PDCA 流程。 “现在就做”是一个很好的原则，可以减少你“不得不做”的工作数量。 将最重要的活动排到第一位，并全力以赴去做，有一种脚踏实地的安全感，否则注意力会一直被这样的问题扰乱：“我现在真的在做最重要的事情嘛？” 我在心目中将“必须得做完”换成“从哪里开始”，将“这个项目很大很重要”换成“我可以走出一小步”。 “每日待办”表格是在时间段限定内的承诺。某件事你今天不打算做，就别把它填进去。 在一组类似项目的清单中，视觉上孤立出来的项目更容易被记住。“当下清单”并不是番茄工作法要求做的真是表格，只是我自己取的一个概念，指我在现在、此刻关注的事情。 冯•雷斯托夫效应的启发是可以通过突出重点的方法促进记忆。要借助这一效应来实现“当下清单”，我可以将此刻正在做的活动明确地写到一张纸条上，放在眼前。或者，要严格按照番茄工作法套用的话，我可以在今日待办表格上，用荧光笔标注当前活动，当活动完成后，再用黑色笔划掉它。 我休息的最低标准是，站起来，从我的办公椅走开，至少两步远。休息之后你要决定：是继续进行同一项活动，还是切换到另一项。切换是因为重要程度有所改变，也可能只是因为上一项活动已经完成。 在每隔25分钟的常规休息之外，番茄工作法要求安排时间更长的阶段性休息。我将4个番茄钟作为一组，所以每4个番茄钟后，我进行阶段性休息。阶段性休息通常可以是15~30分钟的消遣。可以利用这段时间来清理办公桌，去一趟咖啡机那，或者到喜欢的社交网站转转。 番茄工作法主张在25分钟时间段内专注进行高质量工作，接着进行5分钟的休息。休息时间做什么？方式很多，但主要目标是让大脑充电，并且对之前吸收的知识进行后台处理。 睡觉、溜达、喝水、看窗外。 理想的休息，应该是浅睡5分钟。我不确定5分钟时间可以真的睡着，但你可以训练自己真正地放松。 在计划阶段，你必须要设计出全天旅行的形成。这并不是说要禁止随机应变、修改计划。如果要进行计划日程表的修改，头脑应当处于全局观状态，而不是心流状态。还有一点，刚刚经过短暂休息的头脑可以更清楚地作出决策，胜过刚刚从埋头苦干的长期专注中走出来的时候。 无视休息，只会破坏承诺，丧失动力。尊重行程，有助于持久地实现高效率。 不要在番茄钟进行中切换到另一项活动。如果番茄钟进行一半，你当前的工作已经完成，就用剩下的时间进行“过度学习”。 1个番茄钟等于25分钟的努力。在番茄钟内，你就应当只关心这25分钟，而不是整个活动何时完成，这有助于你完成工作本身。番茄钟让你感到奖励就在眼前，而且与最终目标越来越接近。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:4","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"4. 第4章：中断 电子邮件和电话很容易对付：把它们关掉。 避免先进后出和大计划先行。既接受改变，又专注于履行承诺的时间，并且周流不息。 番茄钟期间的中断有以下两种形式： 第一种是自己造成的“内部中断”。具体地说，是直觉向心智发出信号，告诉自己去做当前专注活动以外的事情。 第二种是别人造成的“外部中断”。有人找你询问或请你帮忙，并且等你答复。 要对付内部中断，最佳策略是可视化、接受，然后纳入计划或删除。 一旦番茄钟启动就必须走到响铃。 番茄钟具有原子性。不可分割。为什么不将几小段加起来算成一个番茄钟？因为这样就失去了达到节奏的目的，也就太容易屈服于中断的诱惑了。 番茄工作法的初学者经常会感到惊讶，自己实际在一天内完成不了几个番茄钟。想自己作弊，对内部中断睁一只眼闭一只眼是于事无补的。记录跟踪数据，就是为了进行自我改进和流程改进，而不是留到年底拿这些记录跟老板谈加薪。 外部中断具有互动性。有人正在等你答复。他们试图阻止你画 X，而你需要一个策略来减少中断。不过，值得再一次强调的是，别把番茄工作法当成拒绝同事的理由，它可不是专门给古墓派闭关修炼用的。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:5","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"5. 第5章：预估 “今日待办”表格是每天的承诺。所选出的活动应当具有可行性。工作的总量应当是你通常一天之内能完成的。 我将预估番茄钟数写在“活动清单”表格每个条目的右边。当然是用铅笔，这样如果我稍后遇到新情况，想要调整预估值的话，数字还可以修改。 一个人的多次回答的平均值，要比单次猜测的结果来的正确。 假如一项活动预估超过7个番茄钟，说明它太复杂了。需要拆分这项活动。 如果一项活动预估不够1个番茄钟，则可以在它旁边标个0。并不是说它要花0个番茄钟来完成，只是表示时间花费小于1个番茄钟。这样的活动在“活动清单”表格中仍然各自占一行。稍后在选择活动填入“今日待办”表格时，可以将几项这样小于1个番茄钟的活动合并到一起，将它们写在同一行，当作一个活动来对待。 一个番茄钟是25分钟的周期；多个番茄钟组成更大的每日周期；每天早晨进行计划，傍晚进行回顾；在一个番茄钟内，专心致志于单个活动。 通过测量每天的番茄钟数，你甚至可以不断对番茄钟数进行微调，来保持一个平均速度。 有两种极端的情况应当避免，一种是过剩，一种是萧条。出现过剩症状，是因为在“活动清单”表格里活动太多了。有些活动可能停留在那里很长时间，没有任何进展。这样一份陈年旧账只会扰乱军心，甚至引你误入歧途。萧条针状则相反，指“活动清单”表格里的活动清单很短，可能某天拿出来它甚至是空的。约束理论教你调节活动清单的大小，以避免过剩和萧条两种情况。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:6","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"6. 第6章：应变 当你了解应用番茄工作法的常规方法之后，可能会有调整它的想法。很好。这就是收集跟踪数据、做每日回顾的目的。但是，请尝试坚持使用常规方法，至少两周内不要做任何改动。你需要亲身经历，以便确切知道哪里适合你，哪里不适合。 我自定了一个40分钟的番茄钟，以便处理每天早晨的事务型工作。 经过几个月的番茄工作法实践，我现在没有咔哒声反而不能集中精力了。我已经形成了一套专注的条件反射。 每一位番茄工作者都有自由去体验、改进，找到自己的最佳步调。但我强烈建议在一开始使用25分钟的时长，而且在某个固定长度至少要坚持两星期。频繁修改番茄钟的长度，只会破坏你的节奏。 每隔三个短休息就要有一个长休息，但不是强制性的，而是要根据你的角色和工作内容而定，包括工作场所和个人状态。正在解决复杂问题的人，可能需要休息较长时间。如果你今天感觉疲劳，也可以成为延长休息的理由。 记忆力是可以改善的。每次回想某件事情时，都会使得头脑记忆中对这部分的阻力减少。就像在丛林中清除障碍、开辟道路的过程。 番茄工作法需要预留一点傍晚的时间做每日回顾。 番茄工作法是守则。番茄工作法让我们把重点放在执行上。这可能意味着我们要忽视系统思考和整体性。这就是为什么将类似敏捷开发、GTD（Getting Things Done）之类的流程纳入番茄工作法好处多多。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:7","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"7. 第7章：团队 节奏是番茄工作法的重要一环。如果没准备好，我不会扭启番茄钟。授权番茄钟开始，大声问：“准备好了吗？”然后等待搭档的积极响应。 为了促进团队内部沟通，队友之间请教问题可以不计入外部中断。这就相当于在每个番茄钟内允许做两项活动： 从今日待办表格上选取的活动 与工作有关的团队内部沟通 这样的协定带来额外的责任。如果你想在同事的番茄钟咔嗒作响时与他沟通，要先想好，是否确实着急要答案。如果不急，则可以使用异步通信通道，例如发一封电子邮件或递一张纸条。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:2:8","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"总结 正如作者在书中所说： 戴明循环的4步为：计划 Plan - 执行 Do - 评估 Check - 修正 Act。番茄工作法是一套典型的 PDCA 流程。 番茄工作法让我们把重点放在执行上。这可能意味着我们要忽视系统思考和整体性。这就是为什么将类似敏捷开发、GTD（Getting Things Done）之类的流程纳入番茄工作法好处多多。 一个番茄钟是25分钟的周期；多个番茄钟组成更大的每日周期；每天早晨进行计划，傍晚进行回顾；在一个番茄钟内，专心致志于单个活动。 网友佐依｜理想生活設計根据书中的内容，绘制了精美的番茄工作法的每日周期，整个流程如下： 我将每日周期进一步按照 PDCA 流程归纳分解后，思维导图如下： ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:3:0","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["读书笔记"],"content":"思考 通过本书的学习，我了解到了番茄工作法的25/5/15常规时间管理方法，理解了作者设计每日周期的科学理论依据，学会了如何处理中断和定制属于自己的个人流程。 我在每天早晨进行计划，傍晚进行回顾。在一个番茄钟内，专心致志于单个活动。在面对各种任务时，我不再感到焦虑。这些任务都成了一个个由番茄钟所组成的活动。在每个常规的25+5的30分钟内，在每个事务型的50+10的1个小时内，只专注一件事情，减少了时间的荒废，极大地提高了工作的效率，体会到了意想不到的成就感，完成了超出自己预期的工作量，巩固了达成目标的决心。 ","date":"2022-01-01","objectID":"/2022/01/notes-from-pomodoro-technique-illustrated/:4:0","tags":["番茄工作法","时间管理"],"title":"读书笔记之《番茄工作法图解：简单易行的时间管理方法》","uri":"/2022/01/notes-from-pomodoro-technique-illustrated/"},{"categories":["技能矩阵"],"content":"kubeadm 是 Kubernetes 官方提供的用于快速部署集群的工具","date":"2021-12-21","objectID":"/2021/12/setup-kubernetes-cluster-using-kubeadm/","tags":["Kubernetes"],"title":"使用 kubeadm 快速部署 Kubernetes 集群","uri":"/2021/12/setup-kubernetes-cluster-using-kubeadm/"},{"categories":["技能矩阵"],"content":"kubeadm 是 Kubernetes 官方提供的用于快速部署集群的工具。 ","date":"2021-12-21","objectID":"/2021/12/setup-kubernetes-cluster-using-kubeadm/:0:0","tags":["Kubernetes"],"title":"使用 kubeadm 快速部署 Kubernetes 集群","uri":"/2021/12/setup-kubernetes-cluster-using-kubeadm/"},{"categories":["技能矩阵"],"content":"背景 kubeadm 大大降低了 Kubernetes 集群部署的复杂度，但通常仅仅用来部署一个最小可用集群，方便学习和测试。生产级别的 Kubernetes 集群则需要高可用、高性能和更灵活的配置，建议通过源码包方式部署或选择已有的商业产品或公有云服务。 ","date":"2021-12-21","objectID":"/2021/12/setup-kubernetes-cluster-using-kubeadm/:1:0","tags":["Kubernetes"],"title":"使用 kubeadm 快速部署 Kubernetes 集群","uri":"/2021/12/setup-kubernetes-cluster-using-kubeadm/"},{"categories":["技能矩阵"],"content":"环境准备 注：以下步骤都需要在所有节点上以 root 用户操作完成 准备3台虚拟机节点（根据实际情况替换为真实 IP） OS: CentOS 7.9 x86_64 CPU: 2 vCores Memory: 4 Gi kubeadm01: 172.31.8.8 kubeadm02: 172.31.5.5 kubeadm03: 172.31.7.7 升级内核与系统软件包 yum install -y http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm yum install --enablerepo=elrepo-kernel -y kernel-lt kernel_str=$(grep -E 'menuentry.*elrepo' /boot/grub2/grub.cfg | cut -d\\' -f2) grub2-set-default \"${kernel_str}\" grub2-editenv list yum -y update 配置各节点主机名 [root@kubeadm01 ~]# cat \u003e /etc/hostname \u003c\u003cEOF kubeadm01 EOF [root@kubeadm01 ~]# hostname kubeadm01 [root@kubeadm02 ~]# cat \u003e /etc/hostname \u003c\u003cEOF kubeadm02 EOF [root@kubeadm02 ~]# hostname kubeadm02 [root@kubeadm01 ~]# cat \u003e /etc/hostname \u003c\u003cEOF kubeadm03 EOF [root@kubeadm03 ~]# hostname kubeadm03 配置主机名解析（根据实际情况替换为真实 IP） cat \u003e\u003e /etc/hosts \u003c\u003cEOF 172.31.8.8 kubeadm01 172.31.5.5 kubeadm02 172.31.7.7 kubeadm03 EO 配置内核参数 cat \u003e /etc/sysctl.d/sysctl.conf \u003c\u003cEOF net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 net.ipv4.ip_forward=1 net.ipv4.tcp_tw_recycle=0 vm.swappiness=0 vm.overcommit_memory=1 vm.panic_on_oom=0 fs.inotify.max_user_instances=8192 fs.inotify.max_user_watches=1048576 fs.file-max=52706963 fs.nr_open=52706963 net.ipv6.conf.all.disable_ipv6=1 net.netfilter.nf_conntrack_max=2310720 EOF sysctl -p /etc/sysctl.d/sysctl.conf 安装所需软件包 yum install -y epel-release yum install -y chrony conntrack ipvsadm ipset jq iptables curl sysstat libseccomp wget socat git vim lrzsz wget man tree rsync gcc gcc-c++ cmake telnet 启用 Chrony 时间同步服务 systemctl start chronyd systemctl enable chronyd 禁用 Firewalld，Swap 和 SELinux systemctl stop firewalld systemctl disable firewalld swapoff -a sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab setenforce 0 sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config 配置内核模块，然后重启生效 cat \u003e /etc/modules-load.d/kubernetes.conf \u003c\u003cEOF ip_vs_dh ip_vs_ftp ip_vs ip_vs_lblc ip_vs_lblcr ip_vs_lc ip_vs_nq ip_vs_pe_sip ip_vs_rr ip_vs_sed ip_vs_sh ip_vs_wlc ip_vs_wrr nf_conntrack_ipv4 overlay br_netfilter EOF systemctl enable systemd-modules-load.service sync reboot 重启后，验证已加载内核模块 lsmod | grep -e ip_vs -e nf_conntrack_ipv4 安装 Docker yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum -y install docker-ce-20.10.8 cat \u003e /etc/docker/daemon.json \u003c\u003cEOF {\"exec-opts\": [\"native.cgroupdriver=systemd\"]} EOF usermod -G centos,adm,wheel,systemd-journal,docker,root centos systemctl start docker systemctl enable docker 禁用 postfix，创建所需目录 systemctl stop postfix systemctl disable postfix mkdir -p /opt/k8s/{bin,work} /etc/{kubernetes,etcd}/cert ","date":"2021-12-21","objectID":"/2021/12/setup-kubernetes-cluster-using-kubeadm/:2:0","tags":["Kubernetes"],"title":"使用 kubeadm 快速部署 Kubernetes 集群","uri":"/2021/12/setup-kubernetes-cluster-using-kubeadm/"},{"categories":["技能矩阵"],"content":"集群搭建 注：以下步骤需要在不同节点上操作完成（根据实际情况替换1.22.1为需要的版本） 在所有节点上安装 kubeadm，kubelet 和 kubectl cat \u003e /etc/yum.repos.d/kubernetes.repo \u003c\u003c EOF [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 EOF yum install -y kubelet-1.22.1 kubeadm-1.22.1 kubectl-1.22.1 systemctl enable kubelet systemctl start kubelet 在所有节点上拉取 Docker 镜像 kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.22.1 [config/images] Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.22.1 [config/images] Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.22.1 [config/images] Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.22.1 [config/images] Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.22.1 [config/images] Pulled registry.aliyuncs.com/google_containers/pause:3.5 [config/images] Pulled registry.aliyuncs.com/google_containers/etcd:3.5.0-0 [config/images] Pulled registry.aliyuncs.com/google_containers/coredns:v1.8.4 列出默认所需镜像及版本 kubeadm config images list --kubernetes-version v1.22.1 k8s.gcr.io/kube-apiserver:v1.22.1 k8s.gcr.io/kube-controller-manager:v1.22.1 k8s.gcr.io/kube-scheduler:v1.22.1 k8s.gcr.io/kube-proxy:v1.22.1 k8s.gcr.io/pause:3.5 k8s.gcr.io/etcd:3.5.0-0 k8s.gcr.io/coredns/coredns:v1.8.4 在所有节点上修改已拉取的镜像的 Tag # 将除了 coredns 以外的镜像 Tag 为 k8s.gcr.io 镜像源 for i in $(docker images | grep google_containers | awk '{print $1\":\"$2}' | cut -d/ -f3 | grep -v coredns); do docker tag registry.aliyuncs.com/google_containers/$i k8s.gcr.io/$i;done # 将 coredns 的镜像 Tag 为 k8s.gcr.io 镜像源，并增加/coredns 前缀 for i in $(docker images | grep google_containers/coredns | awk '{print $1\":\"$2}' | cut -d/ -f3); do docker tag registry.aliyuncs.com/google_containers/$i k8s.gcr.io/coredns/$i;done # 删除镜像的旧 Tag for i in $(docker images | grep google_containers | awk '{print $1\":\"$2}' | cut -d/ -f3); do docker rmi registry.aliyuncs.com/google_containers/$i;done 在 kubeadm01 上执行 init（根据实际情况替换 Node，Pod 和 Service 的网段） # Networks: # Node: 172.31.0.0/16 # Pod: 10.192.0.0/16 # Service: 10.254.0.0/16 [root@kubeadm01 ~]# kubeadm init --apiserver-advertise-address=0.0.0.0 \\ --apiserver-bind-port=6443 \\ --kubernetes-version=v1.22.1 \\ --pod-network-cidr=10.192.0.0/16 \\ --service-cidr=10.254.0.0/16 \\ --image-repository=k8s.gcr.io \\ --ignore-preflight-errors=swap \\ --token-ttl=0 Your Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG=/etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ Then you can join any number of worker nodes by running the following on each as root: kubeadm join 172.31.8.8:6443 --token 2333y7.y7xev857t8n4w5em \\ --discovery-token-ca-cert-hash sha256:df7857bdae645dad4072db71ae9e92efd248ead2d8fb184edd1720a4cddc5049 在 kubeadm01 上配置 .kube/config [root@kubeadm01 ~]# mkdir -p $HOME/.kube [root@kubeadm01 ~]# cp /etc/kubernetes/admin.conf $HOME/.kube/config [centos@kubeadm01 ~]$ mkdir -p $HOME/.kube [centos@kubeadm01 ~]$ sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config [centos@kubeadm01 ~]$ sudo chown $(id -u):$(id -g) $HOME/.kube/config 在 kubeadm02 和 kubeadm03 上执行 join（根据实际情况替换参数的值） [root@kubeadm02 ~]# kubeadm join 172.31.8.8:6443 --ignore-preflight-errors=swap \\ --token 2333y7.y7xev857t8n4w5em \\ --discovery-token-ca-cert-hash sha256:df7857bdae645dad4072db71ae9e92efd248ead2d8fb184edd1720a4cddc5049 [root@kubeadm03 ~]# kubeadm join 172.31.8.8:6443 --ignore-preflight-errors=swap \\ --token 2333y7.y7xev857t8n4w5em \\ --discovery-token-ca-cert-hash sha256:df7","date":"2021-12-21","objectID":"/2021/12/setup-kubernetes-cluster-using-kubeadm/:3:0","tags":["Kubernetes"],"title":"使用 kubeadm 快速部署 Kubernetes 集群","uri":"/2021/12/setup-kubernetes-cluster-using-kubeadm/"},{"categories":["技能矩阵"],"content":"配置优化 默认 kube-proxy 的 mode 为 iptables，修改为功能更强大的 ipvs kubectl edit configmap kube-proxy -n kube-system mode: \"ipvs\" kubectl get pods -n kube-system | grep kube-proxy | awk '{print $2}' | xargs kubectl -n kube-system delete pods","date":"2021-12-21","objectID":"/2021/12/setup-kubernetes-cluster-using-kubeadm/:4:0","tags":["Kubernetes"],"title":"使用 kubeadm 快速部署 Kubernetes 集群","uri":"/2021/12/setup-kubernetes-cluster-using-kubeadm/"},{"categories":["技能矩阵"],"content":"分享一些我所关注的解决方案与技术前瞻的好网站。","date":"2021-12-19","objectID":"/2021/12/solutions-and-insights/","tags":["解决方案","技术前瞻"],"title":"解决方案与技术前瞻","uri":"/2021/12/solutions-and-insights/"},{"categories":["技能矩阵"],"content":"分享一些我所关注的解决方案Solutions与技术前瞻Insights的好网站。 ","date":"2021-12-19","objectID":"/2021/12/solutions-and-insights/:0:0","tags":["解决方案","技术前瞻"],"title":"解决方案与技术前瞻","uri":"/2021/12/solutions-and-insights/"},{"categories":["技能矩阵"],"content":"架构师的能力 刚加入数据湖仓项目时，我们这群技术宅脑子里都有一堆关于架构师的疑问，为什么他总能找到一些很新的技术和工具让我们去研究？他从哪里找到的各种商业软件？为什么他对各个领域的技术栈都了解？为什么他总能选择出合适的技术和工具来不断地优化整个架构？ 经过一段时间的接触，我发现这些都源自于他大量的持续学习。他收藏了很多专业网站，各个行业的都有，他也是咨询公司的付费会员，他每天的日程都被会议塞满了，邮箱里经常收到各种订阅信息和付费报告，但他仍然会抽出时间来阅读那些资料，包括技术文档和用户文档。甚至有的时候，在一些具体的技术难点和软件功能方面，他都能指出我们的问题。很惭愧的是，其中大多数都是由于我们没有认真阅读和理解文档造成的。 ","date":"2021-12-19","objectID":"/2021/12/solutions-and-insights/:1:0","tags":["解决方案","技术前瞻"],"title":"解决方案与技术前瞻","uri":"/2021/12/solutions-and-insights/"},{"categories":["技能矩阵"],"content":"寻找最佳实践 以下分享一些值得关注的解决方案与技术前瞻的好网站： Gartner Insights https://www.gartner.com/en/insights Gartner Special Reports https://www.gartner.com/en/products/special-reports Enterprise Software and Service Reviews https://www.gartner.com/reviews/home ThoughtWorks Insights https://www.thoughtworks.com/insights ThoughtWorks Radar https://www.thoughtworks.com/radar IBM Architecture Center https://www.ibm.com/cloud/architecture DevOps architecture https://www.ibm.com/cloud/architecture/architectures/devOpsArchitecture Data and AI architecture https://www.ibm.com/cloud/architecture/architectures/dataAIArchitecture Cloud-native architecture https://www.ibm.com/cloud/architecture/architectures/cloud-native Cloud data lake https://www.ibm.com/cloud/architecture/architectures/cloud-data-lake AOE Technology Radar https://www.aoe.com/techradar/ AWS Solutions Library https://aws.amazon.com/solutions/ CI/CD Pipeline https://aws.amazon.com/getting-started/hands-on/set-up-ci-cd-pipeline/ Data Lake House https://aws.amazon.com/big-data/datalakes-and-analytics/data-lake-house/ CNCF End User Technology Radar https://radar.cncf.io Developer Roadmaps https://roadmap.sh DevOps Roadmap https://roadmap.sh/devops Databricks Solutions https://databricks.com/solutions Migrate to Lakehouse Platform https://databricks.com/solutions/migration Matt Turck https://mattturck.com Machine Learning, AI and Data (MAD) Landscape https://mattturck.com/category/big-data/ G2 Business Software and Services Reviews https://www.g2.com Accenture Insights Blog https://www.accenture.com/nl-en/blogs/insights Artificial Intelligence https://www.accenture.com/us-en/insights/artificial-intelligence-summary-index Forrester Predictions https://www.forrester.com/predictions ","date":"2021-12-19","objectID":"/2021/12/solutions-and-insights/:2:0","tags":["解决方案","技术前瞻"],"title":"解决方案与技术前瞻","uri":"/2021/12/solutions-and-insights/"},{"categories":["读书笔记"],"content":"刻意练习的核心元素包括专注沉浸、有目标、有计划、及时反馈并纠正、走出舒适区但不用力过度、大量的训练和导师指引。","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"刻意练习的核心元素包括专注沉浸、有目标、有计划、及时反馈并纠正、走出舒适区但不用力过度、大量的训练和导师指引。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:0:0","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"序 本书《刻意练习：如何从新手到大师》的作者安德斯•艾利克森Anders Ericsson博士是佛罗里达州立大学心理学教授，专注于研究体育、音乐、国际象棋、医学、军事等不同领域中的杰出人物如何获得杰出表现。他通过研究众多天才童年受过专业训练的经验证明——天才的成就源于“正确的练习”，并将这种提高技能的黄金标准定义为“刻意练习”。 有一个深入人心的概念叫1万小时定律，但大多数人都将其粗浅的理解为“天真的练习”：即基本上只是反复地做某件事情，并指望只靠那种反复，就能提高表现和水平。事实上这样很难让人成为专家，可能还会让人在现状中陷的更深，只有在“刻意练习”下的1万小时才真的有效。 本书通过大量的真实案例和研究佐证了刻意练习的核心元素，包括专注沉浸、有目标、有计划、及时反馈并改进、走出舒适区但不用力过度、大量的训练和导师指引。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:1:0","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:0","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"0. 推荐序与引言：天才存在吗 推荐序这部分内容对刻意练习进行了高度的概括，其中我印象比较深的，有下面几段内容： 超越一万小时定律： 从来不存在1万小时定律，它仅仅是畅销书作家对心理科学研究的一次不太严谨的演绎而已。 刻意练习的本质： 长时工作记忆正是区分卓越者与一般人的一个重要能力，它才是刻意练习的指向与本质。 国际象棋大师在长时记忆这款硬盘中存储了5万~10万个关于棋局的组块。 刻意练习的任务难度要适中，能收到反馈，有足够的次数重复练习，学习者能够纠正自己的错误。 刻意练习的本质是去买 SSD 硬盘，而不是存粹卖苦力，更不是帮畅销书作者们营销，喊喊热血口号：1万小时，今天，你坚持了吗？ 隐性知识： 学习科学大量研究表明，成人的最佳学习方式并非独自练习，而是在情境中学习。 从“情境学习”触发，当一名“认知学徒”。它的要点有以下几个。 找到学习共同体 因为大量知识存在于学习共同体的实践中，不是在书本中，所以有效的学习不是关门苦练，而是找到属于自己的学习小团体。如程序员在类似于 GitHub 这样的网站练习编程。 隐性知识显性化 隐性知识是使人们有能力利用概念，事实以及程序来解决现实问题的知识。一般也被成为策略知识。 模仿榜样 榜样可以是现实生活中的导师，也可以是网上的导师。 培养多样性 在多种情境中实践，以此强调学习广阔的应用范围。例如，裁缝出师并不是已经练习了1万小时，而是能够缝制出足够好的衣服。 引言这部分内容以莫扎特完美音高为例，解释了我们的大脑拥有和莫扎特这样的“天才”相同的适应能力，“天才”只是更多地利用了这种适应能力。 获得完美音高的关键 完美音高根本谈不上是只有幸运的少数人才拥有的天赋，而是一种只要经过适度的接触和训练，几乎人人都可以培养和发展的能力。 “天才”是训练的产物 天才更懂得利用大脑的适应能力。 通过专注的训练促使大脑改变（有时候根据人们的能力不同，还可以促使身体上的改变），那些改变使得他们能够做到在正常情况下可能做不到的事情。 不论基因遗传可能在“天才”取得的成就中发挥着什么作用，他们和我们一样，大脑和身体都具有适应能力，只是比我们更多地利用了那一能力而已。 潜力是可以被开发出来的 学习不再是挖掘某人潜力的方式，而是开发这种潜力的方式。我们可以创造自己的潜力。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:1","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"1. 有目的的练习 一旦某个人的表现达到了“可接受”的水平，并且可以做到自动化，那么再多“练习”几年，也不会有什么进步，而且还会缓慢退化。有目的的练习则更加有效。 有目的的练习的四个特点： 有目的的联系具有定义明确的特定目标 定义明确的具体目标，可以有效地用于引导你的练习。要把目标分解，并制定一个计划。 有目的的练习是专注的 要想取得进步，必须完全把注意力集中在你的任务上。 有目的的练习包含反馈 不论你在努力做什么事情，都需要反馈来准确辨别你在哪些方面还有不足，以及怎么会存在这些不足。 有目的的练习需要走出舒适区 对于任何类型的练习，这是一条基本的真理：如果你从来不迫使自己走出舒适区，便永远无法进步。 遇到瓶颈怎么办 试着做不同的事情，而非更难的事情 不管遇到什么障碍，越过它最好办法是从不同方向去想办法，这也是这种方法需要导师或教练的一个原因。有些人已经熟悉了你可能遇到的障碍，于是可以为你提供克服障碍的方法。 并非达到极限，而是动机不足 走出你的舒适区，但要以专注的方式制订明确的目标，为达到那些目标制订一个计划，并且想出监测你的进步的方法。还要想办法保持你的动机。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:2","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"2. 大脑的适应能力 一个人遇到的挑战越大，大脑的变化就越大，学习也越高效，但是过分逼迫自己可能导致倦怠。因此，处在舒适区之外却离得不太远的挑战，能使大脑的改变最为迅速。 大脑就像肌肉，越练越大 获许可的出租车司机的海马体后部，潜藏着更多的神经元和其他组织，增强了他们的导航能力。 走出舒适区的重要性 人类的身体有一种偏爱稳定性的倾向。 这正是我们可以怎样利用身体对体内平衡的渴望而推动变化的例子：足够努力的锻炼，并且保持足够长的时间，那么，身体将以各种方式来改变，使得那种努力变得更容易。 它会再度感到舒服。改变也停止了。因此，要使改变不断进行下去，你必须不断地加码：跑的更远一些、更快一些，并且爬坡跑。 挑战越大，变化越大，但不要太过。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:3","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"3. 心理表征 在任何一个行业或领域，技能与心理表征之间的关系是一种良性循环，你的技能越娴熟，创建的心理表征就越好；而心理表征越好，就越能有效地提升技能。 就像我们常说的孰能生巧、条件反射和肌肉记忆。 大师比新手强在哪里 有意义的记忆更高效。 盲棋，记住的是有意义的棋局的数据块，而不是棋子元素的位置。 心理表征是什么 心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物相对应的心理结构，或具体或抽象。一个简单的例子就是视觉形象。例如，一提到蒙娜丽莎，很多人马上便会在脑海中“看到”那幅著名油画的形象；那个形象就是蒙娜丽莎在他们脑海中的心理表征。 稍稍复杂一些的心理表征的例子就是单词，比如说狗。现在，当你听到这个词，不必搜索记忆，便能想起关于狗的各种细节；而且，所有这些信息都可以即时访问。你不仅将“狗”这个词添加到了你的单词库之中，而且也添加到了你的心理表征集之中。 刻意练习包括创建心理表征 他每次将自己听到的数字分为若干组，每个组包含3个或4个数字，然后将这些组编码到长时记忆中，变成有意义的记忆，再将这些记忆与检索结构关联起来，这样一来，他能记住接下来的数字组是哪些。为了做到这些，他需要的心理表征，不仅用来记住3个数字或者4个数字的数字组，而且用来记住检索结构本身，他将这个结构想象成一颗二维的树，在这棵树的各个枝头的末端，就是那些由3个数字或者4个数字组成的数字组。 将杰出人物和我们其他人区分开来的主要因素是：他们经过年复一年的练习，已经改变了大脑中的神经回路，以创建高度专业化的心理表征。 技能与心理表征之间的关系是一个良性循环：你的技能越娴熟，创建的心理表征就越好；而心理表征越好，就越能有效地练习，以磨炼技能。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:4","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"4. 黄金标准 刻意练习与一般练习的区别十分关键：首先，需要一个已经得到合理发展的行业或领域；其次，需要一位能够布置训练作业的导师。 最杰出的人，练习时间最长 对提高演奏水平重要的大多数因素，恰好也是需要付出艰辛劳动，而且并非那么有趣的因素。 最杰出的人是那些在各种有目的的练习中花了最多时间的人。 刻意练习的特点 刻意练习发展的技能，是其他人已经想出怎样提高的技能，也是已经拥有一整套行之有效的训练方法的技能。 刻意练习发生在人们的舒适区之外，而且要求学生持续不断地尝试那些刚好超出他当前能力范围的事物。 刻意练习包含得到良好定义的特定目标，通常还包括目标表现的某些方面；它并非指向某些模糊的总体改进。一旦设定了总体目标，导师或教练将制定一个计划，以便实现一系列微小的改变，最后将这些改变累积起来，构成之前期望的更大的变化。 刻意练习是有意而为的，也就是说，它需要人们完全的关注和有意识的行动。简单的遵照导师或教练的指示去做，还不够。学生必须紧跟他的练习的特定目标，以便能做出适当的调整，控制练习。 刻意练习包含反馈，以及为应对那些反馈而进行调整的努力。随着时间的推移，学生必须学会自己监测自己、自己发现错误，并做出相应调整。 刻意练习既产生有效的心理表征，又依靠有效的心理表征。 刻意练习通过着重关注过去获取的技能的某些特定方面，致力于有针对性地提高那些方面，并且几乎总是包括构建或修改那些过去已经获取的技能；随着时间的推移，这种逐步的改进最终将造就卓越的表现。 最佳方法是找到优秀导师 不论什么时候，只要有可能，最佳的方法几乎总是找一位优秀的教练或导师。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:5","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"5. 在工作中运用刻意练习原则 培养以练习为导向的心态，即不再认为工作日只能用来工作，练习只能在特殊时刻、特定场合才能进行，而是将日常商业活动转变成练习活动，将练习变为日常工作的一部分。 拒绝三种错误思想 第一种错误思想是我们的老朋友，即认为某人的能力通常受到基因特征的限制。 在任何一个人们选择着重发展的行业或领域之中，人人都可以通过正确的训练来帮助自己大幅度地提高。我们可以塑造自己的潜力。 第二种错误思想认为，如果你足够长时间地做某件事情，一定会更擅长。 以完全相同的方式一而再再而三地做某件事情，并不是提高绩效和表现的秘诀；它会使人们停下前进的脚步，并且缓慢地下滑。 第三种错误思想认为，想要提高，只需要努力。 任何人都可以进步，但需要正确的方法。如果你没有进步，并不是因为你缺少天赋，而是因为你没有用正确的方法练习。 训练应当着重于实干，而不是知晓 最有效的干预是那些具有一些互动因子的干预，比如角色扮演活动、讨论小组、案例分析、实习培训，等等。相反，效率最低的活动是那些“说教式的”干预。 从长远来看，最好的方法是：制订致力于改进技能的培训计划，这些计划将补充或完全替代那些致力于传授知识的、在如今许多行业和领域中经常使用的方法。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:6","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"6. 在生活中运用刻意练习原则 刻意练习针对的是每个有梦想的人，可以帮助每个想学习怎样画画、编程、变魔术、吹萨克斯管、写小说的人。它针对的是所有那些想掌控自己的人生、不甘心于现状的人们。 首先，找位好导师 有的人知道学习某些事情的最佳次序，理解并示范正确的方法来展示各种各样的技能，可以提供有效反馈，并且能够设计一些专门用来克服特定缺陷的练习活动，在这些人的指导之下，激情十足和孜孜不倦的学生能够更加迅速地取得进步。 导师只是能够引导你达到他们或他们的学生曾经达到过的水平。主要还得靠你自己来训练，完成导师布置给你的练习。 当你自己改变了时，可能需要更换导师。如果你发现自己已经到了不再能快速进步，或者根本没有进步的地步，别害怕，去找一位新的导师。最重要的事情是不停地向前、向前。 专注和投入至关重要 要记住：如果你在走神，或者你很放松，并且只为了好玩，你可能不会进步。 不专注，练习没效果。 更短的练习，更好的注意力。制订明确的目标，把练习课程的时间缩得更短，是更加迅速地提升新的技能水平的最佳方式。 没有导师，怎么办 用“三个 F”创建有效的心理表征，即专注（Focus）、反馈（Feedback）以及纠正（Fix it）。将技能分解成一些组成部分，以便反复地练习，并且有效地分析、确定你的不足之处、然后想出各种办法来解决它们。 跨越停滞阶段 要跨越停滞阶段，最好的办法是以新的方式挑战你的大脑或身体。想办法稍微逼自己一下，但不要逼得太狠，这通常会帮助你搞清楚自己的“停滞点”在什么地方。 保持动机 保持动机也许是每个投入到有目的的训练或者刻意练习中的人最终要面对的最大问题。 意志力和天生才华，都是人们在事实发生了之后再赋予某个人的优点。并没有科学证据表明，我们体内存在着某种决定意志力的单个基因。此外，一旦你假定人们的某种才华是天生的，那么，它会自动变成你无能为力去改变的东西。这种循环思维完全有害无益。它具有极强的破坏力，因为它可以让人们相信，在自己没有天赋的领域，甚至试都不用去试。 那些长期坚持下来因而成功减肥的人，成功地重新设计了他们的生活，养成了新的生活习惯，并且使自己坚持那些持续减轻体重的行为，尽管一路走来，有各种各样的诱惑可能危及他们的成功。他们通常培养了各种习惯，帮助自己继续前行。 你要保持动机，要么强化继续前行的理由，要么弱化停下脚步的理由。 尽更大的努力去规划时间。良好的规划，可以帮助你避免受到许多占用你大量时间的事情的干扰，以便把更多的时间留给练习。 如果你可能被你的智能手机分神，把它关机。或者，最好是把它关机之后，还放在另一个房间。 杰出的人物往往做两件有益的事情，它们看起来似乎都与动机无关。第一件是一般的身体保养：保证充足的睡眠并保持健康。如果你疲倦了或者生病了，就更难保持专注，更易分心走神。第二件是将练习课的时间限制在1小时左右。如果比那个时间长得多，你将无法保持高度的专注。而且，你刚开始练习的时候，可能还要将时间压缩一些。如果你的练习时间超过1小时，过1小时就休息一下。 幸运的是，你将发现，随着时间的推移，继续练习似乎更容易一些。你的身体和大脑将习惯练习和锻炼带来的痛苦。 动机一定是一种强烈的渴望，渴望做你更擅长的事情，不论那些事情是什么。 你对自己所做的事情感到骄傲，从朋友对你的称赞中感到愉快，你的身份感也变了。进一步的练习给你的感觉更像是一种投资，而不是一种代价。 刻意练习中另一个重要的动机因素是相信自己可以成功。这种信念的力量十分强大，甚至可以战胜现实。 结果发现，这些杰出人物在孩提时代，其父母曾想尽各种办法防止他们半途而废。他们意识到，他们实际上可以继续进步，他们面临的障碍只是暂时的。 你不在相信自己可以实现某个目标时，千万不要半途而废。和你自己达成一个协议，你将尽自己的努力回归到之前的状态或跨越停滞阶段，然后你再放弃。到那个时候，也许你不会放弃了。 一种营造和保持社会动机的最好方法，是使你自己身边的人都鼓励、支持和挑战你的努力。让身边都是支持你的人，在那些由团体或团队共同完成的活动中最容易做到。刻意练习是一种孤独的追求，但如果你有一群和你处在相同地位的朋友，就拥有了一个内部支持体系。这些人理解你投入到练习中的努力，可以和你分享练习的秘诀，欣赏你取得的成绩，并且对你遇到的困难表示同情。他们信任你，你也可以信任他们。 将对同一件事情感兴趣的所有人聚集起来，或者吸引他们加入一个现有的团体，并且将团体的同志情谊和共同的目标作为达到你自己目标的额外动机。不过，要注意的一件事情是：确保团体中的其他成员也制定了和你相类似的进步目标。 你怎样在那种连续不停的专注练习中保持自己的动机？最好的建议是精心设置目标，以便你能持续不断地看到进步的实质性信号，尽管并不会总是出现重大的进步。将漫长的旅程分解成一系列可控的目标，并且每次只关注它们中的一个，甚至可以在每次达到一个目标时，给自己小小的奖励。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:7","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"7. 成为杰出人物的路线图 杰出人物拥有相同的成长路线：一，产生兴趣；二，变得认真；三，全力投入；四，开拓创新。 第一阶段：产生兴趣 对未来的杰出人物来讲，他们小时候与自己感兴趣的任何事物之间这种好玩的互动，是他们最终对这件事物充满热情的第一步。 那些日后成为杰出人物的孩子，其父母在孩子的成长和发展阶段中扮演了至关重要的角色。首先，父母给孩子大量的时间、关注和鼓励。其次，父母往往会以成就为导向，并教孩子一些重要的价值观，比如自律、刻苦、负责任，以及建设性地运用时间。一旦孩子对某个特定领域或行业感兴趣了，他有望以同样的态度来追求成功，如自律、刻苦、成就等。 表扬就是增强孩子动机的一种绝佳方式，特别是年纪更小的孩子。 第二阶段：变得认真 那些长大后成为才华横溢的艺术家的孩子，有着“自加燃料、自我激励的动机来从事繁重的工作”，尽管他们依然需要父母亲和导师“情绪的和技术的支持”。 在某个特定领域或行业中发展了技能的人们，经过年复一年的练习之后，似乎从那种技能的学习中获得了大量的愉悦感受。 第三阶段：全力投入 结束了这一艰辛旅程的学生，也将收获巨大的回报，成为最杰出人物中的一员。到那时，他们可以直截了当地说，他们已经抵达了人类成就的巅峰。 年龄与适应能力的关系 随着年龄的增大，人们的技能出现退化，很大程度上是因为他们减少或停止了练习；如果依然定期参加练习，他们的技能水平并不会随着年龄的增长而大幅下滑。 随着年龄的增大，身体的适应能力可能差了许多，但心理的适应能力依然十分强大。 第四阶段：开拓创新 创新离不开刻意练习。创新者几乎无一例外地在各自的领域或行业中工作了很长时间，已经成为杰出人物，然后再开始开辟新的天地。 这样的创造性归根结底来自哪里？难道不是刻意练习所达到的另一个全新的高度吗？ 杰出人物的进展只在局外人看来才是重大进展，因为那些人并没有见证过所有那些微小的进展，而正是这些小小的进展，才累积成重大的飞跃。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:8","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"8. 怎样解释天生才华 自闭症奇才并不是天生拥有某种神奇的才能。相反，他们和其他任何人一样，是通过练习来练就那些本领的。 没有捷径可走 杰出人物通过年复一年的刻意练习，在漫长而艰苦的过程中一步一步改进，终于练就了他们杰出的能力。没有捷径可走。 天生的特征比许多人通常以为的，发挥的作用不但小得多，而且也有很大的不同。 破解“莫扎特传奇” 有的人声称莫扎特在6~8岁时就开始作曲，几乎可以肯定，这有些言过其实。我们真正可以确切认为是莫扎特创作的第一首曲子，是在他15岁或16岁时创作的，那个时候，他已经在父亲的指导下经过了十年的刻苦训练。 类似这样的故事，显然有它迷人的地方，在其中，某个人似乎“横空出世”，在某一领域和行业取得辉煌的成就，成为某种天才选手。我们的整个漫画产业，就是建立在这个前提的基础上的。但对杰出人物进行的数十年研究让我确信，这样的奇迹并不存在。 破解“自闭症奇才” 自闭症奇才并不是某种神奇才能的接受者，相反，他们和其他任何人一样，是通过训练来练就那些本领的。自闭症奇才更有可能比不具备奇才的普通自闭症孩子更加注重细节，而且更倾向于反复的行为。当某件事情引起了自闭症奇才的注意时，他们将注意力全部集中在那件事情上面，抛开周围的一切，沉浸在他们自己的世界之中。 “日历计算天才”的秘密 通过短短六节训练课，那位研究生就能像双胞胎中任何一位那样快速地计算日历了。唐尼能做的事情，换成一位有动机参加心理学实验的大学生，也能做到。 自我实现的语言 Self-fulfilling Prophecy，自证预言，是指我们对待他人的方式会影响到他们的行为，并最终影响他们对自己的评价。生活中处处都在发生的例子就是，相信所谓的“天生才华”，给一些人在一开始的时候就贴上“不擅长”的便签，然后更多的鼓励和支持“有天赋”的那些人，并打击其他的人，使那些“有天赋”的人获得了更多的帮助和训练，延续了优势，从而制造了自我实现的预言。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:9","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"9. 用刻意练习创造全新的世界 我们可以给孩子留下的重要的礼物，是帮助他们发展出本来认为自己不可能具备的能力，从而发现自己能够掌握自身潜能，也知道要使自己的梦想成真，需要用什么方法、付出怎样的努力。 改变教育与学习 要给学生足够的时间和耐心，让他们反复做，并且给与反馈；学生们创建他们自己的心理表征，是通过经常地试验、失败、获得反馈、再试验，诸如此类的循环而实现的。 成为“练习人” 所谓练习人，是反映人在一生中能够通过练习来掌握自己的命运，使得人生充满各种可能。和现在的世界相比，在更多的行业和领域之中，将涌现更多的杰出人物。 我们可以给孩子们留下的最重要的礼物，是对他们能力的巨大信心，相信他们能够一次又一次地重新塑造自己，同时还创造一些工具来提升自己。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:2:10","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"总结 本书通过大量的真实案例和研究佐证了刻意练习的核心元素，包括专注沉浸、有目标、有计划、及时反馈并改进、走出舒适区但不用力过度、大量的训练和导师指引，总结如下： 从来不存在1万小时定律，它仅仅是畅销书作家对心理科学研究的一次不太严谨的演绎而已。 一旦某个人的表现达到了“可接受”的水平，并且可以做到自动化，那么再多“练习”几年，也不会有什么进步，而且还会缓慢退化。有目的的练习则更加有效。 一个人遇到的挑战越大，大脑的变化就越大，学习也越高效，但是过分逼迫自己可能导致倦怠。因此，处在舒适区之外却离得不太远的挑战，能使大脑的改变最为迅速。 大脑就像肌肉，越练越大，获许可的出租车司机的海马体后部，潜藏着更多的神经元和其他组织，增强了他们的导航能力。 人类的身体有一种偏爱稳定性的倾向。这正是我们可以怎样利用身体对体内平衡的渴望而推动变化的例子：足够努力的锻炼，并且保持足够长的时间，那么，身体将以各种方式来改变，使得那种努力变得更容易。 心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物相对应的心理结构，或具体或抽象。比如，现在当你听到“狗”这个词，不必搜索记忆，便能想起关于狗的各种细节；而且，所有这些信息都可以即时访问。你不仅将“狗”这个词添加到了你的单词库之中，而且也添加到了你的心理表征集之中。 用“三个 F”创建有效的心理表征，即专注（Focus）、反馈（Feedback）以及纠正（Fix it）。将技能分解成一些组成部分，以便反复地练习，并且有效地分析、确定你的不足之处、然后想出各种办法来解决它们。 刻意练习发展的技能，是其他人已经想出怎样提高的技能，也是已经拥有一整套行之有效的训练方法的技能。 刻意练习发生在人们的舒适区之外，而且要求学生持续不断地尝试那些刚好超出他当前能力范围的事物。 刻意练习包含得到良好定义的特定目标，通常还包括目标表现的某些方面；它并非指向某些模糊的总体改进。一旦设定了总体目标，导师或教练将制定一个计划，以便实现一系列微小的改变，最后将这些改变累积起来，构成之前期望的更大的变化。 刻意练习是有意而为的，也就是说，它需要人们完全的关注和有意识的行动。简单的遵照导师或教练的指示去做，还不够。学生必须紧跟他的练习的特定目标，以便能做出适当的调整，控制练习。 刻意练习包含反馈，以及为应对那些反馈而进行调整的努力。随着时间的推移，学生必须学会自己监测自己、自己发现错误，并做出相应调整。 刻意练习既产生有效的心理表征，又依靠有效的心理表征。 刻意练习通过着重关注过去获取的技能的某些特定方面，致力于有针对性地提高那些方面，并且几乎总是包括构建或修改那些过去已经获取的技能；随着时间的推移，这种逐步的改进最终将造就卓越的表现。 在任何一个人们选择着重发展的行业或领域之中，人人都可以通过正确的训练来帮助自己大幅度地提高。我们可以塑造自己的潜力。 找位好导师，有的人知道学习某些事情的最佳次序，理解并示范正确的方法来展示各种各样的技能，可以提供有效反馈，并且能够设计一些专门用来克服特定缺陷的练习活动，在这些人的指导之下，激情十足和孜孜不倦的学生能够更加迅速地取得进步。 一种营造和保持社会动机的最好方法，是使你自己身边的人都鼓励、支持和挑战你的努力。让身边都是支持你的人，在那些由团体或团队共同完成的活动中最容易做到。刻意练习是一种孤独的追求，但如果你有一群和你处在相同地位的朋友，就拥有了一个内部支持体系。这些人理解你投入到练习中的努力，可以和你分享练习的秘诀，欣赏你取得的成绩，并且对你遇到的困难表示同情。他们信任你，你也可以信任他们。 将漫长的旅程分解成一系列可控的目标，并且每次只关注它们中的一个，甚至可以在每次达到一个目标时，给自己小小的奖励。 随着年龄的增大，人们的技能出现退化，很大程度上是因为他们减少或停止了练习。 杰出人物通过年复一年的刻意练习，在漫长而艰苦的过程中一步一步改进，终于练就了他们杰出的能力。没有捷径可走。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:3:0","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["读书笔记"],"content":"思考 通过阅读这本《刻意练习：从新手到大师》，我对“1万小时定律”以及“天生才华”的看法有了全新的认识，不再对1万小时持有执念，明白了掌握正确高效的练习方法，能够大大地缩短在某些方面的训练时间；也明白了世界上并没有所谓的横空出世，所有的天才背后其实也付出了大量的刻意练习；也认识到了随着年龄的增大，人们的技能出现退化，很大程度上是因为他们减少或停止了练习。 我将持续地努力，成为一名终身学习者，通过刻意练习来掌握自己的命运，使得人生充满各种可能😁。 ","date":"2021-12-11","objectID":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/:4:0","tags":["成长","自我管理"],"title":"读书笔记之《刻意练习：如何从新手到大师》","uri":"/2021/12/notes-from-peak-secrets-from-the-new-science-of-expertise/"},{"categories":["技能矩阵"],"content":"在通过 OpenCV 完成验证码识别的过程中，所学习到的识别原理和流程，还是很有价值的。","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"在通过 OpenCV 完成验证码识别的过程中，所学习到的识别原理和流程，还是很有价值的。 ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:0:0","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"背景 公司内部有着良好的学习分享氛围，不定期的会举办各种极客大赛，这次的比赛内容是验证码识别。 虽然在实际工作中，我几乎没有做过数据分析相关的内容，但我之前学习过几门数据挖掘、机器学习和人工智能相关的选修课程，在理论方面算是有了一些粗浅的理解，也想借着这个机会锻炼一下自己，所以报名参加了比赛。 ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:1:0","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"思路 刚开始，我还想着从 GitHub 上找一些现成的代码，然后修改一下，调整一些参数就直接拿来用。在这个过程中尝试了很多看似高大上的程序，大多数都是号称无需做任何特征工程，就可以训练和识别的，但实际的结果都很差，甚至是惨不忍睹。 在比赛期间，不断有同事在群里秀出自己的阶段性成果，而且他们都做了特征工程，于是我也参考了这方面的文章，最后顺利完成，识别率达到了99%以上，主要思路如下： 1.收集样本 收集一定数量的验证码图片样本，此次的验证码识别大赛仅提供了100张图片样本给所有的参赛选手。 理论上图片样本的数量越多，可以分析出的有效特征就越多，构建出的模型就越准确。数据比模型更重要，机器学习模型的表现高度依赖于数据量，选择对的模型只是其次，正所谓巧妇难为无米之炊。 这个过程类似于在编写一本教科书之前，需要先收集大量的参考资料。 2.特征工程 使用 OpenCV 库对验证码图片样本进行分析，进行一系列有针对性的处理，去除验证码图片中的各种随机线条等噪音，突出验证码图片中的字符如 5UFQ。 特征工程是将原始数据转化成更好的表达问题本质的特征的过程，目的是发现重要特征。 这个过程中，原始图片样本类似参考资料，最后用于机器学习的训练集数据类似教科书。编写一本教科书，需要从海量的参考资料中剔除无用的信息，反复校对，最后形成一本易于学生接受的教科书。 3.人工标注 操作方式很简单，将每个原始图片样本人工识别并重命名为验证码的字符内容如 5UFQ.jpg，再将经过特征工程后的图片切割为单个字符的图片，分别保存为：5UFQ_5.jpg，5UFQ_U.jpg，5UFQ_F.jpg，5UFQ_Q.jpg，用于后面的模型训练。 目前成熟的机器学习技术主要还是监督式学习，监督式学习的核心就是把已知的数据特征提供给机器进行训练。 数据样本类似教课书中的段落，数据特征类似老师圈出的重点内容，机器学习程序类似学生，突出重点内容能让学生更快更好的掌握知识。 4.训练模型 将上面的所有单个字符的图片作为训练集，每个图片的字符作为标签，构造一个图片与标签的映射表，然后用 OpenCV 自带的 KNN 相似度模型进行机器学习，最终训练出可识别相似的验证码图片的有效模型。 这个过程中，机器学习程序类似学生，将书中的段落和老师圈出的重点内容在脑海里进行关联，然后反复学习、理解、消化，最后触类旁通，掌握了举一反三的能力。 5.识别图片 将一定数量的原始图片样本作为测试集数据，通过特征工程去除噪音，然后直接使用训练好的模型进行匹配识别，并将识别后的结果与图片文件名（如00243af2b3545fd4c869d1c155c08d3f.png,LTEH）依次存入一个 CSV 文件中。 类似于学生通过举一反三的能力对新知识进行归纳总结，并像老师一样圈出重点内容的过程。 ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:2:0","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"详解 ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:3:0","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"1. 收集样本 在实际的工作中，应该收集足够多数量的验证码图片样本，但此次的验证码识别大赛为了不背离初衷，防止大家直接通过网上现有的代码，通过使蛮力的方法炼丹把结果算出来，仅提供了100张图片样本给所有的参赛选手。 ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:3:1","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"2. 特征工程 以字符内容为 5UFQ 的验证码图片为例，首先导入所需的 Python 库： # 用于获取本地目录与文件 import os # 用于构造数据集 import numpy as np # 用于显示图片 from matplotlib import pyplot as plt # OpenCV 库用于图片的特征工程与 KNN 模型训练 import cv2 读取并显示原始图片样本： # 文件路径 filepath='imgs/train/5UFQ.jpg' # OpenCV 读取文件 im=cv2.imread(filepath) # 显示图片 plt.imshow(im[:,:,[2,1,0]]) plt.show() RGB即代表红（Red）、绿（Green）、蓝（Blue），又称为三原色光，电脑屏幕上的所有颜色，都由这三种色光按照不同的比例混合而成的，屏幕上的任何一个颜色都可以由一组 RGB 值来记录和表达。 任何颜色都由红、绿、蓝三原色组成，而灰度图只有一个通道，有256个灰度等级，255代表全白，0表示全黑。 将图片由 RGB 转换为灰度图，就是将图片的色彩信息去掉，转换为只有黑白信息。 # 将图片转成灰度图 im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY) # 显示图片 plt.imshow(im_gray,cmap=\"gray\") plt.show() 图像的二值化处理就是将图像上的点的灰度置为0或255，以此呈现出明显的黑白效果。 # 将图片做二值化处理，阈值设定为127，将像素值大于127的置为0，小于127的置为255 ret, im_inv = cv2.threshold(im_gray,127,255,cv2.THRESH_BINARY_INV) # 显示图片 plt.imshow(im_inv,cmap=\"gray\") plt.show() 高斯模糊是在图像处理软件中广泛使用的处理效果，通常用它来对图片进行降噪以及降低细节层次，其视觉效果就像是经过一个半透明的磨砂屏幕在观察图像。 # 构建卷积核的数据集，实现模糊成像的效果 kernel = 1/16*np.array([[1,2,1], [2,4,2], [1,2,1]]) # 使用高斯模糊对图片进行降噪 im_blur = cv2.filter2D(im_inv,-1,kernel) # 显示图片 plt.imshow(im_blur,cmap=\"gray\") plt.show() 再将经过高斯模糊后的图片进行二值化处理，消除条纹等噪音信息，通过反复测试，最终确定阈值为185时，去噪的效果最佳。 # 将图片做二值化处理，阈值设定为185，将像素值大于185的置为0，小于185的置为255 ret, im_res = cv2.threshold(im_blur,185,255,cv2.THRESH_BINARY) # 显示图片 plt.imshow(im_res,cmap=\"gray\") plt.show() ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:3:2","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"3. 人工标注 对每个原始图片样本进行人工识别，并重命名为验证码的字符内容。 通过观察发现，在所有的验证码图片样本中，每个字符在图片中所处的区域都非常一致，因此大大降低了判断字符区域并切割图片的难度。 # 将观察到的四个字符在图片中所处的区域信息保存到字典中 roi_dict[0] = im_res[4:25, 8:28] roi_dict[1] = im_res[4:25, 38:58] roi_dict[2] = im_res[4:25, 68:88] roi_dict[3] = im_res[4:25, 98:118] return roi_dict 再将经过特征工程后的图片切割为单个字符的图片，分别保存，作为训练集样本用于后面的模型训练。 def cut_img(train_dir,cut_dir,suffix): # 浏览训练集图片样本的目录 for root,dirs,files in os.walk(train_dir): for f in files: # 获取文件路径 filepath = os.path.join(root,f) # 检查文件名后缀 filesuffix = os.path.splitext(filepath)[1][1:] if filesuffix in suffix: # 通过特征工程处理图片并获取每个字符所在区域的信息 roi_dict = fix_img(filepath) # 将图片按照获取到的每个字符所在区域的信息切割为不同的图片，分开保存 for i in sorted(roi_dict.keys()): cv2.imwrite(\"{0}/{1}_{2}.jpg\".format(cut_dir,f.split('.')[0],f[i]),roi_dict[i]) # 关闭 OpenCV 的写操作 cv2.waitKey(0) return True ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:3:3","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"4. 训练模型 将上面的所有单个字符的图片作为训练集，每个图片的字符作为标签，构造一个图片与标签的映射表，加载数据。再用 OpenCV 自带的 KNN 相似度模型进行机器学习，训练出可识别相似的验证码图片的模型。 def train_model(cut_dir,suffix): # 创建一个空的数据集存放验证码的图片信息 samples = np.empty((0, 420)) # 创建一个控的标签列表 labels = [] # 浏览单个字符的图片训练集的目录 for root,dirs,files in os.walk(cut_dir): for f in files: filepath = os.path.join(root,f) filesuffix = os.path.splitext(filepath)[1][1:] if filesuffix in suffix: filepath = os.path.join(root,f) # 读取图片的标签 label = f.split(\".\")[0].split(\"_\")[-1] labels.append(label) # 将验证码的图片信息存放到数据集中 im = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE) sample = im.reshape((1, 420)).astype(np.float32) samples = np.append(samples, sample, 0) samples = samples.astype(np.float32) # 将数据集与标签进行映射 unique_labels = list(set(labels)) unique_ids = list(range(len(unique_labels))) label_id_map = dict(zip(unique_labels, unique_ids)) id_label_map = dict(zip(unique_ids, unique_labels)) label_ids = list(map(lambda x: label_id_map[x], labels)) label_ids = np.array(label_ids).reshape((-1, 1)).astype(np.float32) # 使用 OpenCV 自带的 KNN 相似度模型进行机器学习 model = cv2.ml.KNearest_create() model.train(samples, cv2.ml.ROW_SAMPLE, label_ids) # 返回训练好的模型，数据 ID 与标签的映射字典 return {'model':model,'id_label_map':id_label_map} ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:3:4","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"5. 识别图片 读取测试集图片样本，通过特征工程去除噪音，然后使用训练好的模型进行匹配识别，并将识别后的结果与图片文件名依次存入一个 CSV 文件中。 def rek_img(model_dict,rek_dir,suffix,results_csv): # 获取训练好的模型 model = model_dict['model'] # 获取模型中的数据 ID 与标签的映射字典 id_label_map = model_dict['id_label_map'] label_dict = {} # 浏览测试集图片的目录 for root,dirs,files in os.walk(rek_dir): for f in files: filepath = os.path.join(root,f) filesuffix = os.path.splitext(filepath)[1][1:] if filesuffix in suffix: # 通过特征工程处理图片并获取每个字符所在区域的信息 roi_dict = fix_img(filepath) # 对每个字符所在区域的信息进行处理 for i in sorted(roi_dict.keys()): # 将字符所在区域的信息转换为数据集格式 sample = roi_dict[i].reshape((1, 420)).astype(np.float32) # 通过训练好的模型匹配识别出最相似的数据集，并返回数据 ID ret, results, neighbours, distances = model.findNearest(sample, k = 3) # 通过数据 ID 查询出对应的标签，并写入到字典中 label_id = int(results[0,0]) label = id_label_map[label_id] label_dict[i] = label # 将标签字典中的值依次取出，显示为验证码图片中的四个字符 result_str = ''.join(str(v) for k,v in sorted(label_dict.items())) # 将测试集图片的文件名与识别出的字符以逗号分割存入到 CSV 中 with open(results_csv, \"a\") as myfile: myfile.write(\"{0},{1}\\n\".format(f,result_str)) myfile.close() return True ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:3:5","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"总结 由于此次比赛给出的验证码图片样本特征都比较明显，比较容易进行特征工程，到最后，即使用了一万张验证码图片作为测试集，很多同事的识别准确率也都达到了90%以上，而第一名的正确率甚至达到了令人发指的100%。 对我来说，在通过 OpenCV 完成验证码识别的过程中，所学习到的识别原理和流程，还是很有价值的。 ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:4:0","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"参考 源码地址：captchas-opencv-rek 参考文章：Python3 识别验证码（opencv-python） ","date":"2021-11-24","objectID":"/2021/11/python-opencv-captcha-recognition-in-action/:5:0","tags":["OpenCV","机器学习"],"title":"Python OpenCV 验证码识别实战","uri":"/2021/11/python-opencv-captcha-recognition-in-action/"},{"categories":["技能矩阵"],"content":"在不同的环境中，最适合的 CI/CD 流水线会有所差异，尤其是在工具链层面，但大致的流程和思路应该是一致的。","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"在不同的环境中，最适合的 CI/CD 流水线会有所差异，尤其是在工具链层面，但大致的流程和思路应该是一致的。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:0:0","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"背景 在项目建设初期，架构师要求我们设计一个DevOps CI/CD持续集成，持续交付/部署方案，提升生产效率。 通过参考一些业界的最佳实践，结合自身的特点，我们设计了一个较为通用，且能兼顾安全、审批和接管本地已有基础设施与服务的 DevOps CI/CD 流水线方案。最后成功落地实施，并在公司内的其它项目中进行了推广。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:1:0","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"什么是 DevOps ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:2:0","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"1. 汽车工业 众所周知，大多数工厂都已经有了产品的自动化生产线。 特别是汽车行业，大约在一百年前，汽车是由人手工制造的，经过多次演变，从手工制造的高度定制的汽车，到手工组装的自动化零件生产，再到目前完全自动化的装配流水线，汽车工业已经具备了精益的自动化制造方案。 与汽车工业相比，我们的传统软件开发模式，已经落后了很多。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:2:1","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"2. DevOps 是一种文化 什么是 DevOps? 有些人认为，DevOps 就是一堆软件和工具的集合，可以用来优化开发和部署。 DevOps 不仅仅是这些，它更是一种文化，它更多的是关于团队和组织，强调的是整个团队都应该参与到开发、测试和部署的自动化流程设计中，在出现问题时共同承担责任，协同处理。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:2:2","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"3. DevOps 工具链与生命周期 DevOps 的生命周期从计划、构建、持续集成和部署开始，接着运维，然后反馈和再次计划。围绕在整个生命周期的各个部分，都有很多的应用和服务。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:2:3","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"传统的开发模式有哪些缺点 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:3:0","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"1. 传统制造业的七种浪费 对于传统的制造业来说，非常容易在过度生产、运输、移动、过度加工、等待、库存和产品缺陷等方面浪费大量的时间和资源。因为这些过程大多数仍然需要手工作业，缺乏持续的自动化流程进行管理。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:3:1","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"2. 传统软件开发模式的弊端 传统的软件开发模式有以下弊端： 人工干预 人工干预往往会导致难以重复的操作并引入人为错误，尤其是在测试和部署时。 不一致的环境 导致团队经常浪费几天甚至几周的时间来修复由环境不一致造成的问题，浪费了资源和时间。 监测不足 依赖于人工监测，很容易造成疏忽，导致部署出现问题，延迟产品的交付时间。 缺乏共同承担责任 团队成员缺乏共同承担责任的理念，导致在组织中存在各种沟通问题。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:3:2","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"值得参考的 DevOps CI/CD 最佳实践 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:4:0","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"1. 轻量级且简单 由 GitLab + Docker + Ansible 组成的轻量级、简单的 CI/CD 流水线解决方案，来自一家快速成长的初创公司。其中，GitLab 作为源代码管理和持续集成工具，Docker 用于容器，Ansible 用于配置即代码。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:4:1","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"2. All on Kubernetes 基于云服务和 Kubernetes 的 CI/CD 流水线，被称为“All on Kubernetes”，比较流行。 但由于“All on Kubernetes”需要确保所有的应用和服务都容器化，因此对比较复杂的环境和传统软件都不友好。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:4:2","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"3. IBM DevOps 解决方案 IBM 的解决方案建议使用 DevOps 和云平台来帮助企业加速应用开发和交付的生命周期。 这个架构非常完善，包含了 DevOps 的各个方面。更多详情：https://www.ibm.com/cloud/architecture/architectures/devOpsArchitecture ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:4:3","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"4. 端到端的 CI/CD 流水线 端到端的 CI/CD 持续集成和部署交付流水线，包括了 IBM DevOps 解决方案中的大多数步骤，并且在每个步骤中，都推荐了相关服务和工具。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:4:4","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"设计最适合的 DevOps CI/CD 流水线 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:5:0","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"1. DevSecOps 我们最关心的是安全，所以需要 DevSecOps，而不仅仅是 DevOps。 DevSecOps 并非一定要牺牲自动化流程，而是需要加入安全保障过程，在实施变化之前先进行审计。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:5:1","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"2. 开发与测试环境 为了在测试环境中进行安全的开发和部署，以及上传和下载软件包，我们设计了四个网络区域，其中： 在 A 区域中，可以连接到数据中心和共享服务，如 JIRA、GitLab 和 Nexus。 在 B 区域中，可以创建服务器和部署服务。 在 C 区域中，可以连接到一些受信任的官方仓库，如 Maven，在 Nexus 中集成安全扫描，如 Symantec 和 Nessus。 在 W 区域中，可以在安全扫描和审计下进行开发。 通过这些方式，我们可以确保在测试环境中的所有软件包都经过了安全扫描。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:5:2","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["技能矩阵"],"content":"3. 最适合的端到端 DevSecOps CI/CD 流水线 最终，我们确定了一个最适合自己的端到端 DevSecOps CI/CD 流水线。 它包括所有必要的步骤，跨越三个不同的环境，使用最流行的自动化工具和云服务，包括基础设施即代码和配置即代码，与安全工具集成，支持基于测试报告和安全报告的人工审批。 它包括以下内容： 项目管理 构思一个故事，在 Confluence 上记录，在 JIRA 上创建任务，将 GitLab 与 JIRA 集成。 代码管理 代码审查，将代码提交到 GitLab，然后由 GitLab 自动触发相关的 Jenkins 任务，进行代码分析，构建和单元测试，并打包上传到 Nexus 仓库。 制品库 通过 Nessus 自动扫描所有上传到 Nexus 中的软件包。 基础设施即代码与配置即代码 检查所需的基础设置是否已经就绪，如果没有，自动创建基础设施，然后将软件包通过配置即代码部署到服务器或 Kubernetes 集群。 集成测试与安全测试 对应用服务的可用性和安全性进行测试。 审计和审批 对整个流水线的各个过程进行安全审计，并在部署上线时进行人为审批，审批通过后自动到下一个环境中进行部署和测试。 最后设计的这个 DevSecOps CI/CD 流水线比较通用，能兼顾安全，审批和接管本地已有的基础设施与服务。 在此仅供参考，实际上在不同的环境中，最适合的 CI/CD 流水线会有所差异，尤其是在工具链层面，但大致的流程和思路应该是一致的。 ","date":"2021-11-21","objectID":"/2021/11/devops-cicd-pipeline-in-action/:5:3","tags":["DevOps","CICD"],"title":"DevOps CI/CD 流水线设计实践","uri":"/2021/11/devops-cicd-pipeline-in-action/"},{"categories":["生活感悟"],"content":"我将继续努力，长久地保持这种状态，不懈怠，积极地迎接未来每一天的美好。","date":"2021-11-09","objectID":"/2021/11/cherish-the-time-to-meet-a-bright-future/","tags":["成长","家庭"],"title":"不负时光，迎接美好","uri":"/2021/11/cherish-the-time-to-meet-a-bright-future/"},{"categories":["生活感悟"],"content":"我将继续努力，长久地保持这种状态，不懈怠，积极地迎接未来每一天的美好。 ","date":"2021-11-09","objectID":"/2021/11/cherish-the-time-to-meet-a-bright-future/:0:0","tags":["成长","家庭"],"title":"不负时光，迎接美好","uri":"/2021/11/cherish-the-time-to-meet-a-bright-future/"},{"categories":["生活感悟"],"content":"时间 前几天，帮表妹下载一些英文的地理空间geospatial编程资料，顺便聊了一会儿。 我跟她分享了我最近的状态，每天都是规律的作息、锻炼、看书和学习，让她非常羡慕。她的原话是“好羡慕你现在还有这么多时间可以学习，所以珍惜吧”。 表妹从博士毕业之后，在中科院工作了很多年，最近几年去了一所大学任教。非常干练的她想做的事情也很多，却一直没有办法全身心地投入到事业中。她的原话是“我就半个人都算不上了，就是心有余力不足的感觉，心比天高，非常恼火，一堆事，然后娃又要人陪”。 我一下子就想到了我大学的学院院长，她在去年的一堂课上说：“现在，我的孩子们都在国外生活，丈夫也很忙。我真的感觉太幸福了！因为，我终于可以有大把的时间，投入到我想研究的课题中，持续地把研究做的很深入，也更容易出成果了。” 我转述给表妹之后，她的原话是：“哈哈哈，但是也有些人觉得这种日子很孤独，当然我会觉得无比幸福，我很享受可以美美干一天活的状态。” ","date":"2021-11-09","objectID":"/2021/11/cherish-the-time-to-meet-a-bright-future/:1:0","tags":["成长","家庭"],"title":"不负时光，迎接美好","uri":"/2021/11/cherish-the-time-to-meet-a-bright-future/"},{"categories":["生活感悟"],"content":"反思 回到自己身上，从成都来到深圳已经有两年多了，这两年多我的变化和成长是非常大的，却也是建立在牺牲了家庭的基础上，在丈夫、父亲和儿子这些角色上的责任缺失所换来的，深感惭愧。 虽然我一直在说现在的牺牲是为了能够更好的回归到家庭，给家人们更好的生活，内心也是这样认为的。但还是在过去的两年里浪费了太多的时间，也忽视了健康。 我真的应该清醒的认识到，人到中年，还能有大把的可自由支配的时间和精力，是多么的难能可贵！我应该把这些宝贵的时间，尽可能多的花在学习和锻炼上，在回归家庭之前，更快的积累知识和具备健康的体魄，才能真正的不负时光，不负家庭，给家人们创造更好的生活！ ","date":"2021-11-09","objectID":"/2021/11/cherish-the-time-to-meet-a-bright-future/:2:0","tags":["成长","家庭"],"title":"不负时光，迎接美好","uri":"/2021/11/cherish-the-time-to-meet-a-bright-future/"},{"categories":["生活感悟"],"content":"迎接 今天早晨，我发了一条朋友圈，内容是：“早睡早起，看几页书，背几十个单词，悠哉悠哉地出门，呼吸着清新空气，沐浴着暖阳，看着蓝天白云，听着极客时间，时而行走，时而小跑，感受沿途的绿植，穿过锻炼氛围满满的运动公园，元气满满的进入公司，开启崭新的一天！”。 真实地记录了最近两周里每天早上的愉悦感受，我也将继续努力，长久地保持这种状态，不懈怠，积极地迎接未来每一天的美好。 ","date":"2021-11-09","objectID":"/2021/11/cherish-the-time-to-meet-a-bright-future/:3:0","tags":["成长","家庭"],"title":"不负时光，迎接美好","uri":"/2021/11/cherish-the-time-to-meet-a-bright-future/"},{"categories":["技能矩阵"],"content":"在互联网全站 HTTPS 的时代，内部私有域名的 HTTPS 服务部署也尤为重要。","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"在互联网全站 HTTPS 的时代，内部私有域名的 HTTPS 服务部署也尤为重要。 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:0:0","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"背景 如今，几乎所有的互联网网站和应用都已经是全站 HTTPS 了，但很多企业的内部应用还仍然为了方便而采用 HTTP 的方式在“裸奔”。 在我目前的工作中，内部安全抓的很紧，所有的应用都必须支持 HTTPS 才能部署上线。于是，我在这里将创建自签名 SSL 证书的笔记分享出来，供大家参考。 其中涉及到的专业词汇缩写有： HTTPS - HyperText Transfer Protocol Secure 超文本传输安全协议 SSL - Secure Sockets Layer 安全套接层 TLS - Transport Layer Security 传输层安全性协议，基于 SSL SSH - Secure Shell 安全外壳协议 FTP - File Transfer Protocol 文件传输协议 SHA - Secure Hash Algorithm 安全散列算法 RSA - Rivest, Shamir, Adleman 非对称加密算法，名称源自三位科学家姓氏的首字母 CSR - Certificate Signing Request 证书签名请求 CA - Certificate Authority 证书授权 X.509 - 密码学里公钥证书的格式标准 DER - Distinguished Encoding Rules 可区别编码规则，通常用来编码证书 CER/CRT - Certificate 证书 PKCS - Public Key Cryptography Standards 公钥加密标准 P7B - PKCS#7 Binary 公钥加密标准二进制 PFX - Personal Information Exchange 微软证书存储格式 JKS - Java KeyStore Java 密钥存储 PEM - Privacy-Enhanced Mail 隐私增强邮件，密钥文件格式 ELB - Elastic Load Balancing 弹性负载均衡 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:1:0","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"生成 SSL 证书 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:2:0","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"1. 生成根证书并导入 首先生成根证书的 Key rootCA.heylinux.com.key，设置加密长度为 4096 以满足安全级别要求。 openssl genrsa -out rootCA.heylinux.com.key 4096 使用根证书的 Key rootCA.heylinux.com.key 生成根证书文件 rootCA.heylinux.com.pem，设置加密方式为 sha256，有效期为 3650天，证书的机构信息为 /C=CN/ST=Sichuan/L=Chengdu/O=HEYLINUX/OU=IT/CN=SRE。 openssl req -x509 -new -nodes -key rootCA.heylinux.com.key -sha256 -days 3650 -out rootCA.heylinux.com.pem -subj \"/C=CN/ST=Sichuan/L=Chengdu/O=HEYLINUX/OU=IT/CN=SRE\" 将生成的根证书文件 rootCA.heylinux.com.pem 通过 Chrome 浏览器导入到操作系统中，就可以让浏览器信任之后基于根证书所生成的服务端证书。 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:2:1","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"2. 生成 SSL 服务端证书 创建服务端证书配置文件 ssl.conf，支持 serverAuth 和 clientAuth，可用于多个泛域名 *.heylinux.com 和 *.cloud.heylinux.com。 vim ssl.conf subjectAltName = @alt_names authorityKeyIdentifier = keyid,issuer keyUsage = digitalSignature,keyEncipherment,nonRepudiation,dataEncipherment extendedKeyUsage = serverAuth,clientAuth basicConstraints = CA:FALSE subjectKeyIdentifier = hash [alt_names] DNS.1 = *.heylinux.com DNS.2 = *.cloud.heylinux.com 生成服务端证书的 Key，文件名 star.heylinux.com.key，机构信息设置为 /C=CN/ST=Sichuan/L=Chengdu/O=HEYLINUX/OU=IT/CN=*.heylinux.com。 openssl req -new -nodes -out star.heylinux.com.csr -newkey rsa:4096 -keyout star.heylinux.com.key -subj \"/C=CN/ST=Sichuan/L=Chengdu/O=HEYLINUX/OU=IT/CN=*.heylinux.com\" 通过根证书的 Key、根证书、服务端证书的 Key 和服务端证书配置文件 ssl.conf，生成服务端证书，文件名 star.heylinux.com.crt，设置加密方式为 sha256，有效期为 3650天。 openssl x509 -req -in star.heylinux.com.csr -CA rootCA.heylinux.com.pem -CAkey rootCA.heylinux.com.key -CAcreateserial -out star.heylinux.com.crt -days 3650 -sha256 -extfile ssl.conf 查看服务端证书信息。 openssl x509 -text -noout -in star.heylinux.com.crt Certificate: Data: Version: 3 (0x2) Serial Number: 10:f8:04:91:06:d8:4a:eb:46:ee:90:80:b4:9c:94:4e:ac:60:7b:3e Signature Algorithm: sha256WithRSAEncryption Issuer: C = CN, ST = Sichuan, L = Chengdu, O = HEYLINUX, OU = IT, CN = SRE Validity Not Before: Nov 7 04:38:21 2021 GMT Not After : Nov 5 04:38:21 2031 GMT Subject: C = CN, ST = Sichuan, L = Chengdu, O = HEYLINUX, OU = IT, CN = *.heylinux.com Subject Public Key Info: Public Key Algorithm: rsaEncryption RSA Public-Key: (4096 bit) ... Exponent: 65537 (0x10001) X509v3 extensions: X509v3 Subject Alternative Name: DNS:*.heylinux.com, DNS:*.cloud.heylinux.com X509v3 Authority Key Identifier: keyid:36:20:25:BA:1A:D9:36:A3:5C:E7:94:30:7F:76:D5:DF:5D:03:99:C9 X509v3 Key Usage: Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment X509v3 Extended Key Usage: TLS Web Server Authentication, TLS Web Client Authentication X509v3 Basic Constraints: CA:FALSE X509v3 Subject Key Identifier: DB:0D:E8:00:A4:3E:95:71:26:1A:0B:57:4C:3C:3B:33:D3:67:F0:16 ... ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:2:2","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"3. 生成不同格式的捆绑证书 捆绑证书certificate bundle通常包含多个服务端证书 Key 和服务端证书。 生成 PKCS12 格式的捆绑证书 star.heylinux.com.p12，设置证书文件的密码passphrase为 P_Ss0rdT，文件内别名 heylinux_com，这种证书可用于服务器软件如 Tomcat。 openssl pkcs12 -export -in star.heylinux.com.crt -inkey star.heylinux.com.key -password pass:P_Ss0rdT -name heylinux_com -out star.heylinux.com.p12 将生成好的 PKCS12 格式的捆绑证书 star.heylinux.com.p12 转换为 JKS 格式 star.heylinux.com.jks，设置证书文件的密码passphrase为 P_Ss0rdT，文件内别名 heylinux_com，这种证书可用于 Java 类应用的服务器软件如 Tomcat。 keytool -importkeystore -deststorepass P_Ss0rdT -destkeystore star.heylinux.com.jks -srcstorepass P_Ss0rdT -srckeystore star.heylinux.com.p12 -srcstoretype PKCS12 将生成好的 PKCS12 格式的捆绑证书 star.heylinux.com.p12 转换为 PEM 格式 star.heylinux.com.pem，文件内别名 heylinux_com，不设置证书文件的密码，这种证书可用于服务器软件如 Apache、Nginx、HAProxy 和 AWS ELB。 openssl pkcs12 -password pass:P_Ss0rdT -in star.heylinux.com.p12 -out star.heylinux.com.pem -nodes ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:2:3","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"4. 将根证书转换为 JKS 格式 将根证书 rootCA.heylinux.com.pem 转换为 JKS 格式 rootCA.heylinux.com.jks，文件内别名 heylinux_com，用于 Java 类应用对服务端证书进行校验，原理类似于上面“导入到操作系统中，就可以让浏览器信任之后基于根证书所生成的服务端证书”。 # 先生成 rootCA.heylinux.com.der openssl x509 -in rootCA.heylinux.com.pem -out rootCA.heylinux.com.der -outform der # 查看 rootCA.heylinux.com.der keytool -v -printcert -file rootCA.heylinux.com.der # 再将 rootCA.heylinux.com.der 转换为 rootCA.heylinux.com.jks keytool -importcert -alias heylinux_com -keystore rootCA.heylinux.com.jks -storepass P_Ss0rdT -file rootCA.heylinux.com.der # 查看 rootCA.heylinux.com.jks keytool -keystore rootCA.heylinux.com.jks -storepass P_Ss0rdT -list ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:2:4","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"转换和查看 SSL 证书 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:3:0","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"1. 从 P7B 到 PEM 将 Windows 生成的根证书 SubCA_2.p7b 从 P7B 格式转换为 PEM 格式 rootCA.heylinux.com.pem。 openssl pkcs7 -inform DER -print_certs -in SubCA_2.p7b -out rootCA.heylinux.com.pem ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:3:1","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"2. 从 PEM 到 JKS 将 PEM 格式的根证书 rootCA.heylinux.com.pem 转换为 JKS 格式 rootCA.heylinux.com.jks。 # 生成 rootCA.heylinux.com.der openssl x509 -in rootCA.heylinux.com.pem -out rootCA.heylinux.com.der -outform der # 生成 rootCA.heylinux.com.jks, 文件内别名 heylinux_com keytool -importcert -alias heylinux_com -keystore rootCA.heylinux.com.jks -storepass P_Ss0rdT -file rootCA.heylinux.com.der ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:3:2","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"3. 从 PFX(P12) 到 PEM 将 PFX(P12) 格式的证书 star.heylinux.com.pfx 转换为 PEM 格式 star.heylinux.com.pem，通常 star.heylinux.com.pem 包含了服务端证书 Key 和服务端证书，可以手动将其中的内容分别复制出来，生成服务端证书 Key star.heylinux.com.key 和服务端证书 star.heylinux.com.crt。 openssl pkcs12 -password pass:P_Ss0rdT -nodes -in star.heylinux.com.pfx -out star.heylinux.com.pem ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:3:3","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"4. 从 P12 到 JKS 将 P12 格式的证书 star.heylinux.com.p12 转换为 JKS 格式 star.heylinux.com.jks，文件内别名 heylinux_com。 keytool -importkeystore -deststorepass P_Ss0rdT -destkeystore star.heylinux.com.jks -srcstorepass P_Ss0rdT -srckeystore star.heylinux.com.p12 -srcstoretype PKCS12 -alias heylinux_com ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:3:4","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"5. 查看各种格式的证书 # 查看 PEM 格式的证书 rootCA.heylinux.com.pem 和 star.heylinux.com.pem openssl x509 -noout -text -in rootCA.heylinux.com.pem openssl x509 -noout -text -in star.heylinux.com.pem # 查看 P12 格式的证书 star.heylinux.com.p12 keytool -list -v -keystore star.heylinux.com.p12 -storepass P_Ss0rdT -storetype PKCS12 # 查看 JKS 格式的证书 star.heylinux.com.jks keytool -list -v -keystore star.heylinux.com.jks -storepass P_Ss0rdT ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:3:5","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"无需根证书的 SSL 证书 对于一些应用如 NiFi、vsFTPd，主要将 SSL 证书直接用于客户端与服务端校验，类似于 SSH 的私钥与公钥间的认证关系，这类 SSL 证书可以不需要根证书。 创建服务端证书配置文件 tls.conf，证书的机构信息为 /C=CN/ST=Sichuan/L=Chengdu/O=HEYLINUX/OU=IT/CN=SRE，可用于多个 IP 10.8.5.7 和 10.2.3.4，和多个泛域名 *.heylinux.com 和 *.cloud.heylinux.com。 vim tls.conf [req] prompt = no req_extensions = req_ext distinguished_name = dn [dn] C = CN ST = Sichuan L = Chengdu O = HEYLINUX OU = IT CN = SRE [req_ext] subjectAltName = @alt_names [alt_names] IP.1 = 10.8.5.7 IP.2 = 10.2.3.4 DNS.1 = *.heylinux.com DNS.2 = *.cloud.heylinux.com 可通过以下方式生成，设置加密方式为 sha256，有效期为 3650天，证书文件密码passphrase为 P_Ss0rdT。 # 生成证书 Key heylinux-ssl-keypair.key 和证书 heylinux-ssl-keypair.crt openssl req -x509 -newkey rsa:4096 -keyout heylinux-ssl-keypair.key -out heylinux-ssl-keypair.crt -days 3650 -sha256 -extensions req_ext -config tls.conf # 输入密码 Generating a RSA private key ....................................+++++ writing new private key to 'heylinux-ssl-keypair.key' Enter PEM pass phrase: P_Ss0rdT Verifying - Enter PEM pass phrase: P_Ss0rdT # 将证书 Key 和证书转换为 P12 格式的捆绑证书 heylinux-ssl-keypair.p12 openssl pkcs12 -export -in heylinux-ssl-keypair.crt -inkey heylinux-ssl-keypair.key -password pass:P_Ss0rdT -name heylinux_ssl_keypair -out heylinux-ssl-keypair.p12 # 输入密码 Enter pass phrase for heylinux-ssl-keypair.key: P_Ss0rdT # 查看 P12 格式的捆绑证书 heylinux-ssl-keypair.p12 keytool -list -v -keystore heylinux-ssl-keypair.p12 -storepass P_Ss0rdT -storetype PKCS12 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:4:0","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"使用 cfssl 生成和查看 SSL 证书 ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:5:0","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"1. 安装命令行工具 下载命令行工具 cfssl，cfssljson 和 cfssl-certinfo 并给予执行权限。 sudo wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/bin/cfssl sudo wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/bin/cfssljson sudo wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/bin/cfssl-certinfo sudo chmod +x /usr/local/bin/cfssl* ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:5:1","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"2. 生成和查看根证书 创建 json 配置文件 rootCA.json，生成与上面配置相同的 rootCA.heylinux.com.key（cfssl 不支持证书 key 与证书长度不一致，因此加密长度仅为2048）和 rootCA.heylinux.com.pem。 { \"CA\": { \"expiry\": \"87600h\", \"pathlen\": 0 }, \"CN\": \"SRE\", \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [ { \"C\": \"CN\", \"ST\": \"Sichuan\", \"L\": \"Chengdu\", \"O\": \"HEYLINUX\", \"OU\": \"IT\" } ] } cfssl gencert -initca rootCA.json | cfssljson -bare rootCA.heylinux.com 2021/11/13 05:11:48 [INFO] generating a new CA key and certificate from CSR 2021/11/13 05:11:48 [INFO] generate received request 2021/11/13 05:11:48 [INFO] received CSR 2021/11/13 05:11:48 [INFO] generating key: rsa-2048 2021/11/13 05:11:48 [INFO] encoded CSR 2021/11/13 05:11:48 [INFO] signed certificate with serial number 644632230923530854661361284854682897812867573233 ls -1 rootCA.heylinux.com.csr rootCA.heylinux.com-key.pem rootCA.heylinux.com.pem rootCA.json mv rootCA.heylinux.com-key.pem rootCA.heylinux.com.key 查看根证书 rootCA.heylinux.com.pem 信息。 cfssl-certinfo -cert rootCA.heylinux.com.pem { \"subject\": { \"common_name\": \"SRE\", \"country\": \"CN\", \"organization\": \"HEYLINUX\", \"organizational_unit\": \"IT\", \"locality\": \"Chengdu\", \"province\": \"Sichuan\", \"names\": [ \"CN\", \"Sichuan\", \"Chengdu\", \"HEYLINUX\", \"IT\", \"SRE\" ] }, \"issuer\": { \"common_name\": \"SRE\", \"country\": \"CN\", \"organization\": \"HEYLINUX\", \"organizational_unit\": \"IT\", \"locality\": \"Chengdu\", \"province\": \"Sichuan\", \"names\": [ \"CN\", \"Sichuan\", \"Chengdu\", \"HEYLINUX\", \"IT\", \"SRE\" ] }, \"serial_number\": \"644632230923530854661361284854682897812867573233\", \"not_before\": \"2021-11-12T20:53:00Z\", \"not_after\": \"2031-11-10T20:53:00Z\", \"sigalg\": \"SHA256WithRSA\", \"authority_key_id\": \"36:D1:86:6B:27:AE:24:EF:C7:B3:2B:25:E7:92:DE:F1:0:34:2B:E5\", \"subject_key_id\": \"36:D1:86:6B:27:AE:24:EF:C7:B3:2B:25:E7:92:DE:F1:0:34:2B:E5\", \"pem\": \"-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----\\n\" } ","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:5:2","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["技能矩阵"],"content":"3. 生成和查看 SSL 服务端证书 创建 json 配置文件 ssl-config.json 和 ssl.json，生成与上面配置相同的 star.heylinux.com.key（cfssl 不支持证书 key 与证书长度不一致，因此加密长度仅为2048）和 star.heylinux.com.crt。 vim ssl-config.json { \"signing\": { \"default\": { \"expiry\": \"87600h\" }, \"profiles\": { \"server\": { \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ], \"expiry\": \"87600h\" } } } } vim ssl.json { \"CN\": \"*.heylinux.com\", \"hosts\": [ \"*.heylinux.com\", \"*.cloud.heylinux.com\" ], \"key\": { \"algo\": \"rsa\", \"size\": 2048 }, \"names\": [{ \"C\": \"CN\", \"ST\": \"Sichuan\", \"L\": \"Chengdu\", \"O\": \"HEYLINUX\", \"OU\": \"IT\" }] } cfssl gencert -ca=rootCA.heylinux.com.pem -ca-key=rootCA.heylinux.com.key -config=ssl-config.json -profile=server ssl.json | cfssljson -bare star.heylinux.com mv star.heylinux.com.pem star.heylinux.com.crt mv star.heylinux.com-key.pem star.heylinux.com.key ls -1 rootCA.heylinux.com.csr rootCA.heylinux.com.key rootCA.heylinux.com.pem rootCA.json ssl-config.json ssl.json star.heylinux.com.crt star.heylinux.com.csr star.heylinux.com.key 查看服务端证书 star.heylinux.com.crt 信息。 cfssl-certinfo -cert star.heylinux.com.crt { \"subject\": { \"common_name\": \"*.heylinux.com\", \"country\": \"CN\", \"organization\": \"HEYLINUX\", \"organizational_unit\": \"IT\", \"locality\": \"Chengdu\", \"province\": \"Sichuan\", \"names\": [ \"CN\", \"Sichuan\", \"Chengdu\", \"HEYLINUX\", \"IT\", \"*.heylinux.com\" ] }, \"issuer\": { \"common_name\": \"SRE\", \"country\": \"CN\", \"organization\": \"HEYLINUX\", \"organizational_unit\": \"IT\", \"locality\": \"Chengdu\", \"province\": \"Sichuan\", \"names\": [ \"CN\", \"Sichuan\", \"Chengdu\", \"HEYLINUX\", \"IT\", \"SRE\" ] }, \"serial_number\": \"608638693485247133136510097809090433439285866629\", \"sans\": [ \"*.heylinux.com\", \"*.cloud.heylinux.com\" ], \"not_before\": \"2021-11-12T21:20:00Z\", \"not_after\": \"2031-11-10T21:20:00Z\", \"sigalg\": \"SHA256WithRSA\", \"authority_key_id\": \"2B:D4:44:57:4D:9:D8:9A:0:63:4C:5B:B8:78:F4:8F:45:9C:3C:F5\", \"subject_key_id\": \"4E:15:55:4A:34:EA:BA:69:3E:A5:F:40:74:16:52:F0:88:C3:7D:6F\", \"pem\": \"-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----\\n\" }","date":"2021-11-07","objectID":"/2021/11/how-to-generate-self-signed-ssl-certificates/:5:3","tags":["安全","SSL"],"title":"如何创建自签名 SSL 证书支持私有域名的 HTTPS 服务","uri":"/2021/11/how-to-generate-self-signed-ssl-certificates/"},{"categories":["读书笔记"],"content":"自控力不足并不只是心理问题，影响自控的还有生理学，心理陷阱和各种社会因素。","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"自控力不足并不只是心理问题，影响自控的还有生理学，心理陷阱和各种社会因素。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:0:0","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"序 斯坦福大学的麦格尼格尔博士开设了一门叫做“意志力科学”的课程，参与过这门课程的人称其能够“改变一生”，这门课程就是《自控力》一书的基础。 我因为受不了自己的拖延、懒散，尝试过各种方法，列清单、写规划、自我反省、痛下决心、看心灵鸡汤，却仍然再次陷入堕落，反反复复，导致内心煎熬。曾经也一直以为自控力不足只是心理问题，是人格缺陷。在读完《自控力》这本书之后，才新奇的发现，原来自控力不足并不只是心理问题，影响自控的还有生理学，心理陷阱和各种社会因素。 在阅读的过程中，我也跟随着书中的实例、提问和行动建议对自己过往的生活习惯和失败经历进行了剖析，站在更加科学的视角认识了自己，与自己和解，并学习到了一些更加科学有效的提高自控力的方法。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:1:0","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:0","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"1. 我要做，我不要，我想要：什么是意志力？为什么意志力至关重要？ 这部分引出了“我要做，我不要，我想要”的神经学原理，大脑前额皮质对意志力的影响，提出了将注意力集中在呼吸上的冥想训练。 其中我印象比较深的，有下面几段内容： 意志力的重要性和神经学原理： 顽强的意志力是一个人最突出的优点。自控力比智商更有助于拿高分，比个人魅力更有助于领导别人，比同理心更有助于维持婚姻幸福。（没错，维持婚姻的秘诀就在于学会闭嘴。） 现代人大脑里前额皮质的主要作用是让人选择做“更难的事”。前额皮质并不是挤成一团的灰质，而是分成了三个区域，分管“我要做”“我不要”和“我想要”三种力量。前额皮质的左边区域负责“我要做”的力量。它能帮你处理枯燥、困难或充满压力的工作。比如，当你想冲个澡的时候，他会让你继续待在跑步机上。右边的区域则控制“我不要”的力量。他能克制你的一时冲动。比如，你开车时没有看短信，而是盯着前方的路面，就是这个区域的功劳。以上两个区域一同控制你“做什么”。 第三个区域位于前额皮质中间靠下的位置，他会记录你的目标和欲望，决定你“想要什么”。这个区域的细胞活动越剧烈，你采取行动和拒绝诱惑的能力就越强。即便大脑的其他部分一片混乱，向你大叫“吃这个！喝那个！抽这个！买那个！”这个区域也会记住你真正想要的是什么。 前额皮质并非始终可靠，醉酒、缺觉、分心等都会影响到它，使我们无法控制自己的冲动。 认清两个自我与意志力挑战： 有些神经学家甚至认为，我们只有一个大脑，但我们有两个想法。或者说，我们的脑袋里有两个自我。一个自我任意妄为、及时行乐，另一个自我则克服冲动、深谋远虑。我们总是在两者之间摇摆不定，有时觉得自己想减肥，有时觉得自己想吃饼干。 意志力挑战就是两个自我的对抗。 在意志力挑战中获胜的关键，在于学会利用原始本能，而不是反抗这些本能。 自控系统和生存本能并不总会发生冲突。在某些时候，它们会相互协作，帮我们做出更好的选择。 在做决定的时候，你必须意识到自己此刻需要意志力。否则，大脑总会默认选择最简单的。 通过冥想训练大脑，增强意志力 神经学家发现，人脑像一个求知欲很强的学生，对经验有着超乎大家想象的反应。 如果你让它忧虑，它就会越来越忧虑。如果你让它专注，它就会越来越专注。 你还可以做一件更简单、更无痛的事——冥想。神经学家发现，如果你经常让大脑冥想，他不仅会变得擅长冥想，还会提升你的自控力，提升你集中注意力、管理压力、克制冲动和认识自我的能力。一段时间之后，你的大脑就会变成调试良好的意志力机器。在你的前额皮质和影响自我意识的区域里，大脑灰质都会增多。 专心呼吸是一种简单有效的冥想技巧。 原地不动，安静坐好。 注意你的呼吸。 感受呼吸，弄清自己是怎么走神的。 刚开始的时候，你每天锻炼5分钟就行。习惯成自然之后，请试着每天做10~15分钟。如果你觉得有负担，那就减少到5分钟。 自控力是一个过程，在这个过程中，人们不断偏离目标，又不断把注意力收回来。 冥想不是让你什么都不想，而是让你不要太分心，不要忘了最初的目标。如果你在冥想时没法集中注意力，别担心。你只需多做练习，将注意力重新集中到呼吸上。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:1","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"2. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑 这部分讲述了意志力是种生理本能，给出了恢复意志力储备的一些方法。 其中我印象比较深的，有下面几段内容： 意志力的生理本能 科学研究发现，自控力不仅和心理有关，更和生理有关。只有在大脑和身体同时作用的瞬间，你才有力量克服冲动。 你不可能真的消灭一个欲望，因为欲望在你的内心和身体里，没有办法自动消失。 最有效的做法就是先让自己放慢速度，而不是给自己加速（比如应激反应）。“三思而后行”反应就是让你慢下来。 有很多因素会影响到意志力储备。 任何给你身心带来压力的东西都会影响自控力的生理基础，甚至会摧毁你的意志力。焦虑、愤怒、抑郁和孤独都与较低的心率变异度和较差的自控力有关。慢性疼痛和慢性疾病则会消耗身体和大脑的意志力储备。 要提高意志力的生理基础，上一章中的冥想练习就是最简单有效的方法。它不仅能够训练大脑，还能提高心率变异度。还有一些减轻压力、保持健康的方法，比如锻炼、保证良好睡眠、保证健康饮食、和朋友家人共度美好时光、参加宗教活动，都能增强身体的意志力储备。 通过呼吸和锻炼实现自控 告诉你一种快速提高意志力的方法：将呼吸频率降低到每分钟46次，也就是每次呼吸用1015秒时间，比平常呼吸要慢一些。只要你有足够的耐心，加上必要的练习，这一点不难办到。放慢呼吸能激活前额皮质、提高心率变异度，有助于你的身心从压力调整到自控力状态。这样训练几分钟之后，你就会感到平静、有控制感，能够克制欲望、迎接挑战。 科学家找到的自控力良药竟然是锻炼！对起步者来说，锻炼对意志力的效果是立竿见影的。 改善心情、缓解压力的最有效锻炼是每次5分钟，而不是每次几小时。所以，如果你只是花5分钟在小区里走走，也不用觉得不好意思。这样做的好处可能更多呢。 整理花园、散步、跳舞、做瑜伽、团队运动、游泳、逗孩子、逗宠物，甚至是精神饱满地打扫房间或者逛商店，都可以是有效的锻炼途径。 任何能让你离开椅子的活动，都能提高你的意志力储备。 科学家认为，5分钟的“绿色锻炼”就能减缓压力，改善心情、提高注意力、增强自控力。“绿色锻炼”指的是任何能让你走到室外、回到大自然怀抱中的活动。 低强度的锻炼，比如散步，比高强度的训练有更明显的短期效果。 通过睡眠恢复意志力 如果你每天睡眠时间不足6个小时，那你很可能记不起自己上一次意志力充沛是什么时候了。长期睡眠不足以让你更容易感到压力、萌生欲望、受到诱惑。你还会很难控制情绪、集中注意力，或是无力应付“我想要”的意志力挑战。 你的前额皮质同样急需能量，能量短缺会造成严重后果。 研究表明，睡眠短缺对大脑的影响和轻度醉酒是一样的。我们都知道，在醉酒的状态下，人们毫无自控力可言。 通过生理学放松反应恢复意志力 从压力和自控力中恢复的最佳途径就是放松。 能提高意志力的“放松”是真正意义上的身心休整。哈佛医学院心脏病专家赫伯特本森称之为“生理学放松反应”。你的心率和呼吸会放缓，血压会降低，肌肉会放松。你的大脑不会去规划未来，也不会去分析过去。 压力是意志力的死敌。但很多时候，我们都以为压力是解决问题的唯一途径。有时，我们甚至想方设法增加自己的压力，比如拖到最后一分钟、批评自己太懒、说自己没有自控力，以此来激励自己。或者，我们会通过对别人施加压力来敦促他人，比如调高办公室的温度，或在家里绷着一张脸。这在短期内可能有效，但从长远的角度看，没有什么比压力更消耗意志力了。 当我们面对的意志力挑战过于强大时，我们很容易给自己下这样的结论——我是个软弱、懒惰、毫无意志力的废物。但通常的情形是，我们的大脑和身体并未处于自控状态。当我们处在慢性压力中时，迎接意志力挑战的是最冲动的自己。想要赢得意志力挑战，我们需要调整到正确的身心状态，用能量去自控，而不是自卫。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:2","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"3. 累到无力抵抗：为什么自控力和肌肉一样有极限？ 这部分将自控力比喻为肌肉一样有极限。自控力用的太多会疲惫，但坚持训练能增强自控力。 其中我印象比较深的，有下面几段内容： 意志力随着时间的波动 意志力的肌肉模式告诉我们，自控力从早上到晚上会逐渐减弱。 意志力饮食方案 大多数心理学家和营养学家推荐低血糖饮食，因为它能让你的血糖稳定。低血糖食品包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。 训练意志力肌肉 设定一个期限，并在规定时间内完成任务。你可以用这种方法对付你一直拖着不做的事情。 在一些小事上持续自控会提高整体的意志力。 这些研究中训练的“肌肉”不是为了让你在规定期限前完成任务、用左手开门或不说脏话，而是让你养成习惯、关注自己正在做的事情、选择更难的而不是最简单的事。 如果你想彻底改变旧习惯，最好先找一种简单的方法来训练自控力，提高意志力，而不是设定一个过高的目标。 意志力比想象中多的多 疲惫不是一种身体反应，而是一种感觉，一种情绪。 这些运动员知道，第一波疲惫感绝对不是自己真正的极限，只要有了足够的动力，他们就能挺过去。 知道我们的意志力比想象中多得多，这确实是件令人开心的事。或许我们也可以像运动员一样，挺过意志力消耗殆尽的感觉，冲过意志力挑战的终点。 不过，要注意不要训练过度。如果你不断感到能量枯竭，你就需要考虑一下自己是不是真的精疲力尽了。 挖掘“我想要”的力量 如果挑战成功，你会收获什么？你个人会有什么回报？你会更健康，更幸福，更自由，更有钱，还是会更成功？ 如果挑战成功，还有谁会获益？肯定有人会依赖于你，你的选择会影响到他们。你的行为会如何影响你的家人、朋友、同事、雇主或雇员、街坊邻居？你的成功会怎样帮到他们？ 如果你现在愿意做困难的事，那么一段时间后，这个挑战将会变容易。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:3","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"4. 容忍罪行：为何善行之后会有恶行？ 这部分指出了一些心理陷阱，例如将纵容自己作为奖励，以及乐观精神让我们能在今天放纵自己。 其中我印象比较深的，有下面几段内容： 将纵容自己作为奖励 如果你去处理了一个重要项目就说自己很“好”，拖延着不去处理就说自己很“怀”，那么你很可能因为早上取得了进步，下午就变懒散了。简单来说，只要我们的思想中存在正反两方，好的行为就总是允许我们做一点坏事。 他们这样为自己辩解：“我已经这么好了，应该得到一点奖励。”这种对补偿的渴望常常使我们堕落。因为我们很容易认为，纵容自己就是对美德最好的奖励。我们忘记了自己真正的目标，向诱惑屈服了。 “我们本来可以吃掉整个披萨，最后只吃了三块。”如果按照这个荒谬的逻辑，我们可以把所有的自我放纵都变成引以为傲的事。 当你取得进步的时候，你的大脑就停止了思维进程，而这个进程正是推动你追求长远目标的关键。然后，那个放纵自我的声音就会响起来，你就会转而关注那些还没有得到满足的目标。心理学家称之为“目标释放”。你曾努力克制的目标会变得更加强大，诱惑也会变得更加难以抵挡。 在实际生活中，这就意味着，前进一小步会导致你后退两大步。 我们把需要做的事当成了自己已经付出的努力，这会给我们错误的满足感。 乐观精神让我们能在今天放纵自己 有时候，大脑会对能完成目标的可能性感到兴奋，它错把可能性当成真正完成了目标。 当他们想到之后能弥补过错时，他们第一次放纵自己时就不会有那么大的负罪感。 “今天放纵，明天改变”的循环是不是又开始了？ 我们错误的认为自己明天会比今天有更多的空闲时间。 如果我们现在表现糟糕，却用对未来的乐观期待来掩饰它，那么还不如一开始就不要设定这个目标。 她一直只关注每张收据结尾处写的“你节省了____!”，却忽略了自己总共花了多少钱。 想要走出“道德许可”的陷阱，我们就要知道，那个想变好的自己才是真正的自己，想按核心价值观生活的自己。如此一来，我们就不会认为那个冲动、懒散、容易受诱惑的自己是“真正”的自己了。我们就不会表现得像个必须被强迫完成目标，然后为作出的努力索要奖励的人了。 为了能更好的的自控，我们需要忘掉美德，关注目标和价值观。 明天和今天毫无区别。 取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想你做“好”事的原因，而不是你应不应该得到奖励。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:4","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"5. 大脑的弥天大谎：为什么我们误把渴望当幸福？ 这部分解释了奖励系统是怎么迫使我们行动的，我们的大脑错把奖励的承诺当作快乐的保证。 其中我印象比较深的，有下面几段内容： 多巴胺的作用和如何利用它 大量的多巴胺并不能产生快乐的感觉，那种感觉更像是一种激励，我们会觉得警醒、清醒、着迷。 多巴胺会促使人们期待得到奖励，但不能感觉到获得奖励时的快乐。 多巴胺控制的是行动，而不是快乐。 进化根本不关心你快乐与否，但它会利用对快乐的承诺，让我们不停地为生计奔忙。 因为我们知道自己可能会收到新消息，或者下一个更新的 YouTube 视频有可能让我们捧腹大笑，我们就不停地点击刷新按钮，点击下一个链接，像得了强迫症一样查看自己的设备，就像我们的手机、黑莓以及笔记本和我们的大脑之间有一根线连着，能给我们不断提供多巴胺刺激一样。 电脑和电子游戏的设计者是有意识地控制了人们的奖励系统，让玩家上钩。“升级”和“获胜”随时可能出现，游戏就这样激发了人们的兴趣。这也是人们很难戒掉游戏的原因。一项研究发现，电子游戏刺激和使用苯丙胺时产生的多巴胺一样多。正是这种多巴胺的增加使人们会对这两种东西上瘾。 我们可以从神经营销学家那里学到一些东西，试着把我们最不喜欢的东西“多巴胺化”。在承诺奖励之后，让我们不开心的家庭琐事可能变得很有吸引力。 比如带上可怕的文书工作走进自己喜欢的咖啡厅，边喝热巧克力边完成工作，或是极富创意地买一堆刮刮乐彩票，把它们放在你最想拖延的项目周围。 欲望的重要性 当他们不再需要快感的时候，他们就失去了动力。如果你想不出任何一件让你感觉良好的事，你就很难从床上爬起来做事。这种毫无欲望的状态耗尽了希望，也夺走了很多人的生命。 奖励的承诺并不能保证快乐，但没有奖励的承诺却肯定会带来不快乐。有了奖励的承诺，我们就会屈服于该诱惑。没有奖励的承诺，我们则会失去动力。 欲望没有绝对的好坏之分，重要的是欲望将我们引向哪个方向，以及我们是否足够明智，知道什么时候该听从欲望的声音。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:5","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"6. “那又如何”：情绪低落为何会使人屈服于诱惑？ 这部分叙述了如何避免压力导致的意志力失效，以及乐观的悲观主义者更可能成功。 其中我印象比较深的，有下面几段内容： 适当的与自己和解，放弃一些自控策略 如果我们想避免压力导致的意志力失效，我们就需要找到一种方法，让自己既快乐又不屈服于诱惑。我们也需要放弃一些自控策略，比如罪恶感和自我批评，因为这些东西只会让我们情绪更低落。 当拖延症患者想到自己已经远远落后于进度的时候，他们会万分焦虑，这反而让他们继续拖延下去。 有效和无效的解压方法 美国心理学家协会的调查发现，最有效的解压方法包括：锻炼或参加体育活动、祈祷或参加宗教活动、阅读、听音乐、与家人朋友相处、按摩、外出散步、冥想或做瑜伽，以及培养有创意的爱好。 最没效果的缓解压力的方法则包括：赌博、购物、抽烟、喝酒、暴饮暴食、玩游戏、上网、花两小时以上看电视或电影。 有效和无效的策略最主要的区别是什么？真正能缓解压力的不是释放多巴胺或依赖奖励的承诺，而是增加大脑中改善情绪的化学物质，如血清素、γ-氨基丁酸和让人感觉良好的催产素。 她在课后用手机存了一个语音备忘，描述自己做完瑜伽后的美妙感觉。 恐惧的坏处 有时候，“恐惧管理”带来的不是诱惑，而是拖延。 远离那些会让你产生恐惧的电视新闻、访谈节目、杂志或网页。 为什么罪恶感不起作用 “那又如何”效应。 这种效应描述了从放纵、后悔到更严重的放纵的恶性循环。 你会觉得这样的挫折暴露了你的问题——懒惰、愚蠢、贪婪或无能吗？你会感到绝望、罪恶、羞愧、愤怒或不知所措吗？你会以挫折为借口，更加放纵自己嘛？ 通过“自我谅解”，打破“那又如何”的循环，像贵人一样信任自己 在压力和挫折面前支持自己、对自己好一些。 自我谅解，而不是罪恶感，才能帮他们重回正规。 自我谅解能帮助人们从错误中恢复过来，因为它能消除人们想到失败时的羞愧和痛苦。 你只是个凡人。每个人都会遇到意志力挑战，每个人都有失去自控的时候。这只是人性的组成部分，挫折并不意味着你本身有问题。 实际上，我们可以尝试从良师益友的角度来看待问题。他们都信任你、想要你变得更好、愿意在你失意的时候鼓励你，你也可以这么做。 期望管理 我们的目标越宏伟，心中的期望值就越大。 “虚假希望综合症”总是偷偷出现，它会伪装成自控的样子。事实上，它真的糊弄了我们。 乐观给我们动力，但少许的悲观能帮我们走向成功。研究发现，如果能预测自己什么时候，会如何受到诱惑和违背承诺，你就更有可能拥有坚定的决心。 用这种方法预见失败其实是一种自我同情的方式，而不是自我怀疑的方式。当你真的受到诱惑的时候，你就能有所准备，能将自己的计划付诸实践。 当我们遭遇挫折时，不要把它们作为屈服或放弃的借口。想要增强自控力，自我同情比自我打击有效的多。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:6","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"7. 出售未来：及时享乐的经济学 这部分叙述了“延迟折扣”，以及“好高骛远”的人如何将放纵视为一种投资。 其中我印象比较深的，有下面几段内容： 延迟折扣 经济学家称之为“延迟折扣”。也就是说，等待奖励的时间越长，奖励对你来说价值越低。很小的延迟就能大幅降低你感知到的价值。 当多巴胺最先在人脑中起作用的时候，离你很遥远的奖励与当下的生活还没什么关系。 等待10分钟 想获得一个冷静明智的头脑，我们就需要在所有诱惑面前安排10分钟的等待时间。如果10分钟后你仍旧想要，你就可以拥有它。但在10分钟之内，你一定要时刻想着长远的奖励，以此抵抗诱惑。如果可以的话，你也可以创造一些物理上（或视觉上）的距离。 抵抗即时的满足感 当你受到诱惑要做与长期利益相悖的事时，请想象一下，这个选择就意味着，你为了即时的满足感放弃了更好的长期奖励。 想象你已经得到了长期的奖励。想象未来的你正在享受自控的成果。 然后扪心自问：你愿意放弃它，来换取正在诱惑你的短暂快感吗？ 破釜沉舟 有些行为经济学家认为破釜沉舟才是最佳的自控方法，他们都很喜欢这个例子。 受诱惑的自我是无法预料的、不可靠的敌人。 我们需要“像对待另一个人一样，逐步预测并约束那个自我”。这就需要诡计、勇气和创造力。我们必须研究受诱惑的自我，看清他们的弱点，用理性的偏好来束缚它们。 让改变偏好变的更难。 当你受到诱惑的时候，你能不能制造延迟或设置障碍，给自己一些时间来应对诱惑？ 不要等待未来的自己 你是否在推迟重要的变化或任务，等待自控力更强的未来的自己出现？你是不是乐观地让自己承担过多的责任，最后却被不可能的任务打倒了？ 遇见未来的自己 创造一个未来的记忆。德国汉堡——埃普多夫中心医科大学的神经科学家发现，想象未来可以让人延迟满足感。 给未来的自己发条信息。 想象一下未来的自己。研究发现，想象未来的自己能增强你现在的意志力。在一个实验中，宅男宅女们需要想象两个未来的自己。第一个是他们希望成为的自己。那个人能坚持锻炼，身体健康，充满能量。第二个是他们害怕成为的自己。那个人懒散度日，毫无活力，体弱多病。这两种想象都能让他们离开椅子。 不要好高骛远 他们用工作、美德或未来的幸福不断地推迟快感。但最终，他们会为自己的决定感到后悔。 为了你自己好，你是否太好高骛远了？你是否觉得放纵自己比抵抗诱惑还困难？ ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:7","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"8. 传染：为什么意志力会传染？ 这部分主要叙述了自控会受到社会认同的影响，使得意志力和诱惑都具有传染性。 其中我印象比较深的，有下面几段内容： 社交的影响 不是每个意志力挑战都是社会“传染”的结果，但大多数挑战都存在社会“传染”的问题。 回想一下，你有没有从朋友或家人身上学到过某种习惯？ 和某些人在一起的时候，你会不会更容易放纵自己？ 在你的社交圈中，最近有没有其他人也在尝试应对这个意志力问题？ 你在模仿谁？同样放纵自己的行为是不是维持关系的社会黏合剂？当看到周围的人在做同样的事时，你会不会变本加厉地去做这件事？ 目标传染在两个方向上都会起作用——你既可以感染自控，也可能感染自我放纵。 “疫苗”和榜样 在每天刚开始的时候花几分钟想想自己的目标，想想你会怎么受到诱惑，想要改变自己的目标。这就像疫苗一样，能保护你不受别人的感染。回想自己的目标能强化这个目标，避免你感染他人的目标。 谁能成为你的意志力榜样呢？ 你喜欢的人比陌生人更有传染性。 同事的影响怎么也比不上密友的影响，即便是朋友的朋友的朋友，也比你每天见到却不喜欢的人更有影响力。 行为就是这样传染的。和地理上的亲近程度比起来，社会关系上的亲密程度更重要。 自豪感的力量 实验研究发现，表现出内疚感会减少心率的变化，降低意志力的生理储备。反之，自豪感会保持甚至增加这种储备。 为了让自豪感发挥作用，我们必须认为别人都在监视自己，或我们有机会向别人报告自己的成功。 想象一下你在意志力挑战中取得成功后会多么自豪。这样，你就能充分利用“被认可”这个人类的基本需求。 研究显示，人一旦被提出群体，意志力就会耗竭。 与其让意志力受挫的人感到羞愧，倒不如为他们提供社会支持。 把它变成集体项目。你能在意志力挑战上赢过其他人吗？ ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:8","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"9. 别读这章：“我不要”力量的局限性 这是最后一章，主要叙述了“反弹”效应，以及直面自身欲望与驾驭冲动的方法。 其中我印象比较深的，有下面几段内容： 讽刺性反弹 当人们试图摆脱某种想法时，它却像回旋飞镖一样“嗖”地飞回来了。 “罗密欧与朱丽叶”效应——越是禁止两人相爱，他们爱得越深。 人越是想摆脱某种想法，这种想法就越可能回到意识中，这并不意味着这个想法是真实的，也不意味着这个想法很重要。 避免讽刺性反弹 这个方法本身就很有讽刺意味——这个方法就是放弃自控。 结果证明，这种方法对消除许多不好的内心感受都有用，它的适用范围大得令人吃惊。 忠于你的感受，但别相信你所有的想法。 关注自己的想法，而不是试着转移注意力。 接下来，把注意力转移到你的身体感受上，看看你是否会感觉紧张，心率或呼吸是否有变化，看看你的肠胃，胸腔，咽喉或其它身体部位是否有感觉。一旦观察到这些想法和感觉，就把注意力转移到呼吸上。感觉一下你是怎么吸气、呼气的。 不要停下呼吸，想象这些浮云不断消散或飘过。把呼吸想象成一阵风，它毫不费力地将这些浮云吹散、吹走。你无须让这些想法离开，只需保持呼吸的感觉。 不要抑制想法，接受它的存在，但不要相信它。你要接受的想法是：这些想法总是来来去去，你无法控制会出现什么想法，但你不必接受它的内容。 直面自身欲望，但不要付诸行动。 对内接受自我，对外控制行动。 把“我不要”变成“我想要” 我的一位学生想戒咖啡，所以就用喝茶来替代喝咖啡。茶和咖啡有几乎相同的作用，能给你休息的机会，能提神，能端着到处跑，而且不用摄入那么多咖啡因。 你可以做其它有趣的事来代替坏习惯。 我的一位学生把“不要迟到”重新定义为“做第一个到的人”或“提前5分钟到”。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:2:9","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"总结 这本书与其说是良药倒不如说是医生所开的诊断书，让我们从根源找到病因。以前我们总在寻找可以改正和提高自控力的方法，却忽视了我们为什么会不自控。这是一门涉及心理学，生理学甚至经济学的课程，它完全可以针对我们的意志力问题给出很好的解释。 书中提到了许多增强意志力的方法，豆瓣上有一位网友总结的非常好，内容如下： 1. 平时的修炼 专心呼吸是一种简单有效的冥想技巧。 锻炼是恢复体能和意志力的方法。 保证你的身体有足够的食物供应，这样能给你的大脑更持久的能量。推荐低血糖食品，包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。 在一些小事上持续自控会提高整体的意志力。 2. 身心状态的及时调整 告诉你一种快速提高意志力的方法：放慢呼吸，进行每分钟4-6次的深呼吸。 5分钟的“绿色锻炼”就能减缓压力，走出办公室，找到最近的一片绿色空间，呼吸新鲜空气，做些简单的伸展活动。 有效的解压方法。锻炼身体或参加体育活动、祈祷或参加宗教活动、阅读、听音乐、花时间和朋友在一起、按摩、外出散步、冥想或做瑜伽、以及培养其它有创造性的爱好。 3. 确立某个目标之后的事先准备 每天6-7个小时的睡眠。 在你意志力最强的时候做最难的事，比如早上。 预测你在实现目标的过程中，会怎样受到诱惑和违背承诺，想象自己到时应该怎么做才能不放弃抗争。 给未来的自己施加压力，如：预约体检、购买健身房年卡、出门购物只带现金、把闹钟放在房间另一端等等。 想象未来的美好图景。 给未来的自己写封信。向未来的自己描述一下自己现在将要做什么？想象未来的自己会因为现在的自己做了什么而感到感激。 在具体的场景里想象希望成为的自己和害怕成为的自己，然后进行对比。 为了避免重蹈别人意志力失效的覆辙，在每天开始的时候，花点时间想一想自己的目标。 寻找一个与你目标相同的“群体”加入进去，置身于与你共享承诺与目标的人群当中，你会觉得自己的目标才是社会规范。 找一个与你关系密切的人成为你的意志力榜样。 4. 面对诱惑时 “意志力肌肉”可以在正确的激励下坚持更长的时间。告诉自己：“很多现在很难的事情将变得容易。” 明天和今天毫无区别。告诉自己：“你真的相信自己今天吃下这块炸鸡明天就能坚持一天都吃素吗？你真的相信自己今天不学习明天就能补回来吗？别骗自己了！” 当期待着得到诱惑的时候，告诉自己残酷的现实：“等下你真的去……，你会发现根本没有你想象中那么快乐！” 下一回，当你发现自己将做过的努力当做放纵的借口时，告诉自己：“因为昨天一天都吃素，所以今天我奖赏自己一顿麦当劳，这样的逻辑不对。应该这样想：我昨天吃素是为了减肥这个目标，今天也应该同样为这个目标而努力。” 在所有诱惑面前安排10分钟的等待时间。如果10分钟后你仍然想要，你就可以拥有它。但在10分钟之内，你一定要时刻想着真正的目标，以此抵抗诱惑。如果可以的话，你也可以创造一些物理上的距离。 当你受到诱惑决定要做与长期利益相悖的事时，请想象你已经实现了最终的目标，然后郑重地问自己：“你真的决定要为了眼前的美餐而放弃减肥的目标吗？” 去想自己所想，追随自己的感受，但别相信自己所有的想法。当你产生不快的想法时，专注于呼吸，想象这些想法像浮云一样逐渐淡去。直面自身欲望，但不要付诸行动。当欲望来袭时，注意到它，但不要马上试着转移注意力或与之争论，记住你真正重要的目标。 5. 失败后 失败的时候，告诉自己：“一时的失败不算什么，我不能破罐子破摔。” ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:3:0","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":["读书笔记"],"content":"思考 在阅读这本《自控力》的过程中，各种从生理学的角度所分析出的结论亮点，不断地让我感到惊喜，收获到了许多科学且实用的增强意志力的方法。 我也对自控力有了全新的认识，不再自我怀疑，学会了与自己和解，接受缺陷的同时也更加积极地朝着好的方向付出行动，对美好未来更加胸有成竹😁。 ","date":"2021-11-06","objectID":"/2021/11/notes-from-the-willpower-instinct/:4:0","tags":["心理学","自我管理"],"title":"读书笔记之《自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它》","uri":"/2021/11/notes-from-the-willpower-instinct/"},{"categories":null,"content":"作者 姓名 郭冬Guō Dōng 英文名 Damon/ˈdeɪmən/ DAY-mən，灵感来自 Linux 操作系统中的 daemon/ˈdiːmən/ DEE-mən 守护进程和喜欢的好莱坞演员 Matt Damon 简介：实操型解决方案架构师、运维负责人、终身学习者 领域： 混合云 运维开发 大数据 网络安全 ","date":"2021-11-02","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"待办清单始于2021年2月 专业资质 AWS ⋄ AWS 认证解决方案架构师 - 专业级 ITIL ⋄ ITIL 4 Foundation - IT 服务管理认证 CKA ⋄ Kubernetes 管理员认证 CET6 ⋄ 英语六级 Degree ⋄ 工程管理硕士 GitLab ⋄ 极狐 GitLab DevOps 高级专家 ACP ⋄ 阿里云云计算高级工程师认证 CISSP ⋄ 信息系统安全认证专家 PMP ⋄ 项目管理专业人士 CDMP ⋄ 数据管理专业人士认证 IELTS ⋄ 雅思7分 读书笔记 向死而生：我修的死亡学分 自控力：自我控制如何运作、为什么重要以及你可以做什么来增强它 刻意练习：如何从新手到大师 番茄工作法图解：简单易行的时间管理方法 刻意放手：向最幸福的人学习幸福 影响力：让人乖乖听话的说服术 非暴力沟通：爱的语言 小岛经济学：鱼、美元和经济的故事 富爸爸穷爸爸：富人教孩子的理财智慧，而穷人和中产阶级却不知道 福格行为模型：微习惯改变一切 精益创业：新创企业的成长思维 如何阅读一本书：智慧阅读的经典指南 乌合之众：大众心理研究 ","date":"2021-11-02","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":["技能矩阵"],"content":"多云架构使组织可以利用每个平台的优势，同时最大程度地减少缺点。","date":"2021-11-01","objectID":"/2021/11/why-use-a-multi-cloud-strategy/","tags":["架构"],"title":"为什么要采用多云架构","uri":"/2021/11/why-use-a-multi-cloud-strategy/"},{"categories":["技能矩阵"],"content":"多云架构使组织可以利用每个平台的优势，同时最大程度地减少缺点。 ","date":"2021-11-01","objectID":"/2021/11/why-use-a-multi-cloud-strategy/:0:0","tags":["架构"],"title":"为什么要采用多云架构","uri":"/2021/11/why-use-a-multi-cloud-strategy/"},{"categories":["技能矩阵"],"content":"原因 多云架构使组织可以利用每个平台的优势，同时最大程度的减少缺点，我总结的主要原因有以下几点： 自主选择 多云基础设施可以结合每个平台提供的最佳服务，从而优化云投资的回报，赋予灵活性，避免因为与供应商的强绑定受到限制。 避免灾难 不要把所有的鸡蛋放在同一个篮子里。如果一个供应商出现基础设施崩溃、攻击或地缘政治风险，可以迅速地将服务切换到另一个云服务提供商。 安全合规 多云环境可以帮助企业实现安全治理、风险管理和合法合规的目标。 ","date":"2021-11-01","objectID":"/2021/11/why-use-a-multi-cloud-strategy/:1:0","tags":["架构"],"title":"为什么要采用多云架构","uri":"/2021/11/why-use-a-multi-cloud-strategy/"},{"categories":["技能矩阵"],"content":"架构 下面这张多云管理平台功能架构图，出自赵班长的公司北京速云科技有限公司自主研发的拳头产品OpsAnyMake Ops Perfect，从中可以看出在多云架构中所需要考虑到的各项服务模块，也不难体会到建设一个多云管理平台所需要面临的诸多挑战。 ","date":"2021-11-01","objectID":"/2021/11/why-use-a-multi-cloud-strategy/:2:0","tags":["架构"],"title":"为什么要采用多云架构","uri":"/2021/11/why-use-a-multi-cloud-strategy/"},{"categories":["读书笔记"],"content":"穿过死亡荫谷，品味生命甘露。","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"穿过死亡荫谷，品味生命甘露。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:0:0","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"序 李开复曾在 Apple，Microsoft 和 Google 这样的顶级科技公司担任过高管，堪称人生胜利组的他，对八零后这一代人有着显著的影响力。 在确诊罹患淋巴癌后，他对生命有了新的理解和体悟。《向死而生：我修的死亡学分》这本书真实地再现了李开复在病中的所思所想，能够看到他重生之后的人格魅力与价值观。 我在阅读这本书的过程当中，被不少的片段所触动，也更加明白了家庭，亲情和健康的重要性，对目前的生活和工作也有了一些警示。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:1:0","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"文摘 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:2:0","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"1. 与死亡交手 这部分叙述了一个“褪去光环，呼吸之间就会顿失所有的病人”不得不“与死亡交手”的每一个细节，幸运的是历经“否认、愤怒、讨价还价、沮丧和接受”的阶段后，李开复终于死里逃生。 其中我印象比较深的，有下面几段内容： 在律师的要求下预立遗嘱时，必须面对一些让人不寒而栗且荒谬的内容： 一份正式的遗嘱，必须严谨、周密地做好全盘考虑。律师告诉我，我的遗嘱必须考虑如下几个方面： 第一，假如我死了，我的遗产要如何分配给妻子和两个女儿？ 第二，假如妻子和我同时死了，遗产如何分配？ 第三，假如我和妻子，一个女儿不幸同时死亡，财产如何分配？ 第四，假如太太与两个女儿和我不幸同时死亡，又该如何分配？ 天哪！想到这些可能，我不寒而栗！然而，人间世事之荒谬，就在于你明知道它是荒谬的，可是又非做不可。我拿起笔，开始一个字一个字地写下我的遗嘱。 化疗结束后感慨“活着真好啊！”： 有一回化疗结束，回家休养，看着温暖的阳光晒在身上，我的精神、心情也都好极了。已经入秋的台北，到处绿意盎然。车子轻快滑过台北街头，阳光下的台北，美得像梦一样不真实，我忍不住在心里轻叹：“活着真好啊！” 在治疗期间的感受： 我因为化疗辅助药物造成严重便秘，苦不堪言，那阵子，只要哪天成功排便了，那个高兴啊！简直比我过去每天盯着不断增长的业绩报表更让人兴奋。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:2:1","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"2. 病中觉悟 以乔布斯“记住你即将死去”为座右铭的李开复开始了“病中觉悟”的过程，在养病期间经历了精神上的洗礼，偶然散步走到父亲骨灰安葬之地，和星云大师对话，重新审视自己不同时期的墓志铭，才真正明白“有容德乃大，无求品自高”的真谛。 其中我印象比较深的，有下面几段内容： 在不经意间与过世的父亲“偶遇”： “啊！慧济寺！”我下了一大跳！我怎么会走到这儿来了！ 我想起来了。没错，就是这儿，慧济寺，这是父亲灵骨所归之处。我居然走到这儿来了！ 我紧闭双眼，任泪水流淌。父亲始终默默无语，但我可以感觉到他就在我前面，宽和地看着我，就像我小时候偷了钱，后来自己害怕，把钱丢在墙缝里，他却什么也没说，只问：“你自己有什么感觉？”我没想到父亲会这么问，愣了一下就哭着说：“我对自己挺失望的。”他让我哭了一会儿，才拍拍我，轻轻地说：“希望你以后不要再让自己失望了。” 对活在当下的感悟： 当我确定自己患有淋巴癌第四期，并不会立即出现生命危险时，我还有机会重拾健康，弥补过去的缺失，庆幸之余，我就忍不住想，既然对“如果生命只剩最后100天”已经有过缜密的思考，为什么不从现在开始每天都这么过呢？ 和星云大师的对话： “什么是‘最大化影响力’呢？一个人如果老想着扩大自己的影响力，你想想，那其实是在追求名利啊！问问自己的心吧！千万不要自己骗自己……” “人生难得，人生一回太不容易了，不必想要改变世界，能把自己做好就很不容易了。” 与其让千万人过目即忘，不如让一两个人铭记在心。 放下骄傲之后的感悟： 也许是我在台湾养病期间的生活比较从容、悠闲，也许是我看清了过去对名声的追求是多么虚妄，我现在更容易从许多寻常百姓身上看到很多优秀的品质。 我发现，癌症面前，人人平等；而我，褪去了过去所有的光环、头衔，不过就是一个肉眼凡胎的普通人。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:2:2","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"3. 最有价值的人生 李开复在“最有价值的人生”里真情流露，不惜笔墨讴歌了自己的妻子，两个女儿，甚至后悔自己曾经冷漠粗暴对待一位陌生的年轻人。 其中我印象比较深的，有下面几段内容： 领悟了新的人生观： “再也不要把好东西留到特别的日子才用，你或者的每天都是特别的日子。” 这段话真是让我心有戚戚焉！在经历了大病折磨，与死神擦肩而过的震撼之后，我常常在想，怎样的人生才是没有遗憾的人生？ 我的体会是：1. 拥有健康；2. 创造“难忘时刻”；3. 尽力做好自己，不必改变世界；4. 活在当下。 对人生价值的理解： 这个世界的进步，包含了多少默默无闻的升斗小民不问回报的付出？只要一个人的一生对这个世界有所贡献，无论是老师帮助学生，医生、护士帮助病人，还是清洁工维护环境整洁，都是一种贡献；只要曾经帮助过别人，无论是拯救一个人的生命，还是为他人带来欢笑，都是一种帮助。 后悔自己曾经冷漠粗暴对待一位陌生的年轻人： 那只是万千中国学生当中的一个，过去，他的影像似乎淡漠得未曾存在过，但最近，我的心里却对他有很深、很深的愧歉！我想到他可能费尽心思地去找一样适合我，且他拮据的生活费用又负担得起的礼物，只因为我的书、我的某一句话打动了他；他把我当作导师、偶像，甚至是生命中的阳光。但我背弃了他。 对工作，公益和生活三平衡的总结： 下面是我个人的分配比例，每个人的比例不同，但趋势应该类似。 30多岁：90%给工作，1%给公益，9%给家人、朋友及休闲 40多岁：85%给工作，5%给公益，10%给家人、朋友及休闲 50多岁：75%给工作，10%给公益，15%给家人、朋友及休闲 60多岁：50%给工作，20%给公益，30%给家人、朋友及休闲 70多岁：25%给工作，30%给公益，45%给家人、朋友及休闲 我认为这三者都不能降为零，因为： 如果工作为零，那么头脑就会退化，在社会上的话语权，甚至公益的影响力都会下降。 如果公益降为零，那么就太功利、太自私了，只为自己，没有社会责任感。 如果家庭+朋友+休闲是零，少了亲情、友情的温暖与爱，生命缺乏滋润与调节，人基本上跟一台机器没什么两样。 赞扬创业者： “其实世界上最伟大的一批人就是创业者。因为他们的工作是没有包袱、没有官僚的。他们的资源是没有浪费的，能有多少，就全部用上！他们是有心改变世界，而且胆敢改变世界的人。 他们有自信，有理想，不为五斗米折腰，愿意做穷光蛋，即使被父母老婆批评也要创业。人们有时候会认为他们是疯狂、偏执、天真的，但是只有他们真的能够改变世界。” 对家庭陪伴的反思： 孩子的成长是不等人的，错过就错过了，很难弥补，无论如何都应该尽量给孩子最完整的陪伴。特别是在压力很大的时候，每一次可以和孩子相处的时光，开怀地和他们嬉笑玩闹，都是我感觉人生最疗愈的时刻。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:2:3","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"4. 健康，我对自己的承诺 在这个部分，李开复和大家分享了自己的健康生活指南。 其中我印象比较深的，有下面几段内容： 对平衡养生和追求事业的理解： 我劝谏大家，养生和追求事业，这两件事是完全不冲突的。对创业者来说，或许你未必能够达到标准的健康要求，但至少应该要求自己能及格。从更长远的角度来看，每天多花几十分钟运动、多睡一小时，会让自己更有精神，心情更好，绝对不是“浪费了一个多小时”。 其实，保持效率和维护健康是一回事，一个人并不是只能在工作狂与隐退的养生者中二选一。 以健康换取成功是不明智的，也无法持久。 一些优质睡眠的诀窍： 天天睡得好，烦恼自然少。 找一条你最熟悉的路——可能是小时候上学、放学的路，最好是熟悉路上的许多细节，不用思考、回忆，你都了然于胸。上床睡觉时，闭上眼睛，什么都不想，就想象自己“仿佛”在那条路上轻松散步。因为有事可做，又不用真的动脑筋，很快就可以轻松入眠。 台湾辅仁大学心理系助理教授陈建铭在《给工作忙碌者的睡眠建议》一文中分析了七种形成睡眠规律的办法： 维持生物钟，固定作息时间。 规律运动。 睡前降低亮度，起床后照射阳光。 睡前六小时勿饮用咖啡等刺激性饮品。 不以酒助眠。 谨慎使用安眠药。 每晚维持舒适的睡眠情境。 五个优质睡眠诀窍 睡前不要安排费时费力的工作。 设定一个停止工作的时间，睡前加班，远不如第二天早起再做效率高。 记录每天睡觉和起床的时间，养成健康的睡眠习惯。 不要因为失眠而感到压力大，放松最好。 睡眠的质量比时间更加重要，让自己处于舒适的状态。 重视身体的信号和运动： 小便的频率也很重要，憋尿绝对不行，尿不出来或尿频都很麻烦，一定要看医生。 相信身体给你的信号，不管是感觉饥饱还是有睡意，便意，都不该忽视它，特别是平常有便意却不去，最后往往就排不出来了。 人体的运作是非常繁复而且精密的，一个细胞里面的忙碌程度，绝不亚于一个纽约市的运作。医生不会比你自己更懂你的身体，养成观察自己的好习惯，不管是求医还是照顾自己，有时候会比医院的各项检测数据还要可靠呢！ 合适的运动可以促进心血管弹性、增强心肺功能，还可以刺激大脑分泌多巴胺，让人心情愉快。 五个面对焦虑的诀窍： 健康饮食：蔬菜，粗粮比垃圾食品更能舒缓心情。 少喝咖啡：过量咖啡会消耗血清素，使情绪更糟糕。 锻炼身体：运动可以释放内啡肽，有助于减压，保持头脑清醒。 制定计划：面对任何事情，设法获取全部信息并制订相应的处理计划，胸有成足，自然可以降低焦虑感。 心存感恩：常将世间种种可爱放在心上，保持积极、正向的心态。 充满正能量： 自我心理建设，用正面的语气说话。 多做让自己快乐的事，把欢笑与快乐带进你的生活，感受生命的美好与恩赐。 多接触正面的思想，正能量的朋友。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:2:4","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"5. 家人，教我懂爱 在这个部分，李开复深情回忆了自己父母对自己的教育，以及自己又是如何薪火相传教育两个孩子的，得以一窥李开复的成长过程和教育理念，读来让人获益匪浅。 其中我印象比较深的，有下面几段内容： 父亲的家国情怀： 父亲一生心系家国，《大陆寻奇》是他唯一感兴趣的电视节目；临近晚年听到老歌往往抽泣不已，难抑心中悲情。直到父亲在世的最后五年，他终于有机会回到四川老家，在祖母墓前，他几度失声痛哭；离乡返台那晚，他取出一枚四川金石名家篆刻的印章给我们看，上面刻的是“少小离家老大回”，还未开口，便再度失声痛哭。 他在病重曾梦见在水岸边拾获一张纸，上面写着“中华之恋”四个字。 对高龄母亲的爱： 母亲为了照顾我，每年一定会抽出半年时间到美国陪我念书。 母亲唯一的休闲就是看一档猜价格的节目，每天猜一颗白菜的价格是多少，一个杯子又是几块钱。她其实一句英文都听不懂，只能凭节目效果判断谁猜对了，谁猜错了。 我们几乎无法想象一个人怎么会在五十多岁时，跑到一个语言完全不通的国度，放弃朋友圈，放弃每天有人帮佣，不用做家务的生活，过上了每天要早起、烧菜、洗碗的日子，唯一的寄托就是儿子放学回来和她说上两句话。 我亲爱的母亲！宝宝在哪里？我找到您了。您是一个即将再出生、再成长、充满喜悦、无忧无虑的婴儿。母亲，我永远爱您，不只在这辈子，更是在永恒的生命轮回里，生生世世。 对婚姻的理解： 成功的婚姻不是建立在安全、拥有的基础之上，而是建立在平等、自由之上。婚姻不是在制造罪恶感的义务，而是彼此互补，彼此互谅，彼此互相扶持的过程。 父母能为孩子做的： 我可爱的女儿，你们是否还保有自己的梦想呢？请你们不要太担心将来自己要做什么样的工作，也不要太急功近利。尽兴选择你的点吧，要相信有一天机缘来临时，你会找到自己的人生使命，画出一条美丽的曲线。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:2:5","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"总结 在本书的发布会上，李开复把自己的感悟归纳为补修的七个死亡学分： 健康无价。我在平时的生活里热爱美食，不爱睡觉，每天晚上回来急回邮箱，真正生病以后才深深体会到，健康失去了就是什么都是没有了。年轻人该在保障睡眠、压力、运动、饮食四点达到及格的前提下，去拼搏工作。 一切的事务都是有他的理由。就像把灾难当成因而非果，当成学习机会。 珍惜缘分，学会感恩和爱。 学会如何生活，活在当下。 避免一些诱惑，我虽然认为自己走的道路是正确的，但是，过度追求名声让我的中心轴走偏了。 人人平等，善待每一个人。我得了癌症发的第一条微博：癌症面前、人人平等。但是，等我慢慢觉醒以后，发现在任何事物上人人都是平等的。我们凭什么来说这个人是普通人，这个人不怎么样，这个企业不会成功？ 人生到底是为什么？人生只有一次，我们死去离开这个世界，如果这一生是来体验是来学习来提升，我相信也会让这个世界更美好。这样整个世界整个群体都是变得更加正向。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:3:0","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["读书笔记"],"content":"思考 在书中，李开复分享了与病魔的抗争，对过往生活的反思，对家人的感恩与珍爱，这些内容都是非常有意义的，我也跟随他的亲身经历感受了一次“穿过死亡荫谷，品味生命甘露”的滋味，也警醒了自己，立刻开始关注健康和家庭，并做出了行动，受益匪浅。 ","date":"2021-10-31","objectID":"/2021/10/notes-from-live-for-death-my-experience-on-dying/:4:0","tags":["人物传记"],"title":"读书笔记之《向死而生：我修的死亡学分》","uri":"/2021/10/notes-from-live-for-death-my-experience-on-dying/"},{"categories":["生活感悟"],"content":"重拾了对学习的信心与热情，对未知事物探索的勇气，以及对美好未来不断增加的信念。","date":"2021-10-30","objectID":"/2021/10/if-you-are-in-full-bloom-butterflies-will-come-naturally/","tags":["起点"],"title":"你若盛开，蝴蝶自来","uri":"/2021/10/if-you-are-in-full-bloom-butterflies-will-come-naturally/"},{"categories":["生活感悟"],"content":"重拾了对学习的信心与热情，对未知事物探索的勇气，以及对美好未来不断增加的信念。 ","date":"2021-10-30","objectID":"/2021/10/if-you-are-in-full-bloom-butterflies-will-come-naturally/:0:0","tags":["起点"],"title":"你若盛开，蝴蝶自来","uri":"/2021/10/if-you-are-in-full-bloom-butterflies-will-come-naturally/"},{"categories":["生活感悟"],"content":"为何重新开始 下定决心将旧的博客封存，再重新开始撰写新的博客，并不是心血来潮或一时冲动。 时光如梭，不经意间我从毕业到现在已经工作了十五年。 旧的博客里的大部分文章，在云计算已经普及的今天，已经显得比较过时，并且也有很长时间没有更新过了。 两年前，为了突破发展的瓶颈，在以后的职业生涯中能够再上一个台阶，我选择了重返校园，并在备考和求学的过程中，获得了新生😄，重拾了对学习的信心与热情，对未知事物探索的勇气，以及对美好未来不断增加的信念。 因此，我决定重新开始，撰写新的博客，来记录我人生新阶段的成长历程。 ","date":"2021-10-30","objectID":"/2021/10/if-you-are-in-full-bloom-butterflies-will-come-naturally/:1:0","tags":["起点"],"title":"你若盛开，蝴蝶自来","uri":"/2021/10/if-you-are-in-full-bloom-butterflies-will-come-naturally/"}]